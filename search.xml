<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>省道公路抛尸案-答案</title>
      <link href="2021/05/crimaster-reasoning-corpse-throwing-case-on-provincial-highway-ans/"/>
      <url>2021/05/crimaster-reasoning-corpse-throwing-case-on-provincial-highway-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>死者的死亡地点是?<br><font color="#56c596">A.家中</font><br> B.省道旁<br> C.车内  </li></ol><ol start="2"><li>谁制造了不在场证明杀害了死者?<br> A.刘秋荣<br><font color="#56c596">B.张烨</font><br> C.池艺  </li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>本题涉及到三个点：</p><p>1、机械性室息:是指因机械性暴力作用引起的呼吸障碍所导致的窒息。由于机械作用阻碍人体呼吸，致使体内缺氧，二氧化碳蓄积而引起的生理功能障碍。</p><p>机械性窒息死的外表征象的主要特点是：尸斑出现早而显著，呈暗紫红色；尸冷缓慢；颜面发绀，肿胀；面部皮肤和眼结合膜点状出血；口唇、指(趾)甲紫绀；流涎，大小便等失禁排出。</p><p>2、鲁米诺:又名发光氨，被氧化时能发出蓝光。血液中含有血红蛋白，血红蛋白含有铁，而铁能催化过氧化氢的分解，让过氧化氢变成水和单氧，单氧再氧化鲁米诺让它发光。在检验血痕时，血红素催化鲁米诺与过氧化发生反应，显出蓝绿色的荧光。这种检测方法极为灵敏，能检测只有百万分之一含量的血，即使滴一小滴血到大缸水中也能被检测出来。</p><p>鲁米诺可以检测出动物血及尿中的少量血，因此如果待测环境含有尿或动物血，检测结果会有偏差。鲁米诺与排泄物反应，发出的光与和血反应发出的是相同的</p><p>3、蒙太奇，原为建筑学术语，意为构成、装配，电影发明后又在法语中引申为“剪辑”。当我们在描述一个主题时，我们可以将一连串相关或不相关的镜头放在一起，以产生暗喻的作用，这就是蒙太奇。后来被引用在推理作品中，很多经典影视作品及文学作品先后出现了“蒙太奇”概念，利用周围的环境，调整相应的时间，洗脑周围人的思维，逆转前后的空间，形成完整句号的证据链。</p><p>此处推荐两部电影《蒙太奇》、《误杀》。</p><p>在对以上的信息有所了解之后，我们再来看本案件的一些疑点，该案件出现的蒙太奇手法非常少见，但很多知名作品中都有存在，而现实中也发生过类似案件，本案主要根据杀人动机、时作案手法等结合排除法，最终推得真凶。</p><p>问题一：死者死亡的地点，答案：家中。死者的死因为遭人扼颈所导致的机械性窒息，而机械性窒息者可能会大小便失禁，柜子中藏匿的沾有死者排泄物的衣服以及门口微弱的鲁米诺反应，可以初步判断死亡地点为家中。如果凶手在车中或省道旁这一外界杀害死者，那么没有必要冒着被人认出以及其他的风险返回死者家中藏匿衣物，最大嫌疑人丈夫可以在家中便于杀人，但如果真的是丈夫行凶，不可能将此类证物以及乙醚、手套等工具放在家中等待警方调查。</p><p>问题二：杀害死者的凶手，答案：张烨</p><p>本案件，三位嫌疑人都拥有不在场证明，既然题目中已给出锁定这三个人，那其中一人肯定伪造了不在场证明。</p><p>池艺：在案发时有咖啡店服务员的时间线证明，但这样的不在场证明其实比较好伪造，结合她家的猫咪中毒与死者有关，其有作案的嫌疑。人类的指甲平整，抓伤呈现较宽的红肿疤痕，而池艺手腕的抓伤为细长抓痕，结合池艺猫咖店老板的身份，可以断定抓痕为猫咪造成。而后座的鲁米诺反应，结合猫舍下毒事件可以推测鲁米诺反应来源可能是猫咪农药中毒，伤及胃部造成内出血，随着呕吐反应一起吐了出来。</p><p>死者的死因为机械性窒息，从指甲的断裂可以推测死者当时并未被注射或服用或其他方式迷晕，其被袭击时有反抗能力。而池艺作为一个女性，很难独自完成杀人以及将尸体装入行李箱再抬到车上最终进行抛尸的一系列行为。</p><p>从动机上判断，案发后虽然从死者家中搜出证明江雨遥猫舍下毒的物证，但没有证据表明池艺事先知道这一情况，即使有所怀疑，但其怀疑程度并不足以驱使池艺杀人。</p><p>池艺在离开猫咖时听到了死者邻居家关门声及重物倒地声，假设此人无罪，那这很有可能听到的就是凶手前往死者家作案时发出的声响，这个人物的线索设定起到了一个判断凶手的作用。</p><p>刘秋荣：就目前线索来看刘秋荣有重大作案嫌疑，无论是家中发现的沾有死者排泄物的衣物，还是房间内藏有的手套，乙醚，纱布，水下呼吸器等，都表明刘秋荣有杀害被害人的倾向。且从作案动机上来讲，长期受到死者的威胁，有一定的作案动机。但这些物品的组合，不难推理出刘秋荣的杀人手法。</p><p>刘秋荣原本所作计划：携带作案工具前往酒吧找到喝醉的江雨，并准备好乙醚防止江雨遥还有自我意识，使其昏迷后将车开至湖水边，然后伪造成江雨遥酒后驾车，发生事故的假象。而要完成这一操作则需要刘秋荣坐在副驾驶，控制方向盘以及油门，所以为以防万一，刘秋荣配备好了水下呼吸器，在车辆沉下去后逃离车内。但其所准备的杀人工具是在死者死亡的第二天才到货签收在未准备好的情况下贸然进行杀人风险较大。</p><p>且如果是刘秋荣杀人，在杀人后这些原本他打算用来作案的工具应该立即处理掉以免引起警方怀疑，且占有排泄物的死者衣物作为杀人的确切证物更不应留在家中。</p><p>最后一位嫌疑人，也就是死者的同学张烨，根据时间线推断，他并没有作案时间，但是其它线索表明了他确实有杀人动机，而且也符合入室掐死人的条件，结合嫌疑人池艺的口供等线索，案发当日进入死者家的关门和倒地声，一定就是凶手作案时发出来的，排除丈夫和池艺的嫌疑后，张烨应该就是那天进入现场的人，死者家中鲁米诺反映是因为大小便失禁造成，脱掉死者衣服致使其浑身赤裸，一方面为了报女友的羞辱之仇，另一方面是为了放在家中引导调查方向，增加丈夫的嫌疑和调查的难度，而且衣物上粘有排泄物，很难避免洁染到其它地方，那现在就是推理他如何伪造了不在场证明，再次回到线索上张烨提供了一张案发当日的购物小票和凌晨的打车记供了一张案发当日的购物小票和凌晨的打车记录，口供中说明他当晚和朋友万阿丹在一起，假定张烨是凶手，那事情就大致分为两种走向，万阿丹做了伪证，另一个是张烨利用了万阿丹，采用了“蒙太奇”的概念混淆了万阿丹的想法，利用特定的环境伪造相应的时间，不断洗脑传输给周围人自己想要灌输的思维想法，逆转前后的空间，形成完整句号的证据链。在万阿丹没有做伪证的情况下，推断出张烨和万阿丹喝酒的那天可能并不是案发当日，很有可能是在案发前一日或案发后一日，利用酒精麻痹神经，喝到后半夜凌晨打车送走朋友，而凌晨的当日与案发当日为一天，利用其特点混淆日期，并在警方找到他们之前的日子里多次暗示两人在18日起喝酒的场景，致使万阿丹在不知情的情况下做了伪证，但其实凶手张烨在案发前一天和万阿丹喝酒并购买了啤酒零食，凌晨时分也就是案发当日打车送万阿丹回去，这样做是为了不给万阿丹手机上留有打车记录，然后在18号先是前往超市在与昨日相同的时间点购买了同样的物品后，前往死者家行凶后抛尸，然后回到家中等待至凌晨又利用软件叫了一辆网约车辆，线索中的小细节点表示是舒适型车辆，最大概率的减少车辆的差异性。</p><p>案件还原：</p><p>江雨遥大学时期与符晶为闺蜜，江雨遥喜欢着同班的张烨，但张烨与长相优异，成绩优秀的符晶先一步在一起，江雨遥虽然表面上维持着三人的友情，但一直对符晶抱有嫉妒的心理，有一次符晶的舅舅前来接符晶岀校游玩，顺便带了束花给符晶，这一幕被江遥撞见，江雨遥便趁机拍下了那张照片，随后又发给了无良记者，记者为了点击率，在不清楚事实的情况下编造标题，这篇报道引起了学校论坛的一阵风波，同时江雨遥故意在网络上购买“水军”制造舆论导致不少人制作出符晶的表情包和人脸合成的不雅视频，符晶下变成了负面论的焦点，就连张烨也对符晶产生怀疑，虽然符晶进行解释，但面对男友的不信任，二人关系不久后便破裂，事件一度发酵，最后符晶的家人报了警这件事才逐渐平息，但符晶也因此患上了严重的心理疾病，一个清白女孩被人唾弃污蔑，巨大的心理压力使符晶最终选择跳楼自杀。而张烨虽然在了解到了事件全貌后积极陪伴符晶进行治疗但悲剧依旧发生了。悔恨莫及的张烨毕业后从事了记者这一工作，并进入了当初报道这一事件的报社，在一次工作中张烨接触到了报道当初这件事件的记者田兰，张烨对田兰非常记恨，但张烨更记恨的是提供照片和个人信息的幕后者，张烨通过与田兰聊天，套出了当年爆料的人竟为江雨遥，怒从心起。张烨提前半月来到死者小区观察地形，了解小区内的监控以及死者家中人员等各种信息。最终让张烨有了接下来的计划。</p><p>毕业后没两年的江雨遥勾引上了公司老板刘秋荣，二人很快便结婚，但江雨遥只是看上了刘秋荣的钱财，并在掌握刘秋荣公司洗钱证据后，以此威胁刘秋荣，刘秋荣在发现江雨遥私生活混乱后，想借此离婚，但江遥以证据威胁，如果离婚则要分取公司一半的资产，这让刘秋荣非常恼火，面对手握证据的妻子，怒火中烧的刘秋荣企图策划起江雨遥的死亡，但却被张烨先下手为强。</p><p>江雨遥为了给自己招财，查询到了泰国独有的”猫胎路过”这种”敛财蛊术”，”猫胎路过”的制作条件是取胎死腹中的子猫，被毒死的母猫与其胎儿邪怨更深。(猫胎路过为泰国邪术，并无依据以及实际功效，切勿模仿)江雨遥对楼下的流浪猫多有不满，其为了解决掉这些流浪猫的扰民行为并且可以取到胎死腹中的子猫，便决定对池艺家的猫下手，江雨遥知道池艺家的猫会外出觅食。将混有农药和猫薄荷的猫食投放在隐蔽处猫舍的猫咪们嗅见猫薄荷争相前来觅食，最终发生猫咪集体中毒事件，池艺见状一边慌张将猫咪们抱下楼放进车里一边呼喊人帮忙，江雨遥打着帮忙的名义进入猫舍，实则趁机进入猫舍内寻找怀孕的母猫，并趁池艺不注意抱走了其中一只怀孕的母猫，待其被毒死后在家中将子猫取出并风干做成了”猫胎路过”(也就是在江雨遥柜子中搜出的猫骨挂坠。)事后池艺报警，警方以恶意投毒立案调查，目前仍在调查当中。虽然发生了这一下毒事件，但并没有足够的证据证明是江雨遥所为，所以池艺虽有怀疑，但并不至于杀害江雨遥。但随着这起凶杀案的出现，猫舍下毒事件也宣告侦破。</p><p>案发过程：</p><p>张烨17日在公司喊上万阿丹一起去往张烨家中喝酒，随后20:00左右张烨声称家中没有了啤酒要去附近的便利店购买啤酒零食，以此加深万阿丹的印象。为第二天的不在场证明留下证据，随后下楼前往离家较远的连锁便利店购买物品回来后与其喝酒至凌晨，然后为其打车将他送回了家。张烨在18号与昨日相同的时间，前往离家最近的便利店购买相同的物品，同时留下了购物小票。随后开车带着提前准备好的行李箱前往江雨遥家中。张烨来到江雨遥家门口敲响了房门，假装去找她谈事情，此时的江雨遥并没有预料到自己即将被杀，没有太多防备，在江雨遥开门后张烨随即进屋关上房门然后陈其不备将其推倒骑在她身上将她活活掐死。案发同时池艺在猫舍整理完猫舍的物品正准备出门，便听见了隔壁开门关门以及重物倒地的声音，但是池艺并未在意这异动，不久便下楼开车离开了案发楼栋。听见池艺开门离开的声音后张烨通过猫眼确认池艺的离开。然后发现死者的下身有排泄物排出，便脱下了江雨遥的衣物塞到衣柜里面，一是为了报女友的羞辱之仇，二是为了将杀人嫌疑引向江雨遥的老公刘秋荣。随后将地面清理干净并把赤裸的死者装进了行李箱，拖下楼将行李箱塞进了汽车后备箱。随后开车行驶至无人处换下了套牌的车牌，然后前往抛尸地点，将装有尸体的行李箱拖至离路边约10米处的荒草丛地进行抛尸，随后开车返回景德镇市区。换下车牌然后在凌晨与昨日相同时间打了车用来伪造时间。</p><p>记忆是分步进行的，可分为:感觉记忆、短时记忆和长时记忆。任何信息都要经过这三个步骤先被感觉到，后进入短时记忆，最后接受长时记忆。在案发后数日，张烨不经意的和好友万阿丹提起18号这个时间，说起17号发生的事情，并不断引导万阿丹将那天喝酒的时间记在18号。</p><p>18日20:45刘秋荣从公司的地下车库开车返回家中，发现江雨遥并不在家中，在打电话无人接听后，刘秋荣判断江雨遥可能在酒吧听不见手机的声音，随后开着江雨遥的车前往江雨遥经常光顾的酒吧，但来到酒吧的刘秋荣搜寻无果，拨打电话无人接听的情况下，只能驾车返回。</p><p>导致符晶自杀的原因和张烨策划这起谋杀案的动机，均是来自于，现代部分媒体记者通过不实的报道，在不了解事件全貌的情况下断章取义。通过文章影响观众，符晶校园中的部分校友在面对这种不实的报道选择吸收，最终导致校园暴力的发生。</p><p>针对社会上的各种讨论，有杂志曾做过题为怎样看媒体报道校园暴力伤害事件的调查调查中发现，57.1％的人认为后来发生的几起校园暴力伤害事件与媒体以前的类似报道有关系.中南财经政法大学乔新生教授在接受记者采访时也认为不断发生类似暴力事件，可能是因为媒体的过度报道而产生了连锁效应，因此媒体工作者更应该谨慎言行，面对报道素材，做到求真务实，以免对社会产生不必要的影响。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>省道公路抛尸案</title>
      <link href="2021/05/crimaster-reasoning-corpse-throwing-case-on-provincial-highway/"/>
      <url>2021/05/crimaster-reasoning-corpse-throwing-case-on-provincial-highway/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>2021年5月22日景德镇市警方接到报案称，在景德镇一处省道附近，一村庄的村民在回家的路上发现了个装有尸体的行李箱，通过调取近期失踪人口档案以及民间走访调核对DNA和指纹确定了死者身份，根据现场的勘测以及对死者的相关调査，已锁定3名嫌疑人员，因该案件社会影响恶劣，需尽快侦破此案。目前警方已在CRIMASTER公开部分线索，希望可以借助全球侦探的力量侦破此案。</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>案发地地处景德镇省道路旁，距路边大约10米左右的荒地，该段道路没有配备监控摄像头，被发现时尸体呈现蜷缩状态被塞在行李箱中。附近村庄的村民杨芬今日外出务农，结束后领着自家小狗想绕近路走小路回家，穿过省道后，狗突然发疯似的径直往前面跑去，报案人跟着过去后就发现了行李箱，好奇心的驱使下打开，发现里面竟藏了具尸体。警方根据多方面调查后锁定三位嫌疑人，但三位嫌疑人均有不在场证明。</p><img src="/assets/images/crimaster/2021/05/20210523-1.png" alt="图片" class="post-image half"><p style="text-align:center">(省道图片仅供参考)</p><h1 id="江雨遥（死者）"><a href="#江雨遥（死者）" class="headerlink" title="江雨遥（死者）"></a>江雨遥（死者）</h1><h2 id="死者信息"><a href="#死者信息" class="headerlink" title="死者信息"></a>死者信息</h2><p>女，25岁，155cm,42kg，面容矫好但异常迷信，已婚，无业。</p><h2 id="尸检报告"><a href="#尸检报告" class="headerlink" title="尸检报告"></a>尸检报告</h2><p>死因为机械性窒息，扼颈可形成。脖子处有明显的青紫掐痕，但并未发现指纹。死者右手食指与中指指甲有断裂，指缝中未发现嫌疑人皮肤血液DNA等线索，死者浑身赤裸，经法医检死亡时间为5月18日晚20:00～22:00左右，抛尸时间通过对当晚驶入省道必经路段旁一处商店门口的监控进行排查，锁定了一辆黑色嫌疑轿车，该车于5月18日晚21:15驶入省道，22:16又通过省道口返回景德镇。</p><h2 id="行李箱"><a href="#行李箱" class="headerlink" title="行李箱"></a>行李箱</h2><p>抛尸所用行李箱为26寸的大型行李箱，行李箱的一面有明显剐蹭和拖拽遗留下的痕迹。经确认该行李箱在市面上多处商场超市网店均有出售。行李箱内除赤裸女尸之外并无他物，未发现可以嫌疑人的指纹或遗留物品</p><h2 id="案发小区"><a href="#案发小区" class="headerlink" title="案发小区"></a>案发小区</h2><p>该小区人车流量较大，大门监控三天覆盖一次，暂未发现死者离开小区的画面。死者居住房屋的进门口的地板上，发现了一小块微弱的鲁米诺反应。</p><h2 id="房间"><a href="#房间" class="headerlink" title="房间"></a>房间</h2><p>死者房间衣柜最下层找到了死者当晚所穿衣物，下装沾有死者的排泄物，房间柜子中有一小瓶开封的农药和一袋猫薄荷饼干。上层的柜子中有一个挂坠，挂坠中有有一具猫咪的部分骸骨。</p><h2 id="微信记录"><a href="#微信记录" class="headerlink" title="微信记录"></a>微信记录</h2><p>5月13日:<br><strong>闺蜜</strong>：今天张烨打电话跟我询问当年的事，我觉得他可能怀疑到我们头上了。<br><strong>江雨遥</strong>：他要怀疑就让他怀疑吧，事情都过去这么多年了，那也不是我们的错。<br><strong>闺蜜</strong>：……可是你明知道那是符晶的舅舅，还拍下照片，发给那些记者，万一东窗事发怎么办。<br><strong>江雨遥</strong>：你闭紧嘴巴，就不会有事!</p><h2 id="嫌疑人车辆"><a href="#嫌疑人车辆" class="headerlink" title="嫌疑人车辆"></a>嫌疑人车辆</h2><p>三名嫌疑人的车辆均为黑色大众轿车，因监控拍摄不清，无法确定具体型号及车辆。经过核对车牌及轨迹显示，三人车辆均未在当日前往省道方向，极大可能使用套牌。</p><h1 id="刘秋荣（丈夫）"><a href="#刘秋荣（丈夫）" class="headerlink" title="刘秋荣（丈夫）"></a>刘秋荣（丈夫）</h1><h2 id="嫌疑人信息"><a href="#嫌疑人信息" class="headerlink" title="嫌疑人信息"></a>嫌疑人信息</h2><p>刘秋荣，死者的丈夫，男，36岁，一家民营企业老板。</p><h2 id="口供"><a href="#口供" class="headerlink" title="口供"></a>口供</h2><p>我每天下班都很晚因为有很多工作和应酬，18号晚上大概21:00左右下班回到家，到家的时候她就已经不在家了，她平时就喜欢去夜店之类的地方夜不归宿，21:10左右我打电话给她但是无人接听，我想可能是酒吧的声音太大她没听见，所以我就开车出去找她，但是我的车没油了，我就拿了我妻子的备用车钥匙开她车出去找她，但是我到了酒吧后到处都没找到她，我想她可能在她朋友家玩，我又打了几个电话给她但一直没人接听，我就先回家了。第二天我看她一直没回来，我就打了电话给她几个朋友都说没看见她，我感觉事情不对劲就赶紧报警了。没想到居然发生了这种事情。</p><h2 id="聊天记录"><a href="#聊天记录" class="headerlink" title="聊天记录"></a>聊天记录</h2><p><strong>刘秋荣</strong>：别以为我不知道你在外面乱搞的事情。<br><strong>江雨遥</strong>：证据呢?<br><strong>刘秋荣</strong>：这还需要证据?我们离婚吧。<br><strong>江雨遥</strong>：没有证据还想离婚?离婚也可以，但是我要你公司全部资产的百分之五十，否则我就把你公司那些事情发给有关部门，你自己考虑清楚!</p><h2 id="银行流水"><a href="#银行流水" class="headerlink" title="银行流水"></a>银行流水</h2><p>显示刘秋荣从2019年2月开始经常与国外数个毫不相干的账号有交易往来。同时每个月定期向江雨遥账户汇款10万元。</p><h2 id="公司现状"><a href="#公司现状" class="headerlink" title="公司现状"></a>公司现状</h2><p>刘秋荣2019年1月份出现严重的财政状况，一度面临破产，但2月份突然收到了数笔来自国外私人账户的投资，公司才得以正常运转。</p><h2 id="刘秋荣房间"><a href="#刘秋荣房间" class="headerlink" title="刘秋荣房间"></a>刘秋荣房间</h2><p>刘秋荣房间的置物箱中发现一个黑色半透明塑料袋，其中有一双橡胶手套，一瓶乙醚和一卷纱布。除此以外还有一台水下呼吸器。</p><h2 id="网购记录"><a href="#网购记录" class="headerlink" title="网购记录"></a>网购记录</h2><p>刘秋荣于5月16号在网上购买了一台水下呼吸器，快递显示5月19号签收。</p><h2 id="5-18通话记录"><a href="#5-18通话记录" class="headerlink" title="5.18通话记录"></a>5.18通话记录</h2><p>21:11拨通江雨遥未接通<br>21:39拨通江雨遥未接通<br>21:40拨通江雨遥未接通<br>21:41拨通江雨遥未接通</p><h2 id="车辆监控"><a href="#车辆监控" class="headerlink" title="车辆监控"></a>车辆监控</h2><p>公司车库监控拍到刘荣18日晚20:45开车离开公司，21:30分的时候某酒吧监控拍到死者的车辆出现在门口，不久后驶离。</p><h1 id="张烨（同学）"><a href="#张烨（同学）" class="headerlink" title="张烨（同学）"></a>张烨（同学）</h1><h2 id="嫌疑人信息-1"><a href="#嫌疑人信息-1" class="headerlink" title="嫌疑人信息"></a>嫌疑人信息</h2><p>张烨，男，死者大学同学，25岁，景德镇地方媒体的记者。</p><h2 id="口供-1"><a href="#口供-1" class="headerlink" title="口供"></a>口供</h2><p>18号那天我和我同事万阿丹在公司里便约好下班在我家喝酒，我们到家大概19:30左右，大概在20:00左右的时候家里的酒喝完了，我就出门到楼下便利店去买了几瓶啤酒和一些下酒菜。买回来后我们两个就一直喝到凌晨吧，后来我看天色也不早了，就送他下楼帮他叫了个车送他回去了。</p><h2 id="万阿丹证词"><a href="#万阿丹证词" class="headerlink" title="万阿丹证词"></a>万阿丹证词</h2><p>时间隔的有点久，不过应该是18号吧，因为那天我们一起喝的酒，20:00左右的时候因为酒喝完了他就是去便利店买的那些东西，零食是我特意要求的，所以应该是18号没错。他买完东西没有半小时就回来了我们一直喝到大概凌晨1:00左右然后我看也不早了就离开了，他还帮我叫了一个网约车送我回去。</p><h2 id="旧报纸"><a href="#旧报纸" class="headerlink" title="旧报纸"></a>旧报纸</h2><p>两张5年前的报纸，第一张标题为女大学生被校外社会人士包养。照片中该名女大学生与那名社会人士举止亲密进了同一辆豪车。</p><p>第二张报纸标题为女大学生不堪社会舆论，遭受校园暴力，跳楼自杀。</p><h2 id="手机相册"><a href="#手机相册" class="headerlink" title="手机相册"></a>手机相册</h2><p>许多张烨与他的大学女友符晶的合照。和许多5年前学校论坛中针对符晶的言论，其中不乏有制作出的符晶的表情包和人脸合成的不雅视频。</p><h2 id="聊天记录-1"><a href="#聊天记录-1" class="headerlink" title="聊天记录"></a>聊天记录</h2><p><strong>张烨</strong>：前辈，几年前那个女大学生被包养的稿子是你写的，能否告诉我真实情况，我一直很好奇。<br><strong>田兰</strong>：噢，那篇啊。<br><strong>张烨</strong>：这种料很难找到的吧。<br><strong>田兰</strong>：这还要多亏她和闺蜜感情不和，一个叫江什么的找到我的时候，我也是很诧异，那人还主动花钱找人在学校论坛和网络上黑她，被爆料的那个女孩也想澄清过，但是一个人的嘴哪里抵得了这么多人的非议!<br><strong>张烨</strong>：那你为什么不去帮她澄清，那个女生后来不是因为这件事自杀了吗!<br><strong>田兰</strong>：虽然我也有点内心的道德谴责，但是这毕竟是我的工作，我们小记者就是这样，没有突出的报道怎么出人头地，你才刚入行没多久，以后就会理解的。</p><h2 id="便利店监控"><a href="#便利店监控" class="headerlink" title="便利店监控"></a>便利店监控</h2><p>张烨于5月18日晚20:01进入便利店20:09离开。</p><h2 id="网约车下单"><a href="#网约车下单" class="headerlink" title="网约车下单"></a>网约车下单</h2><p>张炸于5月19日凌晨1:09下单了一辆舒适型网约车，目的地是万阿丹家小区。</p><h2 id="小票"><a href="#小票" class="headerlink" title="小票"></a>小票</h2><p>张烨提供了一张连锁便利店的发票和微信扫码支付的记录，于5月18号晚20:09在便利店购买了6瓶啤酒和一些零食小吃。</p><h1 id="池艺（邻居）"><a href="#池艺（邻居）" class="headerlink" title="池艺（邻居）"></a>池艺（邻居）</h1><h2 id="嫌疑人信息-2"><a href="#嫌疑人信息-2" class="headerlink" title="嫌疑人信息"></a>嫌疑人信息</h2><p>池艺，女30岁，单身，死者的邻居，在居民楼内经营一家猫咖，整日与动物为伴。</p><h2 id="口供-2"><a href="#口供-2" class="headerlink" title="口供"></a>口供</h2><p>案发那天我应该是在家里吧，都过去好久我也记得不是很清楚，我在那个小区经营猫咖，但住在外面，那是我租的房子，因为里面都是猫咪人不能居住。我平时20:00左右就会关门，因为猫咪们陪客人玩了一天都很累了，但是因为前不久发生了下毒事件，有部分猫咪很不幸离世了，外加工商局要我在31号前将猫舍搬离这里，所以我最近一直在整理东西，18号那天我应该是20:30左右离开的小区。我好像记得我准备离开的时候，听见了隔壁传来了开关门的声音，随后就是重物倒地的声音，但是我没在意就直接离开了。</p><h2 id="中毒事故"><a href="#中毒事故" class="headerlink" title="中毒事故"></a>中毒事故</h2><p>5月15池艺家的猫集体出现农药中毒呕吐迹象，虽即使送医，但仍有数条猫咪死亡，目前中毒原因仍在调查。</p><h2 id="整改通知"><a href="#整改通知" class="headerlink" title="整改通知"></a>整改通知</h2><p>一份来自工商局的整改告知书:“池艺女士请于5月31日前整改完毕，否则将依法取缔”。</p><h2 id="物业证词"><a href="#物业证词" class="headerlink" title="物业证词"></a>物业证词</h2><p>江雨遥曾多次投诉池艺家的猫扰民，因为她们又都住在一楼，有些猫经常跑出来还会招来一些野猫。二人就池艺在居民楼内开设猫咖的问题经常吵架，期间发生过多次冲突，都被拦了下来。我们也警告过池艺在小区居民楼内禁止开设猫咖这种店铺。前不久江雨遥还带来了地方媒体进行报道于是当地有关部门也重视起这件事，并且要求5月31号之前整改，否则将依法取缔，这才平息下来。</p><h2 id="汽车后座"><a href="#汽车后座" class="headerlink" title="汽车后座"></a>汽车后座</h2><p>发现了鲁米诺反应，目前还在调查。</p><h2 id="手臂"><a href="#手臂" class="headerlink" title="手臂"></a>手臂</h2><p>有几条较短的细长抓痕。</p><h2 id="丢失的猫"><a href="#丢失的猫" class="headerlink" title="丢失的猫"></a>丢失的猫</h2><p>15号那天我发现猫被人下了毒，赶紧带上猫咪们去医院，可我回来清点的时候，却发现少了一只母猫。</p><h2 id="咖啡厅"><a href="#咖啡厅" class="headerlink" title="咖啡厅"></a>咖啡厅</h2><p>据嫌疑人称其18号那天离开猫咖后原本打算回家，因为搬离的事情心情不太好，就去了一家咖啡厅待了1个多小时，大约晚上22:00才离开，警方询问过店员，与嫌疑人描述相同。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>死者的死亡地点是?<br> A.家中<br> B.省道旁<br> C.车内  </li></ol><ol start="2"><li>谁制造了不在场证明杀害了死者?<br> A.刘秋荣<br> B.张烨<br> C.池艺  </li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学生失踪案-答案</title>
      <link href="2021/05/crimaster-reasoning-disappearance-of-college-student-ans/"/>
      <url>2021/05/crimaster-reasoning-disappearance-of-college-student-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>脚尖指向的具体方向是(本题略加照片显示的视觉偏差，运用知识限于中学阶段，脚尖的方向即当时太 阳所在的方向)?<br><font color="#56c596">A.东北</font><br> B.正东<br> C.东南</li></ol><ol start="2"><li>能否确定足迹的主人朝着房屋方向移动?(无故意伪造情况)<br> A.可以确定<br><font color="#56c596">B.无法确定</font></li></ol><ol start="3"><li>会面地点在哪？<br> A.辽宁大学蒲河校区食堂<br> B.辽宁大学崇山校区食堂<br><font color="#56c596">C.沈阳师范大学南区食堂</font><br> D.沈阳师范大学北区食堂</li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>前言：</p><p>今天的日子比较特殊，虽不是中国传统节日，但也算是个热门的日子，并且，也是 CRIMASTER正式上架一周年。</p><p>作为这款APP的负责人之一，通过这种方式和大家进行初次沟通，万望海涵。</p><p>首先，真挚的祝福大家，祝你们人生中的的每一天都不负时光，充实快乐。</p><p>CRIMASTER来源于《唐人街探案3》，作为一款影视社区现实化的应用，上线后不久便收获了干万级的注册用户，凭借着免费的体验和玩家自发织和功能上都做了较大的改动，可大家不离不弃，我们感恩，也感动。</p><p>CRIMASTERE的题目一直在做创新和改变，涉及的范围更广，触达的知识点也更多，一方面是为了让玩家了解更多的内容，另一方面，则是为了不断的去给大家出“难题”，正如APP消息推送说的那样，天文地理、五行八卦、推理解谜、风水算命，统统难不住你们，真的，发自内心的佩服。我们一直在成长，相信大家也是，有时候想一想，能陪伴诸位这么久，足矣。</p><p>我进入社区查看大家的讨论，发现了一个不好的现象，当看完很多玩家的推理解析后，才了解到一部人是在故意混淆视听，而一些不愿意去看题，不愿意去思考的玩家看到后却信以为真。不知何时，我们的社区竟变成了这番模样，同样怀揣着对侦探的梦想来到这里，却因经验或知识储备不同等，如今却成为了两种人。</p><p>如果你真的热爱推理，不要懒惰，动脑思考，查阅资料，在体验过程的同时，丰富自己的阅历和见识。如果你真的热爱推理，不要欺骗，恪守信仰，坚持初心，尽力去帮助那些疑惑的人，分享思路，携手共同进步。如果你真的热爱推理，由衷的期望您加入我们，努力让这个“又爱又恨”的圈子变的更加完善更加壮大，让更多的人知道中国，也有这么一群可爱正义、能力超群的侦探。</p><p>第一题：</p><p>太阳视运动:指的是在我们的眼中，太阳的运动规律，所以是以我们自身为坐标原点，使太阳相对运动，观察其运动趋势。在二分日(春分秋分)，太阳正东升正西落。夏半年(春分至秋分)太阳东北升，西北落;冬半年(秋分日至次年春分日)太阳东南升，西南落。在北半球观察太阳是自东向西顺时针运动，南半球太阳自东向西逆时针运动(与地球自转方向相反)。所以夏半年北半球昼长夜短，冬半年南半球昼长夜短。</p><p>北半球在太阳直射赤道(春秋分日)时太阳升起为时间为地方时6:00，方位为正东方向。</p><img src="/assets/images/crimaster/2021/05/20210521-ans-1.png" alt="图片" class="post-image half"><p>沈阳所处为北半球，在所处时间介于春分以及夏至之间(5月21日)大致可判断出太阳此时方位并未到达正东，而还处于东北。</p><img src="/assets/images/crimaster/2021/05/20210521-ans-2.png" alt="图片" class="post-image half"><p>但题中所给6:00为东八区中央经线经120°的时间(北京时间)，沈阳大致为东经123°，则沈阳地方时大致为6:12。我们通过精确计算来最终确定其方位。(可通过查询或自行公式计算得出)</p><p>东八区时上午6:00，沈阳大东区滂江街的太阳方位大致为77.37°(北方位角)以目标物正北方向为0°，顺时针逐渐变大，如正东为90°，77.37°介于北与东之间，故第一题选东北。</p><img src="/assets/images/crimaster/2021/05/20210521-ans-3.png" alt="图片" class="post-image half"><p>第二题：</p><p>本题无积分奖励，这里和大家道歉，因审核人员和作者存在一定争议，又查阅了很多材料，证实这道题有BUG，很难确定是否能伪造出此种脚印，线索也不全，客服人员在群内又会错意发送了“奇怪”的通知，所以不便于加分，请理解。</p><img src="/assets/images/crimaster/2021/05/20210521-ans-4.png" alt="图片" class="post-image half"><p>由于每个人的行走姿势和身体状况不同，所以遗留的足迹会各不相同，有磕痕、踏痕、推痕、跄痕、提痕、坐痕、迫痕、压痕、拧痕、抬痕、蹬痕、挖痕、抠痕、甩痕、挑痕、踢痕、划痕、扫痕和擦痕等。</p><img src="/assets/images/crimaster/2021/05/20210521-ans-5.png" alt="图片" class="post-image half"><p>第三题：</p><p>象牙塔指的是大学，桃李满天下用于形容教师，但选项中都是大学，同有老师教书育人，所以这句话并不能直接判断出是选项中的哪一所大学我们用后面一句坐北朝西来解题。</p><p>沈阳师范大学坐落在沈北新区，大门朝向西边。而选项中辽宁大学的两个校区一个正门朝南个正门朝东，都不符合。所以答案锁定在沈阳师范大学中。</p><img src="/assets/images/crimaster/2021/05/20210521-ans-6.png" alt="图片" class="post-image half"><p>后两句“民以食为天”，所以民之天指的是吃饭的地方，“火之位”，方位中能代表火的是南方，所以指的是沈阳师范大学南区食堂。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学生失踪案</title>
      <link href="2021/05/crimaster-reasoning-disappearance-of-college-student/"/>
      <url>2021/05/crimaster-reasoning-disappearance-of-college-student/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>5月21日，CRIMASTER平台接到一桩委托，委托人是一名在沈阳的在校大学生。</p><p>其于昨夜23:00左右收到装有奇怪字条和一张照片的信封，向其发送字条和照片的人声称绑架了该名大学生的一个女同学，如果不能在24小时内来到指定位置，他将会永远见不到那个女孩。</p><p>委托人在受到恐吓后多次回拨电话，可始终联系不上。无奈之下他定将这件事情委托给CRIMASTER犯罪大师的侦探们!</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>信封上面只有送信人和委托人的指纹，字条上面未采集到有效指纹字条内容为电脑打印。委托人询问过送信人，但追溯下去并没有找到相关线索，字条的作者可能拥有定的反侦察能力。</p><h1 id="纸条线索"><a href="#纸条线索" class="headerlink" title="纸条线索"></a>纸条线索</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><p>“照片上这个女人你一定很熟悉吧，她现在在我手上，如果你想要让她安然无恙，就在24小时之内，一个人来到我指定的位置。不然，你永远别想见到她了“。字条结尾有几滴红色液体溅落的痕迹。</p><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><p>“象牙塔上挂桃李，生来坐北面朝西，火之位，民之天!地点告诉你了，抓紧时间，就在你所在的城市，记住，一个人来，否则…后果自负。</p><h2 id="照片线索"><a href="#照片线索" class="headerlink" title="照片线索"></a>照片线索</h2><p>信封中的照片为一个女孩被捆绑在椅子上的背影照，形似委托人的同学。</p><h2 id="足迹照片"><a href="#足迹照片" class="headerlink" title="足迹照片"></a>足迹照片</h2><p>委托人还附上了一张照片，据说是在其朋友所租房屋附近发现的，照片拍摄于5月21日06:00，照片上是一串足迹，其脚尖正好指向太阳所在方向，脚印前浅后深，在脚印前部分未发现抠痕、挖痕，在足迹后边沿出现月牙形痕迹，脚尖方向朝向现场方向，失踪者房屋所在地为大东区滂江街。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>脚尖指向的具体方向是(本题略加照片显示的视觉偏差，运用知识限于中学阶段，脚尖的方向即当时太 阳所在的方向)?<br> A.东北<br> B.正东<br> C.东南</li></ol><ol start="2"><li>能否确定足迹的主人朝着房屋方向移动?(无故意伪造情况)<br> A.可以确定<br> B.无法确定</li></ol><ol start="3"><li>会面地点在哪？<br> A.辽宁大学蒲河校区食堂<br> B.辽宁大学崇山校区食堂<br> C.沈阳师范大学南区食堂<br> D.沈阳师范大学北区食堂</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枪弹痕迹科普篇-答案</title>
      <link href="2021/05/crimaster-reasoning-bullet-marks-ans/"/>
      <url>2021/05/crimaster-reasoning-bullet-marks-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>哪个伤口为射入口？<br><font color="#56c596">A.创口A</font><br>B.创口B</li></ol><ol start="2"><li>该案件中枪的射击距离更可能为?<br>A.接触射击<br><font color="#56c596">B.近距离射击</font><br>C.远距离射击</li></ol><ol start="3"><li>该案件所用枪支可能为?<br>A.54式手枪<br><font color="#56c596">B.64式手枪</font><br>C.伯塔92F<br>D.M1911手枪</li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>射入口指弹头穿入人体皮肤组织所形成的创口.基本形态呈圆形或椭圆形，与弹头直径相似或略小。最能反映枪弹射入口特征的是创口中心部位的皮肤、创口边缘及周边组织。按射击距离分为接触射入口、近似接触射入口、近距离射入口中距离射入口及远距离射入口。</p><p>射入口常有组织缺损，而使射入口处的皮肤不能完全合拢。射入口内缘皮肤上有弹头穿过时与皮肤摩擦碰撞形成的一圈擦伤和挫伤，习惯上称为冲撞轮或挫伤轮。</p><p>射出口是指进入体内的弹头穿破皮肤飞出体外形成的损伤。创口周围无烟晕和火药颗粒，无挫伤轮及擦试轮。</p><p>所以第一题选A</p><p>本题第二问为该篇章赛点题目，相对其他两题较有难度。其他两题通过查询资料即可找到相应答案，而本题设置了一个赛点混淆之处，首先根据伤口形态可直接排除远距离射击，远距离射击射入口难以发现烧伤、烟晕以及火药斑纹。再根据所描述创口周围未见烧灼、熏黑等形态，确定伤口更符合近距离射击。64式手枪是否能够贯穿人体成了一个不确定因素，我们回顾题目，题目中并未对尸体的年岭、性别、是否成年、健硕还是身体单薄有过描述，我们结合提问中的“更有可能”得出答案为B。<font style="color:#D9730D">(PS:64式手枪威力虽不大，但有实际研究证明在30cm以内64式手枪具有贯穿能力，图示来源贵州市公安干部学院以及浙江省仙居县人民检察院所作实验研究)</font></p><font style="color:#D9730D"><img src="/assets/images/crimaster/2021/05/20210519-ans-1.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/05/20210519-ans-2.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/05/20210519-ans-3.png" alt="图片" class="post-image half"><p>接触射击指枪口紧贴皮肤进行射击。形态为皮下及射创管起端的周围组织被熏黑、干焦，并有大量颗粒附着。创口周围组织可能被烧焦，而创口周围的皮肤上烟晕和火药颗粒沉着可能很轻，甚至缺失。当接触射击部位的皮肤下面即为密质骨时，可形成皮肤创口边缘不整、面积较大的星芒状或十字形缺损，呈“爆炸性”接触射入口，一般见于头部，常在前额、乳突、眉心或颞部等部位。接触射击发生在体腔(如腹腔)表面或软组织很丰富的部位时，高压气体有足够的空间膨胀，因而不会造成皮肤的较大的缺损和边缘不齐。创口周围的皮肤或衣着上可见到圆形或半月形印痕称枪口印痕。</p><p>第二题选B</p><p>注:例如北约7.62x51(7.62代表子弹的口径，51代表弹壳的长度，单位是毫米)</p><p>64式7.62mm手枪弹该弹也称7.62x17mm手枪弹，是建国后我国自行研制的第一种枪弹，于1964年设计定型，1980年完成生产定型。配用64式、77式手枪和67式7.62mm微声手枪时，用以杀伤50m内有生目标，主要供部队指挥员和公安人员自卫用。</p><p>中文名:64式手枪弹</p><p>该弹全弹质量7.2～7.7g，弹头直径7.80～7.85mm，全弹长24.4～25mm，弹头长12.5mm，初速290～310m/s，最大膛压平均值123MPa。25m处射击密集度R50不大于3cm，R100不大于7cm。</p><p>该弹弹头采用圆头、铅心、黄铜被甲结构，被甲较厚，底部为一半径5.3mm的半球面状凹底。采用无凸缘式底缘弹壳，弹壳底缘直径是8.44毫米，弹壳为筒形，无突缘，采用伯尔丹式无锈蚀底火。</p><p>此弹现为警用手枪六四式手枪专用弹。</p><img src="/assets/images/crimaster/2021/05/20210519-ans-4.png" alt="图片" class="post-image half"><p>线索中的尺寸符合该枪支，所以第三题选择B</p><p>其余介绍：</p><p>54式手枪采用7.62x25mm手枪弹，全弹质量9.9～10.7g，全弹长34.4～34.9mm，初速420～450m/s，最大膛压平均值210MPa。25m处射击密集度R50不大于5.0cm，R100不大于15cm。该弹弹壳原为黄铜材料，1964年改为覆铜钢。弹壳为瓶形，无突缘，采用伯尔丹式无锈蚀底火。弹头中的铅心换为钢心即DAP51B式7.62mm手枪弹。</p><img src="/assets/images/crimaster/2021/05/20210519-ans-5.png" alt="图片" class="post-image half"><p>伯莱塔92F采用9x19mm手枪弹即帕拉贝鲁姆9mm手枪弹，全弹质量12.05g，全弹长29.70mm，初速396m/s，平均最大膛压201MPa，散布精度(50m距离)平均散布半径7.6cm</p><p>弹头类别:普通弹，弹头结构:卵形平底、铅心、全被甲，弹头被甲材料：黄铜或覆铜钢。弹型式无凸缘、直筒形，弹壳材料:黄铜、覆铜钢、钢壳或铝壳。底火类型：伯丹式或博克塞式。</p><img src="/assets/images/crimaster/2021/05/20210519-ans-6.png" alt="图片" class="post-image half"><p>M1911手枪采用0.45in柯尔特自动手枪弹，口径0.45in(11.43mm)，全弹质量21.2g，全弹长 32.19mm，弹头直径11.48mm，弹头长17.46mm， 弹头质量15.16g，弹壳型式无凸缘、筒形，弹壳长22.79mm，初速250m/s，平均最大压131MPa，散布精度(距离射弹全散布面矩形对角线平均45.7m)值不大于19cm。</p><p>弹头类别:普通弹，弹头结构:圆头、平底、铅心、全被甲，弹壳材料:黄铜或钢，底火类型：博克塞式或伯丹式。</p><img src="/assets/images/crimaster/2021/05/20210519-ans-7.png" alt="图片" class="post-image half"></font>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枪弹痕迹科普篇</title>
      <link href="2021/05/crimaster-reasoning-bullet-marks/"/>
      <url>2021/05/crimaster-reasoning-bullet-marks/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>2021年5月19日早上05:00在云南边境处发生一场恶劣枪击案件。近日云南边境处有军火以及毒品交易，警方正调查之中，但犯罪团伙极其狡诈，警方一直未有进展。</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>死者手中紧握一相机胶卷，对胶卷进行调查，该死者之前在广州，5月16日到云南旅行，相机内有大量犯罪团伙的犯罪照片，为警方提供了大量调查线索，但因其独自潜伏调查招致犯罪团伙袭击身亡。现场未检查到其余物品。</p><h1 id="伤口鉴定"><a href="#伤口鉴定" class="headerlink" title="伤口鉴定"></a>伤口鉴定</h1><h2 id="正面伤口"><a href="#正面伤口" class="headerlink" title="正面伤口"></a>正面伤口</h2><p>正面心脏处见一圆形创口(创口A)，创口中心皮肤缺失，直径0.7cm。周围有0.4cm挫伤轮。周围有烟晕以及火药斑纹。</p><h2 id="背面伤口"><a href="#背面伤口" class="headerlink" title="背面伤口"></a>背面伤口</h2><p>背面心脏处见一不规则创口(创口B)，创缘干燥，大小为1.1cm*0.9cm。</p><h1 id="子弹分析"><a href="#子弹分析" class="headerlink" title="子弹分析"></a>子弹分析</h1><h2 id="弹头详情"><a href="#弹头详情" class="headerlink" title="弹头详情"></a>弹头详情</h2><p>弹头直径7.84mm，弹头长12.5mm，弹头质量4.8g，圆头，黄铜被甲结构，铅心。</p><h2 id="弹壳详情"><a href="#弹壳详情" class="headerlink" title="弹壳详情"></a>弹壳详情</h2><p>弹壳长17mm，壳重2.5g，无凸缘式底缘弹壳，底缘直径8.44mm。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>哪个伤口为射入口？<br>A.创口A<br>B.创口B</li></ol><ol start="2"><li>该案件中枪的射击距离更可能为?<br> A.接触射击<br> B.近距离射击<br> C.远距离射击</li></ol><ol start="3"><li>该案件所用枪支可能为?<br> A.54式手枪<br> B.64式手枪<br> C.伯塔92F<br> D.M1911手枪</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暴风雨之夜-答案</title>
      <link href="2021/05/crimaster-reasoning-stormy-night-ans/"/>
      <url>2021/05/crimaster-reasoning-stormy-night-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>死者左肩皮肤挫伤是什么伤?<br><font color="#56c596">A.生前伤</font><br> B.死后伤<br> C.无法判断</li></ol><ol start="2"><li>嫌疑人当中有几个人在口供中撒谎?<br> A.无人撒谎<br> B.1人<br> C.2人<br><font color="#56c596">D.3人</font>  </li></ol><ol start="3"><li>本案的凶手为?<br> A.方权<br><font color="#56c596">B.罗通</font><br> C.冯伟</li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>警方发现嫌疑人三人中罗通的穿着有些奇怪，修长宽松的长裤以及中筒靴子，深圳市的当日温度高达三十多度，其被审讯时一直在出汗，加之其家中的碘酒气味使警方对罗通产生了怀疑，在仔细调查后发现罗通脚踝处有抓伤，且死者左手指缝间的人体组织经检测为罗通，通过对罗通的审讯，最终罗通承认了自己的杀人事实。</p><p>推理过程： </p><p>首先看尸检报告</p><img src="/assets/images/crimaster/2021/05/20210516-ans-1.png" alt="图片" class="post-image half"><p>生活反应是判断生前伤和死后伤的重要标准，在此案中，上述黄色字体损伤皆可见明显出血，所以为生前伤，而绿色字体损伤未见液体渗出，无生活反应，所以为死后伤。</p><p>通过这个我们得知死者死后再一次遭受损害。</p><p>之后看现场情况</p><p>从现场公交车站损坏来看，可以发现公交车站主要损坏地方是公交车座椅(序号3)与公交站牌(序号1)，这里同样印证了上述死者受到多次损害的事实。</p><p>再来看监控1和2</p><p>通过两个监控信息以及嫌疑人汽车信息，我们可以判断出以下信息：</p><p>黑色车辆A，方权，中间时间10分钟<br>红色车辆B，罗通，中间时间10分钟<br>白色面包车C，冯伟，中间时间15分钟</p><p>而两监控相聚仅500米，在通畅的路面行驶根本用不上10分钟。所以三人的行驶时间都很可疑。</p><p>接下来，我们需要判断案发现场以及椅子与站牌损坏分别是由谁造成的</p><p>死者尸体是在花坛处发现，从尸检报告以及公交车站遗留血迹的情况，还有尸体上撞击痕迹，可以猜测第一案发现场为公交车站，事后有人进行挪动尸体，将尸体隐藏至花坛内。</p><p>从路面痕迹(序号5)以及汽车方权轮胎磨损来判断，而椅子(序号3)的剧烈变形以及椅子下的黑色汽车残符合方权汽车颜色和保险杠损伤，而前窗玻璃两处破损情况与死者损伤符合随着汽车前进的动能和人体后移惯性力的作用，人体向前窗玻璃方向滑动，并于前窗玻璃发生碰撞相吻合，汽车与小黄车发生碰撞，出现刮蹭痕迹，所以可以判断座椅损坏是方权造成，而公交站牌的玻璃破碎与冯伟面包车雨刷底端玻璃碎渣吻台，所以可以看出站牌损害是由冯伟开碎造成，再加上靠近站牌的椅子(序号2)左侧刮痕与冯伟汽车左侧门把手下方刮蹭吻合，我们可以猜测当时情况为冯伟因为某些原因导致面包车撞向公交车站，与椅子(序号2)发生刮蹭，最终撞向站牌。</p><p>同样冯伟车轮的人体组织与死者相吻合，符合碾压痕迹，而当时死者已经身亡，撞击造成的伤口皆为死后伤，冯伟去时死者已经遇害身亡，所以排除冯伟嫌疑。</p><p>从尸检上的后脑勺创伤以及伤口处碎渣，花坛边缘石块的鲁米诺反应可以看出死者被撞后有人用石块敲打其后脑勺，导致最后的死亡，这里将嫌疑人锁定在方权与罗通之间。</p><p>进一步锁定凶手</p><p>从死者左手手指弯曲僵直以及手指缝的人体组织，可以判断死者生前与凶手有过接触，方权身短袖短裤，如果身上有伤口应较容易观察到罗通在夏季身着长裤长靴，掩盖的寓意较为明显，加上家中的碘酒味道可判断死者生前对凶手造成的抓伤就在罗通身上，而经过尸检可知死者致命伤为后脑勺处创伤，且遭受伤害后立即死亡，所以方权的第一撞并没有让死者立即死亡而随后赶到的罗通才是真正的凶手。</p><p>当梳理出整个故事线后再来看第二题</p><p>嫌疑人的慌言，这里需要明确一点死者老公作为协助调查人员，并不属于嫌疑人，本案嫌疑人有三位，并且全部都有说谎。</p><p>人物行为逻辑</p><p>林倩</p><p>最近因为和老公吵架，再加上公司出了问题，心情一直不好，当天也没什么心情聚餐，所以早早离开，为躲雨在公交车站等待并接电话，因为没打到车，所以当方权驾驶小车过来时，林情尝试招停方权。</p><p>罗通</p><p>南星集团出现问题，另一家公司找上罗通说只要他能够拿着南星技术部的核心资料，就可以高工资录用他，而公司技术部资料一直由部门经理林倩个人保管，开始罗通想和林倩一起跳槽，但惨遭林倩拒绝，可他并没有放弃，还专门调查了资料储存位置，当天聚会知晓林倩离开后，立即给林倩打电话询问其地址，想试图说服林倩，也想趁机拿U盘，当他到达成华大道时，此时林倩已经被前面的方权撞至重伤，罗通前去拿u盘并没有料到林倩没有死，在被林倩抓住脚踝后，担心林倩被人救下说出U盘之事，于是心生杀意，并想借此嫁祸给车祸肇事主，眼瞧四下无人，在花坛里寻觅了一块石砖对林倩的后脑进行重击，导致了林倩最终的死亡，拿到U盘后，为了将其伪造成车祸现场，所以并没有对尸体进行掩盖，随手将石块丢到一旁的花坛处，第二天立马换上了宽松略长的长裤以及中筒靴子，都是为了掩盖伤痕，而在警方询问时，也为了不让警察怀疑自己，转移警方的注意力，所以主动承认了自己想要U盘的事实，将罪行嫁祸给方权，车上水渍皆表明当晚罗通下过车，鞋上沾水，车内雨伞表明当晚罗通打伞了，紧张是因为拿了死者U盘，并且是杀死死者的真凶，因脚踝被抓伤，罗通在家中使用了碘酒对伤进行处理，而这些细微的线索最终让警方察觉出端倪锁定了案件的真凶。</p><p>方权</p><p>年号科技公司程序员，前几天因父亲病逝近，回家处理后事，当天早上老板找他聊天，字里行间都是叫其赶紧来上班，不敢怠慢的方权，当即收抬好后事，又连夜赶回，连续六个小时的疲劳驾驶，使他在驾驶途中神智较不清醒，撞向死者发生了意外，下车后的方权看到倒在地下的死者误以为自己撞死了她，慌忙之下离开，而当警察找到自己的时候，因为以为自己是凶手所以极力想隐藏自己，甚至用撞树这种漏洞百出的谎话，因汽车损坏严重，方权只好先将汽车开至修车厂进行维修</p><p>冯伟</p><p>因为母亲病重疯狂接单，当天本是休息，约了兄弟们喝酒，随后接单，因为酒驾撞到公交车站牌，造成车前陷，下车后发现一旁的尸体，以为是自己撞死的，当警察找到自己时，因为以为自己是凶手，所以想隐瞒自己是凶手的事实，否认自己喝酒的事实，他的朋友怕警察知道冯伟当晚酒驾，所以说了谎，而以为自己撞死人的冯伟收行李准备安顿好还在医院的母亲便逃跑，被警方查到。</p><p>案件还原</p><p>死者林倩结束聚会后，骑着单车来到成华大道，00:20的时候听到手机铃声，老公打来的，此时暴雨开始下大，林倩想想还是停车接电话，顺便在一旁公交车站牌处躲雨，接了电话告诉自己老公自己在回去的路上，而另一边的罗通因为想要弄到林倩手中的核心资料，也没心思聚会，打电话给林倩问起目前地点，还以送她回家为由，让她在原地等待，但林倩本并不想麻烦罗通，打算自己骑车离去，可雨越下越大，林倩只好继续等待，并使用打车软件试图打车，可并没有人接单，此时经过六个小时疲劳驾驶的方权开着自己的车来到成华大道，00:40经过监控1，林倩看到车试图拦下，但方权因为疲劳驾驶，加上暴雨的故，酿成了一场悲剧，当他清醒过来的时候，方权下车望着倒在地下的林倩，慌了神，方权以为自己撞死了死者，当即慌张的开车逃逸，随后赶到的罗通来到成华大道，发现倒在血泊当中的林倩，上前准备拿U盘，但此时的林倩并没有死，求生欲望让她紧紧抓佳罗通的脚踝，罗通怕死者被救下，将自己盗取U盘的事情揭发，在花坛里寻觅了一块石砖对林倩的后脑进行重击，并嫁祸给车祸，最终导致林倩的死亡，罗通随手将石块丢到花坛边上，翻找出了挎包中的U盘，开车离开，最后深夜接单的冯伟赶到，因为刚喝完酒的原因，加上暴雨导致视线模糊，面包车撞向公交车站，导致站牌玻璃破碎，瞬间清醒的冯伟下车查看面包车，发现一旁的尸体，误以为是自己撞死的，情急之下将尸体拖至附近花坛，随后离开。</p><p>道路干万条，安全第一条，行车不规范，亲人两行泪。希望各位广大司机能够遵守交通规则，不疲劳驾驶，不酒驾，喝酒不开车，开车不喝酒，连续驾驶四个小时需停车休息，休息时间不能少于20分钟</p><p>《道路交通安全法》</p><p>第二十二条机动车驾驶人应当遵守道路交通安全法律、法规的规定，按照操作规范安全驾驶、文明驾驶。</p><p>饮酒、服用国家管制的精神药品或者麻醉药品，或者患有妨碍安全驾驶机动车的疾病，或者过度疲劳影响安全驾驶的，不得驾驶机动车。</p><p>任何人不得强迫、指使、纵容驾驶人违反道路交通安全法律、法规和机动车安全驾驶要求驾驶机动车。</p><p>公安部123号令有明确的规定：对连续驾驶中型以上载客汽车、危险物品运输车辆超过4小时未停车休息或者停车息时间少于20分钟的驾驶人记12分；对连续驾驶中型以上载客汽车、危险物品运输车辆以外的机动车超过4小时未停车休息或者停车休息时间少于20分钟的驾驶人记6分。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暴风雨之夜</title>
      <link href="2021/05/crimaster-reasoning-stormy-night/"/>
      <url>2021/05/crimaster-reasoning-stormy-night/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>2021年5月16日上06:30，深圳市警方接到报案称在成华大道附近花坛发现一具尸体，警方很快赶到并封锁现场。由于昨晚下暴雨，现场痕迹被大雨冲刷，勘察陷入困境。由于案件性质恶劣，案情十分复杂，警方现決定将线索公布至CRIMASTER，希望各位侦探协助警方侦破案件……</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><img src="/assets/images/crimaster/2021/05/20210516-1.png" alt="图片" class="post-image half"><p>成华大道是一条东西走向的单行道(由东向西)。</p><ul><li><p>案发现场没有监控，只有靠东边200米处有一监控以及西边300米处有监控。</p></li><li><p>尸体发现于花坛内，同时紧贴花坛外侧发现一块断裂石砖，石砖上检测到鲁米诺反应，距离尸体50米处公交车站内有一个橘黄色的单车，单车后轮剧烈变形，单车倾斜倒地，尾部有刮蹭痕迹。</p></li><li><p>公交车站处有并排的两个不锈钢座椅分别为(序号3)和(序号2)，其边角呈尖锐状，表面光滑。靠东边的不锈钢座椅(序号3)出现变形，尖锐部分凹陷。靠西边的座椅(序号2)左侧表面出现长条状刮痕。地面检测到鲁米诺反应，死者周围无石块等钝物。</p></li><li><p>座椅下发现若干汽车黑色塑料残骸。</p></li><li><p>公交车站牌(序号1)，表面玻璃破碎，碎渣大部分散落在站牌内部。广告牌(序号4)，外观玻璃无破损。</p></li><li><p>路面(序号5)有杂乱的轮胎滑印痕迹，大致方向如箭头所示。</p></li><li><p>死者身旁发现一部手机，屏幕碎裂无法开机。</p></li></ul><h1 id="林倩（死者）"><a href="#林倩（死者）" class="headerlink" title="林倩（死者）"></a>林倩（死者）</h1><h2 id="死者信息"><a href="#死者信息" class="headerlink" title="死者信息"></a>死者信息</h2><p>林倩，女，38岁，165cm，经调查死者独自来到这个城市工作。已婚，目前是南星集团技术部经理。</p><h2 id="案发当天"><a href="#案发当天" class="headerlink" title="案发当天"></a>案发当天</h2><p>据同事回忆最近部门完成了一个项目，所以昨晚部门组织聚会，吃完饭差不多十二点结束，本来约着一起去唱歌，但林倩说家里有事所以就自己先离开。</p><h2 id="天气预报"><a href="#天气预报" class="headerlink" title="天气预报"></a>天气预报</h2><p>当天夜里十二点到四点将出现持续大暴雨，温度26度～34度。(据市民所说，暴雨是00:20开始下的)</p><h2 id="尸检报告"><a href="#尸检报告" class="headerlink" title="尸检报告"></a>尸检报告</h2><p>尸体左胸下有淤青，左肩皮肤挫伤，创腔内有血枷附着，额头皮肤红肿腹部皮肤青紫，后脑处创伤，创面粗糙，创口大，伤口处有少量石头碎屑，上述损伤部位皮肤切开均见皮下组织出血;左手手肘皮肤挫伤，擦伤表面见油污祥物附着，后背有大程度的磨损，上述损伤表面未见液体渗出，切开未见皮下组织出血。死者衣物湿漉，衣物多处破损，大量软组织挫伤，多根肋骨断裂，内脏大出血，左手手指弯曲，指缝中检测出不属于死者本人的皮肤组织。经过解剖检查发现死者遭受后脑创伤后立即死亡，初步判断死亡时间为昨晚凌晨0:30到1:30</p><h2 id="挎包"><a href="#挎包" class="headerlink" title="挎包"></a>挎包</h2><p>警方在案发现场附近找到一个挎包，经确认为死者的，经同事回忆挎包内应该有死者私人物品:钱包，化妆品以及工作上的资料，和一个含有公司核心资料的U盘等。但在其包中并未发现U盘，警方扩大搜索范围无所获。</p><h2 id="公司处境"><a href="#公司处境" class="headerlink" title="公司处境"></a>公司处境</h2><p>经调查，死者所处公司近期因资金无法周转等问题拖欠员工数月工资，已有多人离职。</p><h2 id="监控录像"><a href="#监控录像" class="headerlink" title="监控录像"></a>监控录像</h2><p>警方调取监控，确定凌晨到两点之间只有三辆车经过此地，通过警方排查车牌号，确定三位嫌疑人。</p><p>距离案发现场东方向200米处有(监控1)  </p><p>00:15死者骑着单车经过<br>00:40黑色轿车A经过<br>00:50红色轿车B经过<br>01:10白色面包车C经过</p><p>距离案发现场西方向300米有(监控2)</p><p>00:50黑色轿车A经过<br>01:00红色轿车B经过<br>01:25白色面包车C经过</p><h2 id="死者老公口供"><a href="#死者老公口供" class="headerlink" title="死者老公口供"></a>死者老公口供</h2><p>“我今天早上收到消息就紧忙赶回来了，我们最近因为一些事情总吵架，我就趁着去外地出差出去散散心，昨晚我回了酒店就给她打电话，但她一直拒接，直到凌晨00:20的时候才接，电话里说她出去和同事聚会，已经在回去的路上了，没想到会发生这种事。对了警官，前段时间她和我说好像被人跟踪了，不知道和她的死有没有关系。”</p><h1 id="罗通"><a href="#罗通" class="headerlink" title="罗通"></a>罗通</h1><h2 id="嫌疑人信息"><a href="#嫌疑人信息" class="headerlink" title="嫌疑人信息"></a>嫌疑人信息</h2><p>罗通，男，32岁，178cm，南星集团技术部成员。</p><h2 id="车辆"><a href="#车辆" class="headerlink" title="车辆"></a>车辆</h2><p>罗通车辆为新款红色轿车，汽车表面无撞击痕迹，座位下有少量水渍，车内发现一把有水渍的雨伞。</p><h2 id="审问"><a href="#审问" class="headerlink" title="审问"></a>审问</h2><p><strong>警察</strong>：凌晨00:30到01:30你在干什么<br><strong>罗通</strong>：昨晚我们部门聚会，吃完饭一起去唱歌，唱歌没多久我不舒服就开车提前离开了，那个时间应该在路上。<br><strong>警察</strong>：你和死者有什么矛盾?<br><strong>罗通</strong>：倩姐是我上司，我和她能有什么矛盾。<br><strong>警察</strong>：据调查有同事说你想跳槽?<br><strong>罗通</strong>：好吧我实话实说吧，对手公司开出了高价想让我带着核心资料跳槽。昨晚我因为惦记着资料，也没什么心情唱歌。之后给林倩打电话询问地点，当时她说她在成华大道，我就过去了。我经过成华大道的时候，发现林倩就躺在那里，然后…然后我就把U盘拿走离开了。人不是我杀的!我到的时候她已经死了，我就想着搞点钱。</p><h2 id="案发调查"><a href="#案发调查" class="headerlink" title="案发调查"></a>案发调查</h2><p>警方调查时，罗通正在家中，警方在其家中闻到碘酒味道。在被询问时，罗通一直在擦汗。</p><h2 id="穿着"><a href="#穿着" class="headerlink" title="穿着"></a>穿着</h2><p>白色衬衫配套黑色长裤，以及中筒棕色靴子。</p><h2 id="手机通话"><a href="#手机通话" class="headerlink" title="手机通话"></a>手机通话</h2><p>00:25呼叫林倩，通话三分钟。</p><h2 id="聊天记录"><a href="#聊天记录" class="headerlink" title="聊天记录"></a>聊天记录</h2><p>聊天记录1：</p><p>5月12日晚20:00</p><p><strong>罗通</strong>：经理，对方开的条件可不低，反正现在公司也快撑不下去了，要不…<br><strong>死者</strong>：老罗，你知道你在说什么嘛，我们在公司待了那么久，老板可待我们不薄，这种背弃公司的事我可干不出来!<br><strong>罗通</strong>：倩姐，我也不想呀，可我上有一大家子要养活，公司已经几个月没发工资了。<br><strong>死者</strong>：这都只是暂时的，只要我们把手头上的这个项目做完一切都会好起来的。</p><p>聊天记录2:</p><p>5月15日晚22:30</p><p><strong>李老板</strong>：怎么样了?<br><strong>罗通</strong>：放心，我已经调查清楚核心资料的位置了，我肯定会带着核心资料来贵公司的，等我好消息吧。</p><h1 id="方权"><a href="#方权" class="headerlink" title="方权"></a>方权</h1><h2 id="嫌疑人信息-1"><a href="#嫌疑人信息-1" class="headerlink" title="嫌疑人信息"></a>嫌疑人信息</h2><p>方权，男，28岁，175cm，年号科技公司的一名程序员。</p><h2 id="车辆-1"><a href="#车辆-1" class="headerlink" title="车辆"></a>车辆</h2><p>方权的车为黑色轿车，车前保险杠受损，有几处残缺，车前盖中部凹陷变形，前窗玻璃有两处放射性裂纹，车左侧方有几道不明长条状刮痕，车窗处刮痕有停顿，出现明显轻微凹陷轮胎有一定程度的磨损，车辆内部驾驶位下有少量水渍。汽车外壳以及轮胎检测到鲁米诺反应。</p><h2 id="审问-1"><a href="#审问-1" class="headerlink" title="审问"></a>审问</h2><p><strong>警察</strong>：凌晨00:30到01:30你在哪?<br><strong>方权</strong>：警官，我昨晚在开车，前几天我父亲去世，我回去操办丧事，因为公司有点事，昨天连夜往这边赶。<br><strong>警官</strong>：你的车是什么情况?<br><strong>方权</strong>：你说那车呀，那个是我今天早上三点多快到家的时候有点迷糊，不小心撞到路边树上的。警官，你可要相信我，我和那人又不认识，我杀她干嘛啊。</p><h2 id="案发调查-1"><a href="#案发调查-1" class="headerlink" title="案发调查"></a>案发调查</h2><p>警方调查沿途监控发现该车辆当晚连续行驶六个小时，警方找到方权时，他正在一个汽车修车行。被询问时神情较紧张。</p><h2 id="穿着-1"><a href="#穿着-1" class="headerlink" title="穿着"></a>穿着</h2><p>短袖T恤与黑色短裤，黑色皮鞋。</p><h2 id="手机短信"><a href="#手机短信" class="headerlink" title="手机短信"></a>手机短信</h2><p>5月15日上午10:30</p><p><strong>上司</strong>：小方呀，那边的事处理的怎么样了<br><strong>方权</strong>：已经快处理完了<br><strong>上司</strong>：节哀啊，但人生还有很多事要做的呀<br><strong>方权</strong>：知道，我把这边忙完就赶回去<br><strong>上司</strong>：不急不急，你先忙去吧</p><h1 id="冯伟"><a href="#冯伟" class="headerlink" title="冯伟"></a>冯伟</h1><h2 id="嫌疑人信息-2"><a href="#嫌疑人信息-2" class="headerlink" title="嫌疑人信息"></a>嫌疑人信息</h2><p>冯伟，男，30岁，身高177cm，拉货公司的一名员工。</p><h2 id="审问-2"><a href="#审问-2" class="headerlink" title="审问"></a>审问</h2><p><strong>警察</strong>：凌晨0:30到1:30你在干嘛？<br><strong>冯伟</strong>：警官，当天晚上俺接了一单生意，就连忙往顾客那边赶了。<br><strong>警察</strong>：那你的车是什么情况?<br><strong>冯伟</strong>：那个车啊，干俺们这行的平时磕磕碰碰的不是很正常嘛，可能是搬货的时候不小心撞到的吧。<br><strong>警察</strong>：你昨晚喝酒了?<br><strong>冯伟</strong>：酒驾?可不敢可不敢，俺是老实人，你不信可以问俺兄弟。<br><strong>冯伟</strong>：警官，你快把我放了吧!俺已经错过好几个单了，俺还要挣钱给俺娘治病!</p><h2 id="车辆-2"><a href="#车辆-2" class="headerlink" title="车辆"></a>车辆</h2><p>冯伟车辆为中型面包车，是公司的车，车前盖出现多处凹陷变形，车辆左车门门把手下方处有轻微刮痕，白色漆脱落，前轮提取到人体组织样物，车窗雨刷底端缝隙发现少量玻璃碎渣，轮胎有一定程度的磨损，车辆内部驾驶位下有少量水渍。</p><h2 id="警方调查"><a href="#警方调查" class="headerlink" title="警方调查"></a>警方调查</h2><p>警方在其家中将其带回警局，被发现时其家中贵重物品已被打包，警方询问时也显的坐立不安。</p><h2 id="订单信息"><a href="#订单信息" class="headerlink" title="订单信息"></a>订单信息</h2><p>5月16日00:30在平台接了一运货订单，5月16日01:50主动取消。</p><h2 id="穿着-2"><a href="#穿着-2" class="headerlink" title="穿着"></a>穿着</h2><p>黑色短袖配上黑色八分裤，灰色运动鞋。</p><h2 id="朋友口供"><a href="#朋友口供" class="headerlink" title="朋友口供"></a>朋友口供</h2><p>冯伟这小子这段时间和疯了一样，拼命接单，我也都知道他母亲住院得动手术，需要钱，想帮他，但这小子倔的很，怎么说也不收，当天本来是他休息，可他看到订单就接。警官，他可没喝酒啊，我是一滴都没让他喝。</p><h2 id="医院通知单"><a href="#医院通知单" class="headerlink" title="医院通知单"></a>医院通知单</h2><p>请尽快交齐手术费用48000元，5月12日</p><h2 id="聊天记录-1"><a href="#聊天记录-1" class="headerlink" title="聊天记录"></a>聊天记录</h2><p>5月15日23:15</p><p><strong>兄弟</strong>：老冯，今天晚上不出来整一杯?难得休息一天<br><strong>冯伟</strong>：搞就搞，怕你不成!<br><strong>兄弟</strong>：行，老地方见。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>死者左肩皮肤挫伤是什么伤?<br> A.生前伤<br> B.死后伤<br> C.无法判断</li></ol><ol start="2"><li>嫌疑人当中有几个人在口供中撒谎?<br> A.无人撒谎<br> B.1人<br> C.2人<br> D.3人  </li></ol><ol start="3"><li>本案的凶手为?<br> A.方权<br> B.罗通<br> C.冯伟</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古国文明-答案</title>
      <link href="2021/05/crimaster-puzzle-civilization-of-ancient-country-ans/"/>
      <url>2021/05/crimaster-puzzle-civilization-of-ancient-country-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>次声波</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>1、辨认出的文字中，“法老”对应古埃及、“婆罗多”对应古印度、“黄河”对应中国，可以联想到四大文明古国，“楔形”、“阿卡德”和“乌尔”对应古巴比伦王国之前的苏美尔王朝、阿卡德王国和乌尔王朝，由此推断老人原本推开的书应该与古巴比伦有关。</p><img src="/assets/images/crimaster/2021/05/20210514-ans-1.png" alt="图片" class="post-image half"><p>2、老人最后留下的文字是古希腊字母，根据每个字母名称开头解得”MARDUK”，即马杜克，巴比伦城邦之神，对应视频日期“2009/03/02”可联想到“马杜克神像迷案”，该案件的发生正是缘于<font style="color:#D9730D">次声波</font>。</p><p>3、老人视频中的表现符合人体受到次声波影响后表现。</p><img src="/assets/images/crimaster/2021/05/20210514-ans-2.png" alt="图片" class="post-image half"><p>马杜克神像之谜的揭秘:马杜克神像是空心结构，在神像的內侧，布满了一圈圈奇怪的水波纹线条，就好似现代镭射唱片一般，而在神像外侧，以一种奇怪的规则，分布着几个风口。当风自这些风口灌入，通过这些波纹的震荡，就会形成声波振动，达到播放唱片一般的效果</p><p>由于根本无法把握风吹入侧的规律，研究者也无法再现这尊马杜克神像所可能发出来的声音。只不过可以确定的一点就是，这些声音根本就不是放给人听的。因为人耳所能接受的声波频率为20～20000赫兹，而马杜克神像所可能发出来的声音，却属于频率低于20赫兹的次声波，而这些次声波就是引发前面一系列离奇案件的”凶器”</p><img src="/assets/images/crimaster/2021/05/20210515-1.png" alt="图片" class="post-image half">]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古国文明</title>
      <link href="2021/05/crimaster-puzzle-civilization-of-ancient-country/"/>
      <url>2021/05/crimaster-puzzle-civilization-of-ancient-country/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>“叮咚。”电脑响了，是哥哥发来的消息。</p><p>“来找找这次的’凶器’吧。”</p><p>你的哥哥小粥是一名侦探，因为你也很热爱推理，哥哥经常会自己制作谜题发给你，来锻炼你的能力。</p><p>这次发来的谜题是视频形式，你点开全屏观察了下，看样子是装在房里的监控录制下来的，右下角的日期是<font color="#56c596">“2009/03/02”</font>，房间整体布局可以看出是一间书房，书桌上堆了一摞书，你仔细看了看，辨认出<font style="color:#D9730D">“法老”、”婆罗多”、”黄河”</font>、<font color="#5874dc">“楔形”、”阿卡德”、”乌尔”</font>、<font color="#b482c0">“古希腊文明”</font>等字眼，有一个老头在笔记本上写字，旁边还有一本推开的书，但因为那一摞书遮挡，你看不清楚。</p><p>你点击播放键，老头正在笔记本上写着什么，2、3秒后老头的手忽然颤抖起来，手里的笔也掉落在纸上，按住胸口，张开嘴呼吸急促的样子，随后老头撑着桌子起来，跌跌撞撞地奔向门口，途中摔倒了几次，看得你都担惊受怕，按了几次门把却打不开房门，随即扶着墙摇摇晃晃走到书桌，剧烈发抖的手拿起笔写了些什么，之后腿一软就倒地了。</p><p>视频到这就结束了。你反复看了几遍，发消息问哥哥:”他最后写了些什么?”</p><p>哥哥发来一张图片:</p><img src="/assets/images/crimaster/2021/05/20210514-1.png" alt="图片" class="post-image half"><p>视频中所有信息暗示着一件事件，请问该事件发生的真正原因，即哥哥所说的’凶器’!</p><p>请认真推敲剧情中的细节!</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>“凶器”的名称 三个汉字</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你是谁-答案</title>
      <link href="2021/05/crimaster-reasoning-who-are-you-ans/"/>
      <url>2021/05/crimaster-reasoning-who-are-you-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>这个房子除了你是否有其他人居住？<br>A.有<br><font color="#56c596">B.没有</font></li></ol><ol start="2"><li>相对于以下选项，哪个最不可能是你的职业？<br>A.心理学教授<br><font color="#56c596">B.医生</font><br>C.作家  </li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>最终你选择报警，警察赶到你家中发现地下室的尸体，通过调查，确定你便是那个雨夜屠夫!</p><p>你患有DID，也就是多重人格障碍，在调查中警方发现你患有DID和你从小经历脱不开关系，你从小受到父亲的虐待，和母亲相依为命，喝醉酒的父亲常常殴打母亲，有一天暴风雨夜，你亲眼看到父亲将母亲残忍的杀害，从那天开始你的身体就慢慢有了另一个人格，但他一直在沉睡，直到三个月前开始苏醒。你不知道他的存在，但他却知道你的所有事，昨天晚上你的次人格像往常样出门开车寻找猎物下手，但由于暴雨以及晚间开车，在一个红绿灯处，一个疲劳驾驶的司机开着一辆卡车从侧面撞向了你，导致你受伤并且失忆。</p><p>第一题</p><p>从日记你被人跟踪的线索，以及被删除的录像，以及书桌的计划便签习惯都说明好像房子里的确存在另一个人，但只有仔细观察便会发现这其中的矛盾。</p><p>首先计划上的打猎，可纵观房子其中并没有任何打猎用的工具，可以猜测这里写的打猎并非真的打猎，更像是“狩猎”，也就是另一个人格雨夜屠夫的计划，他的杀人计划。</p><p>日记中那句“只有我知道密码”表明能打开电脑的只有你。</p><p>卫生间的洗漱用品也只有一个人的。</p><p>家中有一个地下室，里面有许多的尸体，而你家中十分整洁，想要做到这一切需要大量的时间，而你离职经常待在家中，家中布局也较简单，如果是有另外一个人做的这些你很难不察觉。</p><p>第二题</p><p>你最不可能的职业，从书架上来看，从上到下分别对应心理学教授、医生、作家。</p><p>手机短信表明了自己作者身份，在第一题的前提下得知自己便是雨夜屠夫，地下室的被剥了人皮的尸体线索中，每一具人皮都被精致处理，连手部、面部的表皮都完整无损，这不是一般人能够做到，且不是几日便能够熟练掌握，可以说明你可能是医生，或者曾经是一名医生，并且还是个技术高超的外科医生。从线索中可以观察到心理学书籍在书架的最上层并且并不专业，连《天オ在左疯子在右》的这种小说也有，也并没有其他线索指明你心理学教授的身份，且你长时间处于一个精神不正常的状态，但在日记中你从未怀疑自己的心理状况出现问题，且心理学家大多有细微的观察能力，而你身边的各种细节你并未很迅速的察觉到。所以，相对于选项中你最不可能的身份为心理学教授。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你是谁</title>
      <link href="2021/05/crimaster-reasoning-who-are-you/"/>
      <url>2021/05/crimaster-reasoning-who-are-you/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>你从医院的病床上醒来，抬眼望着周围陌生的一切，脑海里充满了疑:我是谁?我为什么会来到这里?你望着身上几处被医生缠好的绷带，脑中企图开始回忆，但一阵尖锐的疼痛不得不让你停止思考医生和你身边自称是你朋友的人见状走来，询问了你的状况并向你解释了你来到医院的原因。据医生所说，你是昨晚因为出车祸被送到医院的，但车祸并不严重，除了你的脑部受到了撞击，身体的其它部位都只是轻伤，既然醒来应该就已无大碍，再做几项检查观察一下便可出院。你对医生所说的车祸经过没有一点印象，对所有事情都失去记忆的恐惧慢慢压迫着你，你不等检查便匆匆离开了医院，想要找回记忆，你的朋友来不及劝阻，只能带着你回到你的家里，你望着这栋有些熟悉但又很陌生的房子内的种种，试图从这个地方找到一点关于自己的信息。</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>你望着镜子中的自己，一张陌生的脸庞，笔直又挺拔的身材，体型中等偏瘦，戴着一副黑色眼镜，你尝试着拿下眼镜，发现这并不影响你的视力，你望着身上已经包扎过的伤口，脑海中似是有些记忆，画面忽然闪现在你的脑海，画面中是一辆汽车，你坐在汽车的驾驶位等待着红绿灯，雨刷器扑闪着刮走车前窗的雨水，副驾驶上似是有个身影，但你却如何也记不起他的长相，一束亮光从方照来，越来越刺眼，突然，画面混沌，整个世界都仿佛在晃动，随后一切重归于黑暗之中…</p><p>房间布局：</p><img src="/assets/images/crimaster/2021/05/20210512-1.png" alt="" class="post-image half"><h1 id="初始线索"><a href="#初始线索" class="headerlink" title="初始线索"></a>初始线索</h1><h2 id="车祸备案"><a href="#车祸备案" class="headerlink" title="车祸备案"></a>车祸备案</h2><p>2021年05月11日晚上22:39一辆卡车与一辆轿车于某某路段发生撞击，因现场路段无监控，车辆已被警方处理，带回相关部门做车祸鉴定。</p><h2 id="朋友谈话"><a href="#朋友谈话" class="headerlink" title="朋友谈话"></a>朋友谈话</h2><p><strong>朋友</strong>：你最近很奇怪，总说有人跟踪你，还说那个人潜入了你的家里。<br><strong>你</strong>：我有没有跟你说那个人是谁?<br><strong>朋友</strong>：没有，你好像一直也没把人找出来。以后开车可小心点，还有，你已经辞职快一个月了，从来也没跟我说过你有什么计划，想要干点什么总在家里闷着，把你一个人放在这儿我不是很放心，要不你跟我回我家住段时间?<br><strong>你</strong>：不了，我没事。<br><strong>朋友</strong>：好吧，我还有点事，你照顾好自己，有事给我打电话，我先走了。<br><strong>你</strong>：嗯，放心。</p><p>（我究竟是谁?这是我的家吗?等这人走了到屋里去看看吧……）</p><h1 id="房间线索"><a href="#房间线索" class="headerlink" title="房间线索"></a>房间线索</h1><h2 id="台历和照片"><a href="#台历和照片" class="headerlink" title="台历和照片"></a>台历和照片</h2><p>书房的书桌上有个台历和一张照片，台历上有着一个便签，上面写着:“计划安排:1.打猎 2.购买装备”照片年代有些老旧，上面是一个面庞慈善大概三十岁左右的女人正抱着一个眉眼与你有些相似的六七岁的小男孩。</p><h2 id="书架"><a href="#书架" class="headerlink" title="书架"></a>书架</h2><p>书桌的背后是一个书架，书架总共有三层，书从左到右都是从小书到大书的排列，十分整洁。<br>最上面一层有《爱的艺术》，《拆掉思维里的墙》，《天才在左，疯子在右》《怪诞心理学》…<br>中间一层有《人体断层解剖学图谱》，《人体系统解剖学》…<br>最下面一层有《小说的艺术》《百年孤独》《文学讲稿》…</p><h2 id="电脑"><a href="#电脑" class="headerlink" title="电脑"></a>电脑</h2><p>书桌上有一台台式电脑，打开需要密码，你几次尝试输入，一直显示密码错误。</p><h2 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h2><p>桌子上摆着一个牛皮封面的日记本，你翻着日记本，发现自己有每天写日记的习惯，但最近这段时间不知是有事还是想要偷懒，日记并没有每一天都写，而是断断续续，且最近的日记内容极其诡异。<br>日记部分较不正常内容：</p><p>04月02日<br>最近过的昏昏沉沉的，好像总是在睡觉，就像被人下了药一样，一觉醒来什么都不记得，日记竟然都忘记写了。</p><p>04月21日<br>家里最近是因为下雨太潮湿了吗?怎么这么多水渍下雨天我明明没有出门…</p><p>05月08日<br>他就和幽灵一样，他到底是谁，他想干嘛，他就像生活在我身边一样，甚至是住在我的家里，最近我的家里总是莫名出现一些奇怪的东西，我知道那些东西不属于我，可我却没有发现过他，但我坚信他一定存在，别人都觉得我疯了，但我清楚的知道他的存在，我准备在家里安装摄像头，我倒要看看他到底是谁!</p><p>05月10日<br>怎么可能，摄像头拍下的录像竟然失效被删除了，不可能的，电脑密码他怎么可能知道，怎么可能……这密码只有我一个人知道，只有我知道!</p><h2 id="卫生间"><a href="#卫生间" class="headerlink" title="卫生间"></a>卫生间</h2><p>洗漱台上摆放着一个漱口杯，里面有一只牙刷和一支牙膏、旁边有一支洗面奶以及一个刮胡刀。</p><h1 id="其他线索"><a href="#其他线索" class="headerlink" title="其他线索"></a>其他线索</h1><h2 id="手机线索"><a href="#手机线索" class="headerlink" title="手机线索"></a>手机线索</h2><p>你拿起了手机，想要在手机里寻找线索，一个被你单独收藏的软件《 CRIMASTER犯罪大师》引起了你的注意，其中有唯一一条被你点赞以及评论的帖子：<br>最近网络上沸沸扬扬的雨夜屠夫案，连续三个月，已有十余名女性遇，害据说这个雨夜屠夫只会在下雨的日子出现，专挑那些三十几岁的女性下手，还有很多受害者没有被找到，估计凶多吉少，这个案子你们怎么看？<br>评论：<br>据我推理，凶手专挑下雨天下手，估计是雨天对凶手本人有什么不一样的意义吧。</p><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><p>5月10号<br>您的文章《你的身体里流淌着杀人犯的血液》已被收录至“鹿先森”杂志，稿费将于月底统一发送。</p><h2 id="卧室"><a href="#卧室" class="headerlink" title="卧室"></a>卧室</h2><p>室中十分整洁，但有一股淡淡的香料味道以及一股消毒水的味道，你仔细观察着卧室，并没有发现卧室里其他有异常的地方，味道好像是从衣柜里传出，你打开了衣柜，发现里面衣服都是西服，左边是浅蓝色，右边是黑色，你扒开衣服，竟发现卧室里衣柜里存在一个隐藏的密道门!你打开了门，顺着密道往下，发现了一间地下室…</p><h2 id="地下室"><a href="#地下室" class="headerlink" title="地下室"></a>地下室</h2><p>里面是一小段阶梯，你顺着阶梯走下不久便来到了地下室的房门前，打开房门，一股腐烂的味道直冲而来，抬眼望去，地下室的墙壁上悬挂着十几具血淋淋的尸体，水龙头未拧紧正朝下落着水滴，滴答滴答的声音刺激着你的灵魂，每具尸体前都摆着一张人皮，活生生的从尸体上剥下的人皮!每一具人皮都被精致处理，连手部、面部的表皮都完整无损，头皮上还连接着长发，一个个摆的整整齐齐，犹如一个个珍宝。<br>你忍住呕吐从地下室疯了一样跑了出来，瘫坐在卧室地上，你的脑海里只有一个想法，那就是报警!报警!你拿起手机刚准备按下最后的零，突然，停在了那个按键上。你…真的决定要报警嘛?</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>这个房子除了你是否有其他人居住？<br>A.有<br>B.没有</li></ol><ol start="2"><li>相对于以下选项，哪个最不可能是你的职业？<br>A.心理学教授<br>B.医生<br>C.作家</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极速破译-答案</title>
      <link href="2021/05/crimaster-puzzle-speed-decipher-ans/"/>
      <url>2021/05/crimaster-puzzle-speed-decipher-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>春丛认取双蝶</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p><font style="color:#D9730D">后续:似乎警队只是抓到了被嫁祸之人，真正的手与被嫁祸人有深仇大恨，身边至亲人的离世与被嫁祸者有关!</font></p><p>本题有多种解法，需一一尝试，因诗词的提示所以其它皆为乱序，无法得出答案。</p><p>正确解题过程：</p><p>内华达州机密区域为51区，因此所需步骤为24即所有白格都要走一遍。天空到地狱，意为自上 而下的顺序，下面有R和E，但是右下角的E只有 一条能单向通向它的路，而且又要求所有格子都走完，所以E必定是起始点或终点(所以把极高处到底端理解为字母表中从A到Z的也可以通过观察这一点排除)，同理左上角的C也能这样确定是起始或终点，所以最终只能是左上角的C到右下角的E。</p><p>提示一为“王，皇后，战车与主教”，意为国际象棋，赤兔是马，马走L型，根据提示需要走24步，从头到尾走完所经历的字母，便是答案。</p><p>(即<font style="color:#D9730D">CHUNCONGRENQUSHUANGQIDIE</font>，根据答案要求的七个汉字加上诗词的提示得到:<font style="color:#D9730D">春丛认取双栖蝶</font>)</p><img src="/assets/images/crimaster/2021/05/20210509-ans-1.png" alt="图片" class="post-image half">]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极速破译</title>
      <link href="2021/05/crimaster-puzzle-speed-decipher/"/>
      <url>2021/05/crimaster-puzzle-speed-decipher/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>近日刑警平次和其团队告破了一起重大连环杀人案，但最终本该庆祝的时刻，平次忽然意识到案发时凶手使用某物件所对应的身高区间，与所抓嫌疑人不符，他急忙赶回现场，在隐秘角落里发现这样一条奇怪的图文。</p><img src="/assets/images/crimaster/2021/05/20210509-1.png" alt="图片" class="post-image half"><p>文：自天空极高处直至地狱的底端，追寻赤兔的足迹。(所需步骤为内华达州机密区域所对应数字减3的一半)</p><p><font style="color:#D9730D">提示1:王、皇后、战车与主教</font></p><p><font style="color:#D9730D">提示2:诗词</font></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>七个汉字</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哥哥的礼物-答案</title>
      <link href="2021/05/crimaster-puzzle-brother&#39;s-gift-ans/"/>
      <url>2021/05/crimaster-puzzle-brother&#39;s-gift-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>cop</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>密码箱打开了，哥哥居然送了我一本CRIMASTERA解密本，上面还有一段哥哥写给我的话:</p><p>努力的苦读，就为这一刻！把你的实力全部发挥，所有关爱着你的人，都会为你祝福祈祷，相信你一定会考出满意的成绩！</p><p><font style="color:#D9730D">(作者在此祝愿莘莘学子们都能够金榜题名)</font></p><p>解题过程：</p><p>将连接处折叠形成一个正十二面体(提示降维打击指从三维立体到二维平面，需将平面还原成立体)十二面体中距离X最远的面是它的对面就是2，所以2就是O。骆驼英文是camel，与O相邻的面是3、5、6、7、8，所以3、5、6、7、8是camel但是具体对应还不明确。Z的一圈是X、1、5、8、4，5和8已经有字母了，所以1，4就是I、P，因为P不和Y相邻，所以1是P、4是。和Z、P都相邻的面是X和5，所以5是C，顺时针排一圈，5是C、8是A、7是M、6是E、3是L。再用和L是对面验证，成立。就剩下9，所以9是N。</p><img src="/assets/images/crimaster/2021/05/20210508-ans-1.png" alt="" class="post-image half no-limit-height"><p>按照1到9排列得policeman(警察)，将其镜像反转得到</p><img src="/assets/images/crimaster/2021/05/20210508-ans-2.png" alt="" class="post-image half no-limit-height"><p>台球中1-黄色，2-蓝色，3-红色，4-紫色，5桔色，6-绿色，7酱色，8-黑色，9-黄/白色，10-蓝/白色，11-红/白色，12-紫/白色，13-桔/白色，14-绿/白色，15-酱/白色对应就是589，即cop(警察)。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哥哥的礼物</title>
      <link href="2021/05/crimaster-puzzle-brother&#39;s-gift/"/>
      <url>2021/05/crimaster-puzzle-brother&#39;s-gift/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>今天是哥哥从警校回家的日子，好在他还记得我这个妹妹还有几十天就要中考了，破天荒的为我准备了一份礼物，但是需要解开密码箱才能够拿到。</p><p>箱子上的一副图和一段话如下：</p><img src="/assets/images/crimaster/2021/05/20210508-1.png" alt="图片" class="post-image half"><p>提示：</p><p>整个世界被降维打击，请准确还原。Z有两边是 I、P，骆驼顺时绕O转一圈，P、Y吵架不相邻， Z、P也和C相邻，离X最远的是O，I、L是对面，最后一处就是N。</p><p>球杆依次击中正义之职在镜子中的桔、黑及黄白寻找答案。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>三个字母的单词</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地球保卫战-答案</title>
      <link href="2021/05/crimaster-puzzle-earth-defense-force-ans/"/>
      <url>2021/05/crimaster-puzzle-earth-defense-force-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>skullisland</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>观察第一幅图可知，这和猪圈密码有关</p><img src="/assets/images/crimaster/2021/05/20210505-ans-1.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/05/20210505-ans-2.png" alt="图片" class="post-image half"><p>则根据密码表根据观察得到，红对应的为M，蓝对应的为Z，紫对应的为H，根据第二张图可知， 第一张图的三个字母与第二张图的三个字母有某种正确对应关系。根据提示(找到正确的字母)，意思是告诉我们将进行字母按字母表顺序将对应。接下来将进行试错，若M对应V，H就将对应A，Z对应N，将无法按字母表顺序得到新的关系。</p><p>以此类推，最终确认M对应A，H对应V，Z对应N。如图，我们得到了新的对应表。</p><img src="/assets/images/crimaster/2021/05/20210505-ans-3.png" alt="图片" class="post-image half"><p>此时看第三张图，发现所给音素为元音音素，提示为元音密码，根据/将数字进行几个为一组的分组则可以得到</p><p>2/52/22/53/53/5/2/53/34/55/41</p><p>此时用元音密码则可以解出EWGXXUEXMZP</p><img src="/assets/images/crimaster/2021/05/20210505-ans-4.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/05/20210505-ans-5.png" alt="图片" class="post-image half"><p>此时得到的EWGXXUEXMZP带回对应表中，此时并不知道正确的明文密文对应方向，将进行两次试错：</p><p>1.若M为开头的为明文，A开头的为密文则，可得到qisjjgqjylb</p><p>2.若A开头的为明文，M开头的为密文，则可得到skullisland</p><p>综上所述，第2种有明显意义，所以答案为skull island</p><p>珂欣说:“让我们去骷髅岛？可那里不是已经沦陷了？”</p><p>浩玥说:“我们不能失去诗吟，想办法一定要去救她！”</p><p>LL说:“基地里的装备应该足以抵御那里的变异物种了！”</p><p>三人立即收拾了装备以及物资前往了骷髅岛。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地球保卫战</title>
      <link href="2021/05/crimaster-puzzle-earth-defense-force/"/>
      <url>2021/05/crimaster-puzzle-earth-defense-force/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>时间:六十世纪</p><p>地点:地球</p><p>背景:能源危机，地球生灵涂炭。</p><p>团队:地球守护小组</p><p>LL，浩玥，珂欣三人在进行飞船的研制与新能源的研究。</p><p>LL说:“诗吟去哪了?”</p><p>珂欣说:“大概三小时前，超级电波就联系不上她了。”</p><p>浩玥说:“马上进入紧急状态，去诗吟家找她”</p><p>三人带上武器装备，立即前往诗吟家。可诗吟家中的景象让三人瞠目结舌，房间凌乱不堪，有过被入侵的迹象，在一番仔细搜査后，一个用高分子纳米科技的码锁被发现，LL熟练的输入了密码。里面存放着三张图片，三人便对着图片思索起来。“她一定是要告诉我们什么信息!”</p><img src="/assets/images/crimaster/2021/05/20210505-1.png" alt="图片" class="post-image half"><p>请找到正确的对照表格并解出数字所表达的一处地点。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>请输入答案11个字母不区分大小写及空格</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全民挑战第一期测试题-答案</title>
      <link href="2021/05/crimaster-puzzle-challenge-test-ans/"/>
      <url>2021/05/crimaster-puzzle-challenge-test-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>狄仁杰</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>marple小姐，翻译成中文最为广泛的版本就是简・马普尔。</p><p>根据线索:在马普尔小姐的指示下。</p><p>简可拆分为三个字，竹，门，日。诗集主编为，两张图片右下有角标，分别是竹和日。按照写字顺序先竹，然后门，再者是日。</p><p>竹的图</p><img src="/assets/images/crimaster/2021/05/20210503-ans-1.png" alt="图片" class="post-image half"><p>下有一句话:字母化数，把marple在十六位字母表中的序号化出来得1311816125。接下来写”门”</p><p>诗有五首，我们把数字化成五份13/11/81/61/25。</p><p>与査询的古诗对应(在其中可能会拿数字有人去对应诗的题目，但是每一首诗都有说明作者，说明我们应该查询古诗)</p><img src="/assets/images/crimaster/2021/05/20210503-ans-2.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/05/20210503-ans-3.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/05/20210503-ans-4.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/05/20210503-ans-5.png" alt="图片" class="post-image half"><p>按照13/11/81/61/25尝试各种的方式对应，得出唯一合理的答案，不计算撇捺</p><p>接下来就是日的图片:</p><img src="/assets/images/crimaster/2021/05/20210503-ans-6.png" alt="图片" class="post-image half"><p>把不计算撇捺的方式带入进去:(笔画可以上各大搜索引擎查询，基本无异议</p><p>只:竖、横折、横、撇、点。</p><p>雁:橫、撇、撇、竖、撇、竖、点、横、横、橫、竖、横。</p><p>躁:竖、横折、横、竖、橫、竖、提、竖、横折、橫、竖、横折、横、竖、横折、横、横、竖、撇、捺。</p><p>年:撇、横、横、竖、横、竖。</p><p>靠:撇、横、竖、橫、竖、横折、横、竖、横、橫、橫、竖、横、横、横。</p><p>就:点、横、竖、橫折、横、竖钩、撇、点、橫、撇、竖弯钩、点。</p><p>思:竖、橫折、横、竖、横、点、斜钩、点、点。</p><p>民:横折、横、竖提、橫、斜钩。</p><p>去除撇捺，计算得:4.9.18.5.14.10.9.5。再次转 变成字母可得: DIRENJIE</p><p>答案即为狄仁杰。</p><p>我们中国著名的侦探例如宋慈，狄仁杰，包拯等，在历史上，他们是古代封建社会統治下平民的希望寄托。 </p><p>公正严明，铁面无私———包拯</p><p>公元676至679年，升为了大理寺寺丞，解決了大量积压的案件，涉案人员高达1.7万人，却没有任何人状告他判決有误———狄仁杰</p><p>中外法医界普遍认为是宋慈于公元1235年开创了“法医鉴定学”，因此宋慈被尊为世界法医学鼻祖———宋慈</p><p>我们向先人致敬。</p><p>同时，向马普尔小姐致敬。侦探精神不分年不分性别，不分国界，有的，只是你和我心中那份对推理的热爱。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全民挑战第一期测试题</title>
      <link href="2021/05/crimaster-puzzle-challenge-test/"/>
      <url>2021/05/crimaster-puzzle-challenge-test/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我收到了一份神秘的信件，貌似是一位我在网络上结识的好友给我发来的，希望大家帮我一同破解这一份神秘的信件。信件容如下:</p><p><font style="color:#D9730D">听说你是马普尔(Jane Marple)小姐的忠实粉丝，我也是。而且我也特别喜欢中华文化，希望通过你的帮助，在marple小姐的指示下，寻找 一位我同样喜欢的侦探。</font></p><p>信中附带一本诗集，名称为“<font style="color:#D9730D">门</font>”。内容如下：</p><p><font style="color:#D9730D">古朗月行(唐・李白)</font><br><font style="color:#D9730D">摸鱼儿·春光(宋・李裕翁)</font><br><font style="color:#D9730D">暗香日时月色(宋·姜)</font><br><font style="color:#D9730D">与孟郊洛北野泉上煎茶(唐·刘言史)</font><br><font style="color:#D9730D">颂古一首其一(宋・释师一)</font></p><p>还有两张纸条：</p><img src="/assets/images/crimaster/2021/05/20210503-1.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/05/20210503-2.png" alt="图片" class="post-image half"><p>图下有一行字:<font style="color:#D9730D">字母化数</font></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>请输入一位人物名称 （例:野田吴）</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转】字节跳动最爱考的64道算法题(JS版)</title>
      <link href="2021/05/byte-dance-top-64-algorithm-problems-js-version/"/>
      <url>2021/05/byte-dance-top-64-algorithm-problems-js-version/</url>
      
        <content type="html"><![CDATA[<p>本文来源于图雀社区，作者一只图雀。<br>原文链接： <a href="https://mp.weixin.qq.com/s/HsZo757NDNV-3xnGQjPtAQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/HsZo757NDNV-3xnGQjPtAQ</a></p><p><font style="color:#D9730D">欢迎关注公众号：图雀社区。 如果你想从零开始以实战的方式学习一门技术，亦或是想动手做一个比较完整的项目以准备面试，相信 「图雀社区」 的内容都能够帮助到你，成为初入前端的你成长路上的指南针。</font></p><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>现在大厂面试中，算法题几乎为必考项，且近几年频现 LeetCode 真题，此篇为拿到字节、腾讯、京东 Offer 的笔者本人在准备面试过程中亲自刷过以及遇到过高频算法题。文章内容会分模块整理，对于笔者在面试过程中遇到的真题，会给予着重 【🔥】标出。</p><p>同时，可以毫不客气的说，如果你准备时间有限，又想追求算法题准备效率最大化，那么你只需要按照大纲把下面的题目刷完，并把代码烂熟于心，就几乎可以应对 90% 的面试算法考题了。</p><p>整理这篇内容的目的一个是笔者在之前准备面试时的一点积累，而它确实也帮助笔者在面试算法题中过关斩将，同时呢，也希望能够在金三银四给予拼搏的你，一点点帮助就好！💪</p><p>本篇内容包括如下模块：</p><ul><li>高频算法题系列：链表</li><li>高频算法题系列：字符串【🔥】【有真题】</li><li>高频算法题系列：数组问题【🔥】【有真题】</li><li>高频算法题系列：二叉树</li><li>高频算法题系列：排序算法【🔥】</li><li>高频算法题系列：二分查找【🔥】</li><li>高频算法题系列：动态规划【🔥】</li><li>高频算法题系列：BFS</li><li>高频算法题系列：栈【🔥】</li><li>高频算法题系列：DFS【🔥】</li><li>高频算法题系列：回溯算法【🔥】</li></ul><p>其中标🔥的部分代表非常高频的考题，其中不乏笔者遇到的原题。其中对于每一类，首先会列出包含的考题，然后针对每一道考题会给出难度、考察知识点、是否是面试真题，在每道题详细介绍时，还会给出每道题的 LeetCode 链接，帮助读者理解题意，以及能够进行实际的测验，还可以观看其他人的答案，更好的帮助准备。</p><h1 id="高频算法题系列：链表"><a href="#高频算法题系列：链表" class="headerlink" title="高频算法题系列：链表"></a>高频算法题系列：链表</h1><p>笔者遇到的高频链表题主要包含这几道：</p><ul><li>通过快慢指针寻找链表中点 【简单】</li><li>通过链表的后续遍历判断回文链表问题 【简单】</li><li>链表的反向输出 【简单】</li><li>合并 K 个升序链表 【困难】</li><li>K个一组翻转链表 【困难】</li><li>环形链表 【简单】</li><li>排序链表 【中等】</li><li>相交链表 【简单】</li></ul><h2 id="寻找链表中点"><a href="#寻找链表中点" class="headerlink" title="寻找链表中点"></a>寻找链表中点</h2><p>题解</p><p>通过快慢指针寻找链表中点</p><pre><code class="javascript">function findCenter(head) {  let slower = head, faster = head;  while (faster &amp;&amp; faster.next != null) {    slower = slower.next;    faster = faster.next.next;  }  // 如果 faster 不等于 null，说明是奇数个，slower 再移动一格  if (faster != null) {    slower = slower.next;  }  return slower;}</code></pre><h2 id="前序遍历判断回文链表"><a href="#前序遍历判断回文链表" class="headerlink" title="前序遍历判断回文链表"></a>前序遍历判断回文链表</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">234 回文链表（简单）</a><sup>[1]</sup></p><p>题解1</p><p>利用链表的后续遍历，使用函数调用栈作为后序遍历栈，来判断是否回文</p><pre><code class="javascript">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } *//** * @param {ListNode} head * @return {boolean} */var isPalindrome = function (head) {  let left = head;  function traverse(right) {    if (right == null) return true;    let res = traverse(right.next);    res = res &amp;&amp; (right.val === left.val);    left = left.next;    return res;  }  return traverse(head);};</code></pre><p>题解2</p><p>通过快、慢指针找链表中点，然后反转链表，比较两个链表两侧是否相等，来判断是否是回文链表</p><pre><code class="javascript">var isPalindrome = function (head) {  // 反转 slower 链表  let right = reverse(findCenter(head));  let left = head;  // 开始比较  while (right != null) {    if (left.val !== right.val) {      return false;    }    left = left.next;    right = right.next;  }  return true;}function findCenter(head) {  let slower = head, faster = head;  while (faster &amp;&amp; faster.next != null) {    slower = slower.next;    faster = faster.next.next;  }  // 如果 faster 不等于 null，说明是奇数个，slower 再移动一格  if (faster != null) {    slower = slower.next;  }  return slower;}function reverse(head) {  let prev = null, cur = head, nxt = head;  while (cur != null) {    nxt = cur.next;    cur.next = prev;    prev = cur;    cur = nxt;  }  return prev;}</code></pre><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206 反转链表（简单）</a><sup>[2]</sup></p><p>题解1</p><p>迭代</p><pre><code class="javascript">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } *//** * @param {ListNode} head * @return {ListNode} */var reverseList = function (head) {  let prev = null, curr = head  while (curr) {    const node = curr.next    curr.next = prev    prev = curr    curr = node  }  return prev};</code></pre><p>解题2</p><p>递归</p><pre><code class="javascript">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } *//** * @param {ListNode} head * @return {ListNode} */var reverseList = function (head) {  if (head == null || head.next == null) return head;  let last = reverseList(head.next);  head.next.next = head;  head.next = null;  return last;};</code></pre><h2 id="合并K个升序链表"><a href="#合并K个升序链表" class="headerlink" title="合并K个升序链表"></a>合并K个升序链表</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">23 合并K个升序链表（困难）</a><sup>[3]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } *//** * @param {ListNode[]} lists * @return {ListNode} */var mergeKLists = function (lists) {    if (lists.length === 0) return null;    return mergeArr(lists);};function mergeArr(lists) {    if (lists.length &lt;= 1) return lists[0];    let index = Math.floor(lists.length / 2);    const left = mergeArr(lists.slice(0, index))    const right = mergeArr(lists.slice(index));    return merge(left, right);}function merge(l1, l2) {    if (l1 == null &amp;&amp; l2 == null) return null;    if (l1 != null &amp;&amp; l2 == null) return l1;    if (l1 == null &amp;&amp; l2 != null) return l2;    let newHead = null, head = null;    while (l1 != null &amp;&amp; l2 != null) {        if (l1.val &lt; l2.val) {            if (!head) {                newHead = l1;                head = l1;            } else {                newHead.next = l1;                newHead = newHead.next;            }            l1 = l1.next;        } else {            if (!head) {                newHead = l2;                head = l2;            } else {                newHead.next = l2;                newHead = newHead.next;            }            l2 = l2.next;        }    }    newHead.next = l1 ? l1 : l2;    return head;}</code></pre><h2 id="K-个一组翻转链表"><a href="#K-个一组翻转链表" class="headerlink" title="K 个一组翻转链表"></a>K 个一组翻转链表</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">25 K 个一组翻转链表（困难）</a><sup>[4]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } *//** * @param {ListNode} head * @param {number} k * @return {ListNode} */var reverseKGroup = function (head, k) {    let a = head, b = head;    for (let i = 0; i &lt; k; i++) {        if (b == null) return head;        b = b.next;    }    const newHead = reverse(a, b);    a.next = reverseKGroup(b, k);    return newHead;};function reverse(a, b) {    let prev = null, cur = a, nxt = a;    while (cur != b) {        nxt = cur.next;        cur.next = prev;        prev = cur;        cur = nxt;    }    return prev;}</code></pre><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">141 环形链表（简单）</a><sup>[5]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } *//** * @param {ListNode} head * @return {boolean} */var hasCycle = function (head) {  if (head == null || head.next == null) return false;  let slower = head, faster = head;  while (faster != null &amp;&amp; faster.next != null) {    slower = slower.next;    faster = faster.next.next;    if (slower === faster) return true;  }  return false;};</code></pre><h2 id="排序链表"><a href="#排序链表" class="headerlink" title="排序链表"></a>排序链表</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/sort-list/" target="_blank" rel="noopener">148 排序链表（中等）</a><sup>[6]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } *//** * @param {ListNode} head * @return {ListNode} */var sortList = function (head) {  if (head == null) return null;  let newHead = head;  return mergeSort(head);};function mergeSort(head) {  if (head.next != null) {    let slower = getCenter(head);    let nxt = slower.next;    slower.next = null;    // console.log(head, slower, nxt);    const left = mergeSort(head);    const right = mergeSort(nxt);    head = merge(left, right);  }  return head;}function merge(left, right) {  let newHead = null, head = null;  while (left != null &amp;&amp; right != null) {    if (left.val &lt; right.val) {      if (!head) {        newHead = left;        head = left;      } else {        newHead.next = left;        newHead = newHead.next;      }      left = left.next;    } else {      if (!head) {        newHead = right;        head = right;      } else {        newHead.next = right;        newHead = newHead.next;      }      right = right.next;    }  }  newHead.next = left ? left : right;  return head;}function getCenter(head) {  let slower = head, faster = head.next;  while (faster != null &amp;&amp; faster.next != null) {    slower = slower.next;    faster = faster.next.next;  }  return slower;}</code></pre><h2 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">160 相交链表（简单）</a><sup>[7]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } *//** * @param {ListNode} headA * @param {ListNode} headB * @return {ListNode} */var getIntersectionNode = function (headA, headB) {    let lastHeadA = null;    let lastHeadB = null;    let originHeadA = headA;    let originHeadB = headB;    if (!headA || !headB) {        return null;    }    while (true) {        if (headB == headA) {            return headB;        }        if (headA &amp;&amp; headA.next == null) {            lastHeadA = headA;            headA = originHeadB;        } else {            headA = headA.next;        }        if (headB &amp;&amp; headB.next == null) {            lastHeadB = headB            headB = originHeadA;        } else {            headB = headB.next;        }        if (lastHeadA &amp;&amp; lastHeadB &amp;&amp; lastHeadA != lastHeadB) {            return null;        }    }    return null;};</code></pre><h1 id="高频算法题系列：字符串【🔥】"><a href="#高频算法题系列：字符串【🔥】" class="headerlink" title="高频算法题系列：字符串【🔥】"></a>高频算法题系列：字符串【🔥】</h1><p>主要有以下几类高频考题：</p><ul><li>最长回文子串 【中等】【双指针】【面试真题】</li><li>最长公共前缀 【简单】【双指针】</li><li>无重复字符的最长子串【中等】【双指针】</li><li>最小覆盖子串 【困难】【滑动窗口】【面试真题】</li></ul><h2 id="【面试真题】最长回文子串【双指针】"><a href="#【面试真题】最长回文子串【双指针】" class="headerlink" title="【面试真题】最长回文子串【双指针】"></a>【面试真题】最长回文子串【双指针】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">5 最长回文子串（中等）</a><sup>[8]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} s * @return {string} */var longestPalindrome = function (s) {          if (s.length === 1) return s;          let maxRes = 0, maxStr = '';          for (let i = 0; i &lt; s.length; i++) {            let str1 = palindrome(s, i, i);            let str2 = palindrome(s, i, i + 1);            if (str1.length &gt; maxRes) {              maxStr = str1;              maxRes = str1.length;            }            if (str2.length &gt; maxRes) {              maxStr = str2;              maxRes = str2.length;            }          }          return maxStr;        };function palindrome(s, l, r) {  while (l &gt;= 0 &amp;&amp; r &lt; s.length &amp;&amp; s[l] === s[r]) {    l--;    r++;  }  return s.slice(l + 1, r);}</code></pre><h2 id="最长公共前缀【双指针】"><a href="#最长公共前缀【双指针】" class="headerlink" title="最长公共前缀【双指针】"></a>最长公共前缀【双指针】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">14 最长公共前缀（简单）</a><sup>[9]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string[]} strs * @return {string} */var longestCommonPrefix = function (strs) {    if (strs.length === 0) return "";    let first = strs[0];    if (first === "") return "";    let minLen = Number.MAX_SAFE_INTEGER;    for (let i = 1; i &lt; strs.length; i++) {        const len = twoStrLongestCommonPrefix(first, strs[i]);        minLen = Math.min(len, minLen);    }    return first.slice(0, minLen);};function twoStrLongestCommonPrefix(s, t) {    let i = 0, j = 0;    let cnt = 0;    while (i &lt; s.length &amp;&amp; j &lt; t.length) {        console.log(s[i], t[j], cnt)        if (s[i] === t[j]) {            cnt++;        } else {            return cnt;        }        i++;        j++;    }    return cnt;}</code></pre><h2 id="无重复字符的最长子串【双指针】"><a href="#无重复字符的最长子串【双指针】" class="headerlink" title="无重复字符的最长子串【双指针】"></a>无重复字符的最长子串【双指针】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3 无重复字符的最长子串（中等）</a><sup>[10]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} s * @return {number} */var lengthOfLongestSubstring = function (s) {    let window = {};    let left = 0, right = 0;    let maxLen = 0, maxStr = '';    while (right &lt; s.length) {        let c = s[right];        right++;        if (window[c]) window[c]++;        else window[c] = 1        while (window[c] &gt; 1) {            let d = s[left];            left++;            window[d]--;        }        if (maxLen &lt; right - left) {            maxLen = right - left;        }    }    return maxLen;};</code></pre><h2 id="【面试真题】-最小覆盖子串【滑动窗口】"><a href="#【面试真题】-最小覆盖子串【滑动窗口】" class="headerlink" title="【面试真题】 最小覆盖子串【滑动窗口】"></a>【面试真题】 最小覆盖子串【滑动窗口】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76 最小覆盖子串（困难）</a><sup>[11]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} s * @param {string} t * @return {string} */var minWindow = function (s, t) {    let need = {}, window = {};    for (let c of t) {        if (!need[c]) need[c] = 1;        else need[c]++;    }    let left = 0, right = 0;    let valid = 0, len = Object.keys(need).length;    let minLen = s.length + 1, minStr = '';    while (right &lt; s.length) {        const d = s[right];        right++;        if (!window[d]) window[d] = 1;        else window[d]++;        if (need[d] &amp;&amp; need[d] === window[d]) {            valid++;        }        console.log('left - right', left, right);        while (valid === len) {            if (right - left &lt; minLen) {                minLen = right - left;                minStr = s.slice(left, right);            }            console.lo            let c = s[left];            left++;            window[c]--;            if (need[c] &amp;&amp; window[c] &lt; need[c]) {                valid--;            }        }    }    return minStr;};</code></pre><h1 id="高频算法题系列：数组问题【🔥】"><a href="#高频算法题系列：数组问题【🔥】" class="headerlink" title="高频算法题系列：数组问题【🔥】"></a>高频算法题系列：数组问题【🔥】</h1><p>主要有几类高频考题：</p><ul><li>俄罗斯套娃信封问题【困难】【排序+最长上升子序列】【面试真题】</li><li>最长连续递增序列 【简单】【双指针】</li><li>最长连续序列【困难】【哈希表】</li><li>盛最多水的容器【困难】【面试真题】</li><li>寻找两个正序数组的中位数【困难】【双指针】</li><li>删除有序数组中的重复项【简单】【快慢指针】</li><li>和为K的子数组【中等】【哈希表】</li><li>nSum 问题【系列】【简单】【哈希表】</li><li>接雨水【困难】【暴力+备忘录优化】【面试真题】</li><li>跳跃游戏【系列】【中等】【贪心算法】</li></ul><h2 id="【面试真题】俄罗斯套娃信封问题【排序-最长上升子序列】"><a href="#【面试真题】俄罗斯套娃信封问题【排序-最长上升子序列】" class="headerlink" title="【面试真题】俄罗斯套娃信封问题【排序+最长上升子序列】"></a>【面试真题】俄罗斯套娃信封问题【排序+最长上升子序列】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/russian-doll-envelopes/" target="_blank" rel="noopener">354 俄罗斯套娃信封问题（困难）</a><sup>[12]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[][]} envelopes * @return {number} */var maxEnvelopes = function (envelopes) {    if (envelopes.length === 1) return 1;    envelopes.sort((a, b) =&gt; {        if (a[0] !== b[0]) return a[0] - b[0];        else return b[1] - a[1];    });    let LISArr = [];    for (let [key, value] of envelopes) {        LISArr.push(value);    }    console.log(LISArr);    return LIS(LISArr);};function LIS(arr) {    let dp = [];    let maxAns = 0;    for (let i = 0; i &lt; arr.length; i++) {        dp[i] = 1;    }    for (let i = 1; i &lt; arr.length; i++) {        for (let j = i; j &gt;= 0; j--) {            if (arr[i] &gt; arr[j]) {                dp[i] = Math.max(dp[i], dp[j] + 1)            }            maxAns = Math.max(maxAns, dp[i]);        }    }    return maxAns;}</code></pre><h2 id="最长连续递增序列【快慢指针】"><a href="#最长连续递增序列【快慢指针】" class="headerlink" title="最长连续递增序列【快慢指针】"></a>最长连续递增序列【快慢指针】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/" target="_blank" rel="noopener">674 最长连续递增序列（简单）</a><sup>[13]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {number} */var findLengthOfLCIS = function (nums) {    if (nums.length === 0) return 0;    const n = nums.length;    let left = 0, right = 1;    let globalMaxLen = 1, maxLen = 1;    while (right &lt; n) {        if (nums[right] &gt; nums[left]) maxLen++;        else {            maxLen = 1;        }        left++;        right++;        globalMaxLen = Math.max(globalMaxLen, maxLen);    }    return globalMaxLen;};</code></pre><h2 id="最长连续序列-【哈希表】"><a href="#最长连续序列-【哈希表】" class="headerlink" title="最长连续序列 【哈希表】"></a>最长连续序列 【哈希表】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener">128 最长连续序列（困难）</a><sup>[14]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {number} */var longestConsecutive = function (nums) {    if (nums.length === 0) return 0;    const set = new Set(nums);    const n = nums.length;    let globalLongest = 1;    for (let i = 0; i &lt; n; i++) {        if (!set.has(nums[i] - 1)) {            let longest = 1;            let currentNum = nums[i];            while (set.has(currentNum + 1)) {                currentNum += 1;                longest++;            }            globalLongest = Math.max(globalLongest, longest);        }    }    return globalLongest;};</code></pre><h2 id="【面试真题】盛最多水的容器【哈希表】"><a href="#【面试真题】盛最多水的容器【哈希表】" class="headerlink" title="【面试真题】盛最多水的容器【哈希表】"></a>【面试真题】盛最多水的容器【哈希表】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">11 盛最多水的容器（中等）</a><sup>[15]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} height * @return {number} */var maxArea = function (height) {    let n = height.length;    let left = 0, right = n - 1;    let maxOpacity = 0;    while (left &lt; right) {        let res = Math.min(height[left], height[right]) * (right - left);        maxOpacity = Math.max(maxOpacity, res);        if (height[left] &lt; height[right]) left++        else right--;    }    return maxOpacity;};</code></pre><h2 id="寻找两个正序数组的中位数【双指针】"><a href="#寻找两个正序数组的中位数【双指针】" class="headerlink" title="寻找两个正序数组的中位数【双指针】"></a>寻找两个正序数组的中位数【双指针】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">4 寻找两个正序数组的中位数（困难）</a><sup>[16]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums1 * @param {number[]} nums2 * @return {number} */var findMedianSortedArrays = function (nums1, nums2) {    let m = nums1.length, n = nums2.length;    let i = 0, j = 0;    let newArr = [];    while (i &lt; m &amp;&amp; j &lt; n) {        if (nums1[i] &lt; nums2[j]) {            newArr.push(nums1[i++]);        } else {            newArr.push(nums2[j++]);        }    }    newArr = newArr.concat(i &lt; m ? nums1.slice(i) : nums2.slice(j));    const len = newArr.length;    console.log(newArr)    if (len % 2 === 0) {        return (newArr[len / 2] + newArr[len / 2 - 1]) / 2;    } else {        return newArr[Math.floor(len / 2)];    }};</code></pre><h2 id="删除有序数组中的重复项【快慢指针】"><a href="#删除有序数组中的重复项【快慢指针】" class="headerlink" title="删除有序数组中的重复项【快慢指针】"></a>删除有序数组中的重复项【快慢指针】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26 删除有序数组中的重复项（简单）</a><sup>[17]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {number} */var removeDuplicates = function (nums) {    if (nums.length &lt;= 1) return nums.length;    let lo = 0, hi = 0;    while (hi &lt; nums.length) {        while (nums[lo] === nums[hi] &amp;&amp; hi &lt; nums.length) hi++;        if (nums[lo] !== nums[hi] &amp;&amp; hi &lt; nums.length) {            lo++;            nums[lo] = nums[hi];        }        hi++;    }    return lo + 1;};</code></pre><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">695 岛屿的最大面积（中等）</a><sup>[18]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[][]} grid * @return {number} */let maxX, maxY;let visited;let globalMaxArea;var maxAreaOfIsland = function (grid) {    visited = new Set();    maxX = grid.length;    maxY = grid[0].length;    globalMaxArea = 0;    for (let i = 0; i &lt; maxX; i++) {        for (let j = 0; j &lt; maxY; j++) {            if (grid[i][j] === 1) {                visited.add(`(${i}, ${j})`);                globalMaxArea = Math.max(globalMaxArea, dfs(grid, i, j));            }            visited.clear();        }    }    return globalMaxArea;};function dfs(grid, x, y) {    let res = 1;    for (let i = -1; i &lt;= 1; i++) {        for (let j = -1; j &lt;= 1; j++) {            if (Math.abs(i) === Math.abs(j)) continue;            const newX = x + i;            const newY = y + j;            if (newX &gt;= maxX || newX &lt; 0 || newY &gt;= maxY || newY &lt; 0) continue;            if (visited.has(`(${newX}, ${newY})`)) continue;            visited.add(`(${newX}, ${newY})`);            const areaCnt = grid[newX][newY]            if (areaCnt === 1) {                const cnt = dfs(grid, newX, newY);                res += cnt;            }        }    }    return res;}</code></pre><h2 id="和为K的子数组【哈希表】"><a href="#和为K的子数组【哈希表】" class="headerlink" title="和为K的子数组【哈希表】"></a>和为K的子数组【哈希表】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560 和为K的子数组（中等）</a><sup>[19]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @param {number} k * @return {number} */var subarraySum = function (nums, k) {    let cnt = 0;    let sum0_i = 0, sum0_j = 0;    let map = new Map();    map.set(0, 1);    for (let i = 0; i &lt;= nums.length; i++) {        sum0_i += nums[i];        sum0_j = sum0_i - k;        console.log('map', sum0_j, map.get(sum0_j))        if (map.has(sum0_j)) {            cnt += map.get(sum0_j);        }        let sumCnt = map.get(sum0_i) || 0;        map.set(sum0_i, sumCnt + 1);    }    return cnt;};</code></pre><h2 id="nSum问题【哈希表】【系列】"><a href="#nSum问题【哈希表】【系列】" class="headerlink" title="nSum问题【哈希表】【系列】"></a>nSum问题【哈希表】【系列】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1 两数之和（简单）</a><sup>[20]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">167 两数之和 II - 输入有序数组（简单）</a><sup>[21]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15 三数之和（中等）</a><sup>[22]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/4sum/" target="_blank" rel="noopener">18 四数之和（中等）</a><sup>[23]</sup></p><p>受限于篇幅，这里只给出第一道题的代码模板，也是一面常考真题。</p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @param {number} target * @return {number[]} */var twoSum = function (nums, target) {    let map2 = new Map();    for (let i = 0; i &lt; nums.length; i++) {        map2.set(nums[i], i);    }    for (let i = 0; i &lt; nums.length; i++) {        if (map2.has(target - nums[i]) &amp;&amp; map2.get(target - nums[i]) !== i) return [i, map2.get(target - nums[i])]    }};</code></pre><h2 id="接雨水【暴力-备忘录优化】"><a href="#接雨水【暴力-备忘录优化】" class="headerlink" title="接雨水【暴力+备忘录优化】"></a>接雨水【暴力+备忘录优化】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">42 接雨水（困难）</a><sup>[24]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} height * @return {number} */var trap = function (height) {    let l_max = [], r_max = [];    let len = height.length;    let maxCapacity = 0;    for (let i = 0; i &lt; len; i++) {        l_max[i] = height[i];        r_max[i] = height[i];    }    for (let i = 1; i &lt; len; i++) {        l_max[i] = Math.max(l_max[i - 1], height[i]);    }    for (let j = len - 2; j &gt;= 0; j--) {        r_max[j] = Math.max(r_max[j + 1], height[j]);    }    for (let i = 0; i &lt; len; i++) {        maxCapacity += Math.min(l_max[i], r_max[i]) - height[i];    }    return maxCapacity;};</code></pre><h2 id="跳跃游戏【贪心算法】【系列】"><a href="#跳跃游戏【贪心算法】【系列】" class="headerlink" title="跳跃游戏【贪心算法】【系列】"></a>跳跃游戏【贪心算法】【系列】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">55 跳跃游戏（中等）</a><sup>[25]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/jump-game-ii/" target="_blank" rel="noopener">45 跳跃游戏 II（中等）</a><sup>[26]</sup></p><p>受限于篇幅，这里只给出第一道题的代码模板，也是一面常考真题。</p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {boolean} */var canJump = function(nums) {    let faster = 0;    for (let i = 0; i &lt; nums.length - 1; i++) {        faster = Math.max(faster, i + nums[i]);        if (faster &lt;= i) return false;    }    return faster &gt;= nums.length - 1;};</code></pre><h1 id="高频算法题系列：二叉树"><a href="#高频算法题系列：二叉树" class="headerlink" title="高频算法题系列：二叉树"></a>高频算法题系列：二叉树</h1><p>主要有以下几类高频考题：</p><ul><li>二叉树的最近公共祖先【简单】【二叉树】</li><li>二叉搜索树中的搜索【简单】【二叉树】</li><li>删除二叉搜索树中的节点【中等】【二叉树】</li><li>完全二叉树的节点个数【中等】【二叉树】</li><li>二叉树的锯齿形层序遍历【中等】【二叉树】</li></ul><h2 id="二叉树的最近公共祖先【二叉树】"><a href="#二叉树的最近公共祖先【二叉树】" class="headerlink" title="二叉树的最近公共祖先【二叉树】"></a>二叉树的最近公共祖先【二叉树】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">236 二叉树的最近公共祖先（简单）</a><sup>[27]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } *//** * @param {TreeNode} root * @param {TreeNode} p * @param {TreeNode} q * @return {TreeNode} */let visited;let parent;var lowestCommonAncestor = function (root, p, q) {  visited = new Set();  parent = new Map();  dfs(root);  while (p != null) {    visited.add(p.val);    p = parent.get(p.val);  }  while (q != null) {    if (visited.has(q.val)) {      return q;    }    q = parent.get(q.val);  }  return null;};function dfs(root) {  if (root.left != null) {    parent.set(root.left.val, root);    dfs(root.left);  }  if (root.right != null) {    parent.set(root.right.val, root);    dfs(root.right);  }}</code></pre><h2 id="二叉搜索树中的搜索【二叉树】"><a href="#二叉搜索树中的搜索【二叉树】" class="headerlink" title="二叉搜索树中的搜索【二叉树】"></a>二叉搜索树中的搜索【二叉树】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">700 二叉搜索树中的搜索（简单）</a><sup>[28]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } *//** * @param {TreeNode} root * @param {number} val * @return {TreeNode} */var searchBST = function (root, val) {    if (root == null) return null;    if (root.val === val) return root;    if (root.val &gt; val) {        return searchBST(root.left, val);    } else if (root.val &lt; val) {        return searchBST(root.right, val);    }};</code></pre><h2 id="删除二叉搜索树中的节点【二叉树】"><a href="#删除二叉搜索树中的节点【二叉树】" class="headerlink" title="删除二叉搜索树中的节点【二叉树】"></a>删除二叉搜索树中的节点【二叉树】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/" target="_blank" rel="noopener">450 删除二叉搜索树中的节点（中等）</a><sup>[29]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } *//** * @param {TreeNode} root * @param {number} key * @return {TreeNode} */var deleteNode = function (root, key) {    if (root == null) return null;    if (root.val === key) {        if (root.left == null &amp;&amp; root.right == null) return null;        if (root.left == null) return root.right;        if (root.right == null) return root.left;        if (root.left != null &amp;&amp; root.right != null) {            let target = getMinTreeMaxNode(root.left);            root.val = target.val;            root.left = deleteNode(root.left, target.val);        }    }    if (root.val &lt; key) {        root.right = deleteNode(root.right, key);    } else if (root.val &gt; key) {        root.left = deleteNode(root.left, key);    }    return root;};function getMinTreeMaxNode(root) {    if (root.right == null) return root;    return getMinTreeMaxNode(root.right);}</code></pre><h2 id="完全二叉树的节点个数【二叉树】"><a href="#完全二叉树的节点个数【二叉树】" class="headerlink" title="完全二叉树的节点个数【二叉树】"></a>完全二叉树的节点个数【二叉树】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">222 完全二叉树的节点个数（中等）</a><sup>[30]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } *//** * @param {TreeNode} root * @return {number} */var countNodes = function (root) {    if (root == null) return 0;    let l = root, r = root;    let lh = 0, rh = 0;    while (l != null) {        l = l.left;        lh++;    }    while (r != null) {        r = r.right;        rh++;    }    if (lh === rh) {        return Math.pow(2, lh) - 1;    }    return 1 + countNodes(root.left) + countNodes(root.right);};</code></pre><h2 id="二叉树的锯齿形层序遍历【二叉树】"><a href="#二叉树的锯齿形层序遍历【二叉树】" class="headerlink" title="二叉树的锯齿形层序遍历【二叉树】"></a>二叉树的锯齿形层序遍历【二叉树】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener">103 二叉树的锯齿形层序遍历（中等）</a><sup>[31]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } *//** * @param {TreeNode} root * @return {number[][]} */let res;var zigzagLevelOrder = function (root) {    if (root == null) return [];    res = [];    BFS(root, true);    return res;};function BFS(root, inOrder) {    let arr = [];    let resItem = [];    let node;    let stack1 = new Stack();    let stack2 = new Stack();    // 判断交换时机    let flag;    stack1.push(root);    res.push([root.val]);    inOrder = !inOrder;    while (!stack1.isEmpty() || !stack2.isEmpty()) {        if (stack1.isEmpty()) {            flag = 'stack1';        } else if (stack2.isEmpty()) {            flag = 'stack2';        }        // 决定取那个栈里面的元素        if (flag === 'stack2' &amp;&amp; !stack1.isEmpty()) node = stack1.pop();        else if (flag === 'stack1' &amp;&amp; !stack2.isEmpty()) node = stack2.pop();        if (inOrder) {            if (node.left) {                if (flag === 'stack1') {                    stack1.push(node.left);                } else {                    stack2.push(node.left);                }                resItem.push(node.left.val);            }            if (node.right) {                if (flag === 'stack1') {                    stack1.push(node.right);                } else {                    stack2.push(node.right);                }                resItem.push(node.right.val);            }        } else {            if (node.right) {                if (flag === 'stack1') {                    stack1.push(node.right);                } else {                    stack2.push(node.right);                }                resItem.push(node.right.val);            }            if (node.left) {                if (flag === 'stack1') {                    stack1.push(node.left);                } else {                    stack2.push(node.left);                }                resItem.push(node.left.val);            }        }        // 判断下次翻转的时机        if ((flag === 'stack2' &amp;&amp; stack1.isEmpty()) || (flag === 'stack1' &amp;&amp; stack2.isEmpty())) {            inOrder = !inOrder;            // 需要翻转了，就加一轮值            if (resItem.length &gt; 0) {                res.push(resItem);            }            resItem = [];        }    }}class Stack {    constructor() {        this.count = 0;        this.items = [];    }    push(element) {        this.items[this.count] = element;        this.count++;    }    pop() {        if (this.isEmpty()) return undefined;        const element = this.items[this.count - 1];        delete this.items[this.count - 1];        this.count--;        return element;    }    size() {        return this.count;    }    isEmpty() {        return this.size() === 0;    }}</code></pre><h1 id="高频算法题系列：排序算法【🔥】"><a href="#高频算法题系列：排序算法【🔥】" class="headerlink" title="高频算法题系列：排序算法【🔥】"></a>高频算法题系列：排序算法【🔥】</h1><p>主要有以下几类高频考题：</p><ul><li>用最少数量的箭引爆气球【中等】【排序】</li><li>合并区间【中等】【排序算法+区间问题】【面试真题】</li></ul><h2 id="用最少数量的箭引爆气球【排序算法】"><a href="#用最少数量的箭引爆气球【排序算法】" class="headerlink" title="用最少数量的箭引爆气球【排序算法】"></a>用最少数量的箭引爆气球【排序算法】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">452 用最少数量的箭引爆气球（中等）</a><sup>[32]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[][]} points * @return {number} */var findMinArrowShots = function (points) {    if (points.length === 0) return 0;    points.sort((a, b) =&gt; a[1] - b[1]);    let cnt = 1;    let resArr = [points[0]];    let curr, last;    for (let i = 1; i &lt; points.length; i++) {        curr = points[i];        last = resArr[resArr.length - 1];        if (curr[0] &gt; last[1]) {            resArr.push(curr);            cnt++;        }    }    return cnt;};</code></pre><h2 id="合并区间【排序算法-区间问题】"><a href="#合并区间【排序算法-区间问题】" class="headerlink" title="合并区间【排序算法+区间问题】"></a>合并区间【排序算法+区间问题】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">56 合并区间（中等）</a><sup>[33]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[][]} intervals * @return {number[][]} */var merge = function (intervals) {    if (intervals.length === 0) return [];    intervals.sort((a, b) =&gt; a[0] - b[0]);    let mergeArr = [intervals[0]];    let last, curr;    for (let j = 1; j &lt; intervals.length; j++) {        last = mergeArr[mergeArr.length - 1];        curr = intervals[j];        if (last[1] &gt;= curr[0]) {            last[1] = Math.max(curr[1], last[1]);        } else {            mergeArr.push(curr);        }    }    return mergeArr;};</code></pre><h1 id="高频算法题系列：二分查找"><a href="#高频算法题系列：二分查找" class="headerlink" title="高频算法题系列：二分查找"></a>高频算法题系列：二分查找</h1><p>主要有以下几类高频考题：</p><ul><li>寻找两个正序数组的中位数【困难】【二分查找】</li><li>判断子序列【简单】【二分查找】</li><li>在排序数组中查找元素的第一个和最后一个位置【中等】【二分查找】</li></ul><h2 id="寻找两个正序数组的中位数【二分查找】"><a href="#寻找两个正序数组的中位数【二分查找】" class="headerlink" title="寻找两个正序数组的中位数【二分查找】"></a>寻找两个正序数组的中位数【二分查找】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">4 寻找两个正序数组的中位数（困难）</a><sup>[34]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums1 * @param {number[]} nums2 * @return {number} */var findMedianSortedArrays = function (nums1, nums2) {    let m = nums1.length, n = nums2.length;    let i = 0, j = 0;    let newArr = [];    while (i &lt; m &amp;&amp; j &lt; n) {        if (nums1[i] &lt; nums2[j]) {            newArr.push(nums1[i++]);        } else {            newArr.push(nums2[j++]);        }    }    newArr = newArr.concat(i &lt; m ? nums1.slice(i) : nums2.slice(j));    const len = newArr.length;    console.log(newArr)    if (len % 2 === 0) {        return (newArr[len / 2] + newArr[len / 2 - 1]) / 2;    } else {        return newArr[Math.floor(len / 2)];    }};</code></pre><h2 id="判断子序列【二分查找】"><a href="#判断子序列【二分查找】" class="headerlink" title="判断子序列【二分查找】"></a>判断子序列【二分查找】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">392 判断子序列（简单）</a><sup>[35]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} s * @param {string} t * @return {boolean} */var isSubsequence = function (s, t) {    let hash = {};    for (let i = 0; i &lt; t.length; i++) {        if (!hash[t[i]]) hash[t[i]] = [];        hash[t[i]].push(i);    }    let lastMaxIndex = 0;    for (let i = 0; i &lt; s.length; i++) {        if (hash[s[i]]) {            const index = binarySearch(hash[s[i]], lastMaxIndex);            console.log('index', index, hash[s[i]]);            if (index === -1) return false;            lastMaxIndex = hash[s[i]][index] + 1;        } else return false;    }    return true;};function binarySearch(array, targetIndex) {    let left = 0, right = array.length;    while (left &lt; right) {        let mid = left + Math.floor((right - left) / 2);        if (array[mid] &gt;= targetIndex) {            right = mid;        } else if (array[mid] &lt; targetIndex) {            left = mid + 1;        }    }    if (left &gt;= array.length || array[left] &lt; targetIndex) return -1;    return left;}</code></pre><h2 id="在排序数组中查找元素的第一个和最后一个位置【二分搜索】"><a href="#在排序数组中查找元素的第一个和最后一个位置【二分搜索】" class="headerlink" title="在排序数组中查找元素的第一个和最后一个位置【二分搜索】"></a>在排序数组中查找元素的第一个和最后一个位置【二分搜索】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34 在排序数组中查找元素的第一个和最后一个位置（中等）</a><sup>[36]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @param {number} target * @return {number[]} */var searchRange = function (nums, target) {    const left = leftBound(nums, target);    const right = rightBound(nums, target);    return [left, right];};function leftBound(nums, target) {    let left = 0;    let right = nums.length - 1;    while (left &lt;= right) {        let mid = Math.floor(left + (right - left) / 2);        if (nums[mid] === target) {            right = mid - 1;        } else if (nums[mid] &lt; target) {            left = mid + 1;        } else if (nums[mid] &gt; target) {            right = mid - 1;        }    }    if (left &gt;= nums.length || nums[left] !== target) {        return -1;    }    return left;}function rightBound(nums, target) {    let left = 0;    let right = nums.length - 1;    while (left &lt;= right) {        let mid = Math.floor(left + (right - left) / 2);        if (nums[mid] === target) {            left = mid + 1;        } else if (nums[mid] &lt; target) {            left = mid + 1;        } else if (nums[mid] &gt; target) {            right = mid - 1;        }    }    if (right &lt; 0 || nums[right] !== target) {        return -1;    }    return right;}</code></pre><h1 id="高频算法题系列：动态规划【🔥】"><a href="#高频算法题系列：动态规划【🔥】" class="headerlink" title="高频算法题系列：动态规划【🔥】"></a>高频算法题系列：动态规划【🔥】</h1><p>主要有以下几类高频考题：</p><ul><li>最长递增子序列【中等】【动态规划】</li><li>零钱兑换【中等】【动态规划】【面试真题】</li><li>最长公共子序列 【中等】【动态规划】【面试真题】</li><li>编辑距离 【困难】【动态规划】</li><li>最长回文子序列【中等】【动态规划】【面试真题】</li><li>最大子序和【简单】【动态规划】【面试真题】</li><li>买卖股票的最佳时机系列【系列】【动态规划】【面试真题】</li></ul><h2 id="最长递增子序列【动态规划】"><a href="#最长递增子序列【动态规划】" class="headerlink" title="最长递增子序列【动态规划】"></a>最长递增子序列【动态规划】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">300 最长递增子序列（中等）</a><sup>[37]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {number} */var lengthOfLIS = function (nums) {    let maxLen = 0, n = nums.length;    let dp = [];    for (let i = 0; i &lt; n; i++) {        dp[i] = 1;    }    for (let i = 0; i &lt; n; i++) {        for (let j = 0; j &lt; i; j++) {            if (nums[i] &gt; nums[j]) {                dp[i] = Math.max(dp[i], dp[j] + 1);            }        }        maxLen = Math.max(maxLen, dp[i]);    }    return maxLen;};</code></pre><h2 id="【面试真题】-零钱兑换【动态规划】"><a href="#【面试真题】-零钱兑换【动态规划】" class="headerlink" title="【面试真题】 零钱兑换【动态规划】"></a>【面试真题】 零钱兑换【动态规划】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">322 零钱兑换（中等）</a><sup>[38]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} coins * @param {number} amount * @return {number} */var coinChange = function (coins, amount) {    if (amount === 0) return 0;    let dp = [];    for (let i = 0; i &lt;= amount; i++) {        dp[i] = amount + 1;    }    dp[0] = 0;    for (let i = 0; i &lt;= amount; i++) {        for (let j = 0; j &lt; coins.length; j++) {            if (i &gt;= coins[j]) {                dp[i] = Math.min(dp[i - coins[j]] + 1, dp[i])            }        }    }    return dp[amount] === amount + 1 ? -1 : dp[amount];};</code></pre><h2 id="【面试真题】-最长公共子序列【动态规划】"><a href="#【面试真题】-最长公共子序列【动态规划】" class="headerlink" title="【面试真题】 最长公共子序列【动态规划】"></a>【面试真题】 最长公共子序列【动态规划】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">1143 最长公共子序列（中等）</a><sup>[39]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} text1 * @param {string} text2 * @return {number} */var longestCommonSubsequence = function (text1, text2) {    let n1 = text1.length, n2 = text2.length;    let dp = [];    for (let i = -1; i &lt; n1; i++) {        dp[i] = [];        for (let j = -1; j &lt; n2; j++) {            dp[i][j] = 0;        }    }    for (let i = 0; i &lt; n1; i++) {        for (let j = 0; j &lt; n2; j++) {            if (text1[i] === text2[j]) {                dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);            } else {                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1])            }        }    }    return dp[n1 - 1][n2 - 1];};</code></pre><h2 id="编辑距离【动态规划】"><a href="#编辑距离【动态规划】" class="headerlink" title="编辑距离【动态规划】"></a>编辑距离【动态规划】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">72 编辑距离（困难）</a><sup>[40]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} word1 * @param {string} word2 * @return {number} */var minDistance = function (word1, word2) {    let len1 = word1.length, len2 = word2.length;    let dp = [];    for (let i = 0; i &lt;= len1; i++) {        dp[i] = [];        for (let j = 0; j &lt;= len2; j++) {            dp[i][j] = 0;            if (i === 0) {                dp[i][j] = j;            }            if (j === 0) {                dp[i][j] = i;            }        }    }    for (let i = 1; i &lt;= len1; i++) {        for (let j = 1; j &lt;= len2; j++) {            if (word1[i - 1] === word2[j - 1]) {                dp[i][j] = dp[i - 1][j - 1];            } else {                dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1);            }        }    }    return dp[len1][len2];};</code></pre><h2 id="【面试真题】最长回文子序列【动态规划】"><a href="#【面试真题】最长回文子序列【动态规划】" class="headerlink" title="【面试真题】最长回文子序列【动态规划】"></a>【面试真题】最长回文子序列【动态规划】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">516 最长回文子序列（中等）</a><sup>[41]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} s * @return {number} */var longestPalindromeSubseq = function (s) {    let dp = [];    for (let i = 0; i &lt; s.length; i++) {        dp[i] = [];        for (let j = 0; j &lt; s.length; j++) {            dp[i][j] = 0;        }        dp[i][i] = 1;    }    for (let i = s.length - 1; i &gt;= 0; i--) {        for (let j = i + 1; j &lt; s.length; j++) {            if (s[i] === s[j]) {                dp[i][j] = dp[i + 1][j - 1] + 2;            } else {                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);            }        }    }    return dp[0][s.length - 1];};</code></pre><h2 id="【面试真题】最大子序和【动态规划】"><a href="#【面试真题】最大子序和【动态规划】" class="headerlink" title="【面试真题】最大子序和【动态规划】"></a>【面试真题】最大子序和【动态规划】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53 最大子序和（简单）</a><sup>[42]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {number} */var maxSubArray = function (nums) {    let maxSum = -Infinity;    let dp = [], n = nums.length;    for (let i = -1; i &lt; n; i++) {        dp[i] = 0;    }    for (let i = 0; i &lt; n; i++) {        dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]);        maxSum = Math.max(maxSum, dp[i]);    }    return maxSum;};</code></pre><h2 id="【面试真题】买卖股票的最佳时机【动态规划】"><a href="#【面试真题】买卖股票的最佳时机【动态规划】" class="headerlink" title="【面试真题】买卖股票的最佳时机【动态规划】"></a>【面试真题】买卖股票的最佳时机【动态规划】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121 买卖股票的最佳时机（简单）</a><sup>[43]</sup>【面试真题】</p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">122 买卖股票的最佳时机 II（简单）</a><sup>[44]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">123 买卖股票的最佳时机 III（困难）</a><sup>[45]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">188 买卖股票的最佳时机IV（困难）</a><sup>[46]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">309 买卖股票的最佳时机含冷冻期（中等）</a><sup>[47]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">714 买卖股票的最佳时机含手续费（中等）</a><sup>[48]</sup></p><p>受限于篇幅，这里只给出第一道题的代码模板，也是一面常考真题，笔者在面试字节跳动时就遇到过。</p><p>题解</p><pre><code class="javascript">/** * @param {number[]} prices * @return {number} */var maxProfit = function (prices) {    let dp = [];    for (let i = -1; i &lt; prices.length; i++) {        dp[i] = []        for (let j = 0; j &lt;= 1; j++) {            dp[i][j] = [];            dp[i][j][0] = 0;            dp[i][j][1] = 0;            if (i === -1) {                dp[i][j][1] = -Infinity;            }            if (j === 0) {                dp[i][j][1] = -Infinity;            }            if (j === -1) {                dp[i][j][1] = -Infinity;            }        }    }    for (let i = 0; i &lt; prices.length; i++) {        for (let j = 1; j &lt;= 1; j++) {            dp[i][j][0] = Math.max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i]);            dp[i][j][1] = Math.max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i]);        }    }    return dp[prices.length - 1][1][0];};</code></pre><h1 id="高频算法题系列：BFS"><a href="#高频算法题系列：BFS" class="headerlink" title="高频算法题系列：BFS"></a>高频算法题系列：BFS</h1><p>主要有以下几类高频考题：</p><ul><li>打开转盘锁【中等】【BFS】</li><li>二叉树的最小深度【简单】【BFS】</li></ul><h2 id="打开转盘锁【BFS】"><a href="#打开转盘锁【BFS】" class="headerlink" title="打开转盘锁【BFS】"></a>打开转盘锁【BFS】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/open-the-lock/" target="_blank" rel="noopener">752 打开转盘锁（中等）</a><sup>[49]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string[]} deadends * @param {string} target * @return {number} */var openLock = function (deadends, target) {    let queue = new Queue();    let visited = new Set();    let step = 0;    queue.push('0000');    visited.add('0000');    while (!queue.isEmpty()) {        let size = queue.size();        for (let i = 0; i &lt; size; i++) {            let str = queue.pop();            if (deadends.includes(str)) continue;            if (target === str) {                return step;            }            for (let j = 0; j &lt; 4; j++) {                let plusStr = plusOne(str, j);                let minusStr = minusOne(str, j);                if (!visited.has(plusStr)) {                    queue.push(plusStr);                    visited.add(plusStr)                }                if (!visited.has(minusStr)) {                    queue.push(minusStr);                    visited.add(minusStr)                }            }        }        step++;    }    return -1;};function plusOne(str, index) {    let strArr = str.split('');    if (strArr[index] === '9') {        strArr[index] = '0'    } else {        strArr[index] = (Number(strArr[index]) + 1).toString()    }    return strArr.join('');}function minusOne(str, index) {    let strArr = str.split('');    if (strArr[index] === '0') {        strArr[index] = '9'    } else {        strArr[index] = (Number(strArr[index]) - 1).toString()    }    return strArr.join('');}class Queue {    constructor() {        this.items = [];        this.count = 0;        this.lowerCount = 0;    }    push(elem) {        this.items[this.count++] = elem;    }    pop() {        if (this.isEmpty()) {            return;        }        const elem = this.items[this.lowerCount];        delete this.items[this.lowerCount];        this.lowerCount++;        return elem;    }    isEmpty() {        if (this.size() === 0) return true;        return false;    }    size() {        return this.count - this.lowerCount;    }}</code></pre><h2 id="二叉树的最小深度【BFS】"><a href="#二叉树的最小深度【BFS】" class="headerlink" title="二叉树的最小深度【BFS】"></a>二叉树的最小深度【BFS】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener">111 二叉树的最小深度（简单）</a><sup>[50]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } *//** * @param {TreeNode} root * @return {number} */var minDepth = function (root) {    if (root == null) return 0;    let depth = 1;    let queue = new Queue();    queue.push(root);    while (!queue.isEmpty()) {        let size = queue.size();        for (let i = 0; i &lt; size; i++) {            const node = queue.pop();            if (node.left == null &amp;&amp; node.right == null) return depth;            if (node.left) {                queue.push(node.left);            }            if (node.right) {                queue.push(node.right);            }        }        depth++;    }    return depth;};class Queue {    constructor() {        this.items = [];        this.count = 0;        this.lowerCount = 0;    }    push(elem) {        this.items[this.count++] = elem;    }    pop() {        if (this.isEmpty()) {            return;        }        const elem = this.items[this.lowerCount];        delete this.items[this.lowerCount];        this.lowerCount++;        return elem;    }    isEmpty() {        if (this.size() === 0) return true;        return false;    }    size() {        return this.count - this.lowerCount;    }}</code></pre><h1 id="高频算法题系列：栈【🔥】"><a href="#高频算法题系列：栈【🔥】" class="headerlink" title="高频算法题系列：栈【🔥】"></a>高频算法题系列：栈【🔥】</h1><p>主要有以下几类高频考题：</p><ul><li>最小栈【简单】【栈】</li><li>有效的括号【中等】【栈】【面试真题】</li><li>简化路径【中等】【栈】</li><li>下一个更大元素 【系列】【栈】</li></ul><h2 id="最小栈【栈】"><a href="#最小栈【栈】" class="headerlink" title="最小栈【栈】"></a>最小栈【栈】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/min-stack/submissions/" target="_blank" rel="noopener">155 最小栈（简单）</a><sup>[51]</sup></p><p>题解</p><pre><code class="javascript">/** * initialize your data structure here. */var MinStack = function () {    this.stack = [];    this.minArr = [];    this.count = 0;    this.min = Number.MAX_SAFE_INTEGER;};/** * @param {number} x * @return {void} */MinStack.prototype.push = function (x) {    this.min = Math.min(this.min, x);    this.minArr[this.count] = this.min;    this.stack[this.count] = x;    this.count++;};/** * @return {void} */MinStack.prototype.pop = function () {    const element = this.stack[this.count - 1];    if (this.count - 2 &gt;= 0) this.min = this.minArr[this.count - 2];    else this.min = Number.MAX_SAFE_INTEGER;    delete this.stack[this.count - 1];    delete this.minArr[this.count - 1];    this.count--;    return element;};/** * @return {number} */MinStack.prototype.top = function () {    if (this.count &gt;= 1) {        return this.stack[this.count - 1];    }    return null;};/** * @return {number} */MinStack.prototype.getMin = function () {    const element = this.minArr[this.count - 1];    return element;};/** * Your MinStack object will be instantiated and called as such: * var obj = new MinStack() * obj.push(x) * obj.pop() * var param_3 = obj.top() * var param_4 = obj.getMin() */</code></pre><h2 id="【系列】下一个更大元素-【栈】"><a href="#【系列】下一个更大元素-【栈】" class="headerlink" title="【系列】下一个更大元素 【栈】"></a>【系列】下一个更大元素 【栈】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/next-greater-element-i/" target="_blank" rel="noopener">496 下一个更大元素 I（简单）</a><sup>[52]</sup></p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/next-greater-element-ii/" target="_blank" rel="noopener">503 下一个更大元素 II（中等）</a><sup>[53]</sup></p><p>受限于篇幅，这里只给出第一道题的代码模板</p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {number[]} */var nextGreaterElements = function (nums) {    let ans = [];    let stack = new Stack();    const n = nums.length;    for (let i = 2 * n - 1; i &gt;= 0; i--) {        while (!stack.isEmpty() &amp;&amp; stack.top() &lt;= nums[i % n]) {            stack.pop();        }        ans[i % n] = stack.isEmpty() ? -1 : stack.top();        stack.push(nums[i % n]);    }    return ans;};class Stack {    constructor() {        this.count = 0;        this.items = [];    }    top() {        if (this.isEmpty()) return undefined;        return this.items[this.count - 1];    }    push(element) {        this.items[this.count] = element;        this.count++;    }    pop() {        if (this.isEmpty()) return undefined;        const element = this.items[this.count - 1];        delete this.items[this.count - 1];        this.count--;        return element;    }    isEmpty() {        return this.size() === 0;    }    size() {        return this.count;    }}</code></pre><p>##【面试真题】有效的括号【栈】</p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">20 有效的括号（中等）</a><sup>[54]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} s * @return {boolean} */var isValid = function (s) {          if (s.length === 0) {            return true;          }          if (s.length % 2 !== 0) {            return false;          }          let map = {            ')': '(',            ']': '[',            '}': '{',          };          let left = ['(', '[', '{'];          let right = [')', ']', '}'];          let stack = new Stack();          for (let i = 0; i &lt; s.length; i++) {            if (!right.includes(s[i])) {              stack.push(s[i]);            } else {              const matchStr = map[s[i]];              while (!stack.isEmpty()) {                const element = stack.pop();                if (left.includes(element) &amp;&amp; matchStr !== element) return false;                if (element === matchStr) break;              }            }          }          return stack.isEmpty();        };class Stack {  constructor() {    this.count = 0;    this.items = [];  }  push(element) {    this.items[this.count] = element;    this.count++;  }  pop() {    if (this.isEmpty()) return undefined;    const element = this.items[this.count - 1];    delete this.items[this.count - 1];    this.count--;    return element;  }  isEmpty() {    return this.size() === 0;  }  size() {    return this.count;  }}</code></pre><h2 id="简化路径【栈】"><a href="#简化路径【栈】" class="headerlink" title="简化路径【栈】"></a>简化路径【栈】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/simplify-path/" target="_blank" rel="noopener">71 简化路径（中等）</a><sup>[55]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} path * @return {string} */var simplifyPath = function (path) {    let newPath = path.split('/');    newPath = newPath.filter(item =&gt; item !== "");    const stack = new Stack();    for (let s of newPath) {        if (s === '..') stack.pop();        else if (s !== '.') stack.push(s);    }    if (stack.isEmpty()) return '/';    let str = '';    while (!stack.isEmpty()) {        const element = stack.pop();        str = '/' + element + str;    }    return str;};function handleBack(stack, tag, num) {    if (!stack.isEmpty()) return num;    const element = stack.pop();    if (element === '..') return handleBack(stack, tag, num + 1);    else {        stack.push(element);        return num;    }}class Stack {    constructor() {        this.count = 0;        this.items = [];    }    push(element) {        this.items[this.count] = element;        this.count++;    }    pop() {        if (this.isEmpty()) return undefined;        const element = this.items[this.count - 1];        delete this.items[this.count - 1];        this.count--;        return element;    }    size() {        return this.count;    }    isEmpty() {        return this.size() === 0;    }}</code></pre><h1 id="高频算法题系列：DFS【🔥】"><a href="#高频算法题系列：DFS【🔥】" class="headerlink" title="高频算法题系列：DFS【🔥】"></a>高频算法题系列：DFS【🔥】</h1><p>主要有以下几类高频考题：</p><ul><li>岛屿的最大面积【中等】【DFS】</li><li>相同的树【简单】【DFS】</li></ul><h2 id="岛屿的最大面积【DFS】"><a href="#岛屿的最大面积【DFS】" class="headerlink" title="岛屿的最大面积【DFS】"></a>岛屿的最大面积【DFS】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">695 岛屿的最大面积（中等）</a><sup>[56]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[][]} grid * @return {number} */let maxX, maxY;let visited;let globalMaxArea;var maxAreaOfIsland = function (grid) {    visited = new Set();    maxX = grid.length;    maxY = grid[0].length;    globalMaxArea = 0;    for (let i = 0; i &lt; maxX; i++) {        for (let j = 0; j &lt; maxY; j++) {            if (grid[i][j] === 1) {                visited.add(`(${i}, ${j})`);                globalMaxArea = Math.max(globalMaxArea, dfs(grid, i, j));            }            visited.clear();        }    }    return globalMaxArea;};function dfs(grid, x, y) {    let res = 1;    for (let i = -1; i &lt;= 1; i++) {        for (let j = -1; j &lt;= 1; j++) {            if (Math.abs(i) === Math.abs(j)) continue;            const newX = x + i;            const newY = y + j;            if (newX &gt;= maxX || newX &lt; 0 || newY &gt;= maxY || newY &lt; 0) continue;            if (visited.has(`(${newX}, ${newY})`)) continue;            visited.add(`(${newX}, ${newY})`);            const areaCnt = grid[newX][newY]            if (areaCnt === 1) {                const cnt = dfs(grid, newX, newY);                res += cnt;            }        }    }    return res;}</code></pre><h2 id="相同的树【DFS】"><a href="#相同的树【DFS】" class="headerlink" title="相同的树【DFS】"></a>相同的树【DFS】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">100 相同的树（简单）</a><sup>[57]</sup></p><p>题解</p><pre><code class="javascript">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } *//** * @param {TreeNode} p * @param {TreeNode} q * @return {boolean} */var isSameTree = function (p, q) {    if (p == null &amp;&amp; q == null) return true;    if (p == null || q == null) return false;    if (p.val !== q.val) return false;    return isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);};</code></pre><h1 id="高频算法题系列：回溯算法【🔥】"><a href="#高频算法题系列：回溯算法【🔥】" class="headerlink" title="高频算法题系列：回溯算法【🔥】"></a>高频算法题系列：回溯算法【🔥】</h1><p>主要有以下几类高频考题：</p><ul><li>N皇后【困难】【回溯算法】【面试真题】</li><li>全排列【中等】【回溯算法】</li><li>括号生成【中等】【回溯算法】</li><li>复原 IP 地址【中等】【回溯算法】</li><li>子集 【简单】【回溯算法】</li></ul><h2 id="【面试真题】N皇后【回溯算法】"><a href="#【面试真题】N皇后【回溯算法】" class="headerlink" title="【面试真题】N皇后【回溯算法】"></a>【面试真题】N皇后【回溯算法】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/n-queens/" target="_blank" rel="noopener">51 N皇后（困难）</a><sup>[58]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number} n * @return {string[][]} */let result = [];var solveNQueens = function (n) {    result = [];    let board = [];    for (let i = 0; i &lt; n; i++) {        board[i] = [];        for (let j = 0; j &lt; n; j++) {            board[i][j] = '.'        }    }    backtrack(0, board, n);    return result;};function deepClone(board) {    let res = [];    for (let i = 0; i &lt; board.length; i++) {        res.push(board[i].join(''));    }    return res;}function backtrack(row, board, n) {    if (row === n) {        result.push(deepClone(board));        return;    }    for (let j = 0; j &lt; n; j++) {        if (checkInValid(board, row, j, n)) continue;        board[row][j] = 'Q';        backtrack(row + 1, board, n);        board[row][j] = '.';    }}function checkInValid(board, row, column, n) {    // 行    for (let i = 0; i &lt; n; i++) {        if (board[i][column] === 'Q') return true;    }    for (let i = row - 1, j = column + 1; i &gt;= 0 &amp;&amp; j &lt; n; i--, j++) {        if (board[i][j] === 'Q') return true;    }    for (let i = row - 1, j = column - 1; i &gt;= 0 &amp;&amp; j &gt;= 0; i--, j--) {        if (board[i][j] === 'Q') return true;    }    return false;}</code></pre><h2 id="全排列【回溯算法】"><a href="#全排列【回溯算法】" class="headerlink" title="全排列【回溯算法】"></a>全排列【回溯算法】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46 全排列（中等）</a><sup>[59]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {number[][]} */let results = [];var permute = function (nums) {    results = [];    backtrack(nums, []);    return results;};function backtrack(nums, track) {    if (nums.length === track.length) {        results.push(track.slice());        return;    }    for (let i = 0; i &lt; nums.length; i++) {        if (track.includes(nums[i])) continue;        track.push(nums[i]);        backtrack(nums, track);        track.pop();    }}</code></pre><h2 id="括号生成【回溯算法】"><a href="#括号生成【回溯算法】" class="headerlink" title="括号生成【回溯算法】"></a>括号生成【回溯算法】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22 括号生成（中等）</a><sup>[60]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number} n * @return {string[]} */var generateParenthesis = function (n) {    let validRes = [];    backtrack(n * 2, validRes, '');    return validRes;};function backtrack(len, validRes, bracket) {    if (bracket.length === len) {        if (isValidCombination(bracket)) {            validRes.push(bracket);        }        return;    }    for (let str of ['(', ')']) {        bracket += str;        backtrack(len, validRes, bracket);        bracket = bracket.slice(0, bracket.length - 1);    }}function isValidCombination(bracket) {    let stack = new Stack();    for (let i = 0; i &lt; bracket.length; i++) {        const str = bracket[i];        if (str === '(') {            stack.push(str);        } else if (str === ')') {            const top = stack.pop();            if (top !== '(') return false;        }    }    return stack.isEmpty();}class Stack {    constructor() {        this.count = 0;        this.items = [];    }    push(element) {        this.items[this.count] = element;        this.count++;    }    pop() {        if (this.isEmpty()) return;        const element = this.items[this.count - 1];        delete this.items[this.count - 1];        this.count--;        return element;    }    size() {        return this.count;    }    isEmpty() {        return this.size() === 0;    }}</code></pre><h2 id="复原-IP-地址【回溯算法】"><a href="#复原-IP-地址【回溯算法】" class="headerlink" title="复原 IP 地址【回溯算法】"></a>复原 IP 地址【回溯算法】</h2><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/restore-ip-addresses/" target="_blank" rel="noopener">93 复原 IP 地址（中等）</a><sup>[61]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {string} s * @return {string[]} */var restoreIpAddresses = function (s) {    if (s.length &gt; 12) return [];    let res = [];    const track = [];    backtrack(s, track, res);    return res;};function backtrack(s, track, res) {    if (track.length === 4 &amp;&amp; s.length === 0) {        res.push(track.join('.'));        return;    }    let len = s.length &gt;= 3 ? 3 : s.length;    for (let i = 0; i &lt; len; i++) {        const c = s.slice(0, i + 1);        if (parseInt(c) &gt; 255) continue;        if (i &gt;= 1 &amp;&amp; parseInt(c) &lt; parseInt((1 + '0'.repeat(i)))) continue;        track.push(c);        backtrack(s.slice(i + 1), track, res);        track.pop();    }}</code></pre><p>##　子集【回溯算法】</p><p>👉 【LeetCode 直通车】：<a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">78 子集（中等）</a><sup>[62]</sup></p><p>题解</p><pre><code class="javascript">/** * @param {number[]} nums * @return {number[][]} */var subsets = function (nums) {    if (nums.length === 0) return [[]];    let resArr = [];    backtrack(nums, 0, [], resArr);    return resArr;};function backtrack(nums, index, subArr, resArr) {    if (Array.isArray(subArr)) {        resArr.push(subArr.slice());    }    if (index === nums.length) {        return;    }    for (let i = index; i &lt; nums.length; i++) {        subArr.push(nums[i]);        backtrack(nums, i + 1, subArr, resArr);        subArr.pop(nums[i]);    }}</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]<br>【LeetCode 直通车】：234 回文链表（简单）: <a href="https://leetcode-cn.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-linked-list/</a></p><p>[2]<br>【LeetCode 直通车】：206 反转链表（简单）: <a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/</a></p><p>[3]<br>【LeetCode 直通车】：23 合并K个升序链表（困难）: <a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists/</a></p><p>[4]<br>【LeetCode 直通车】：25 K 个一组翻转链表（困难）: <a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group/</a></p><p>[5]<br>【LeetCode 直通车】：141 环形链表（简单）: <a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle/</a></p><p>[6]<br>【LeetCode 直通车】：148 排序链表（中等）: <a href="https://leetcode-cn.com/problems/sort-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-list/</a></p><p>[7]<br>【LeetCode 直通车】：160 相交链表（简单）: <a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p><p>[8]<br>【LeetCode 直通车】：5 最长回文子串（中等）: <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p><p>[9]<br>【LeetCode 直通车】：14 最长公共前缀（简单）: <a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix/</a></p><p>[10]<br>【LeetCode 直通车】：3 无重复字符的最长子串（中等）: <a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p><p>[11]<br>【LeetCode 直通车】：76 最小覆盖子串（困难）: <a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-window-substring/</a></p><p>[12]<br>【LeetCode 直通车】：354 俄罗斯套娃信封问题（困难）: <a href="https://leetcode-cn.com/problems/russian-doll-envelopes/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/russian-doll-envelopes/</a></p><p>[13]<br>【LeetCode 直通车】：674 最长连续递增序列（简单）: <a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/</a></p><p>[14]<br>【LeetCode 直通车】：128 最长连续序列（困难）: <a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-consecutive-sequence/</a></p><p>[15]<br>【LeetCode 直通车】：11 盛最多水的容器（中等）: <a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water/</a></p><p>[16]<br>【LeetCode 直通车】：4 寻找两个正序数组的中位数（困难）: <a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a></p><p>[17]<br>【LeetCode 直通车】：26 删除有序数组中的重复项（简单）: <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p><p>[18]<br>【LeetCode 直通车】：695 岛屿的最大面积（中等）: <a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/max-area-of-island/</a></p><p>[19]<br>【LeetCode 直通车】：560 和为K的子数组（中等）: <a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subarray-sum-equals-k/</a></p><p>[20]<br>【LeetCode 直通车】：1 两数之和（简单）: <a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/</a></p><p>[21]<br>【LeetCode 直通车】：167 两数之和 II - 输入有序数组（简单）: <a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/</a></p><p>[22]<br>【LeetCode 直通车】：15 三数之和（中等）: <a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum/</a></p><p>[23]<br>【LeetCode 直通车】：18 四数之和（中等）: <a href="https://leetcode-cn.com/problems/4sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/4sum/</a></p><p>[24]<br>【LeetCode 直通车】：42 接雨水（困难）: <a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/trapping-rain-water/</a></p><p>[25]<br>【LeetCode 直通车】：55 跳跃游戏（中等）: <a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/jump-game/</a></p><p>[26]<br>【LeetCode 直通车】：45 跳跃游戏 II（中等）: <a href="https://leetcode-cn.com/problems/jump-game-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/jump-game-ii/</a></p><p>[27]<br>【LeetCode 直通车】：236 二叉树的最近公共祖先（简单）: <a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/</a></p><p>[28]<br>【LeetCode 直通车】：700 二叉搜索树中的搜索（简单）: <a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-in-a-binary-search-tree/</a></p><p>[29]<br>【LeetCode 直通车】：450 删除二叉搜索树中的节点（中等）: <a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delete-node-in-a-bst/</a></p><p>[30]<br>【LeetCode 直通车】：222 完全二叉树的节点个数（中等）: <a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-complete-tree-nodes/</a></p><p>[31]<br>【LeetCode 直通车】：103 二叉树的锯齿形层序遍历（中等）: <a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/</a></p><p>[32]<br>【LeetCode 直通车】：452 用最少数量的箭引爆气球（中等）: <a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/</a></p><p>[33]<br>【LeetCode 直通车】：56 合并区间（中等）: <a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-intervals/</a></p><p>[34]<br>【LeetCode 直通车】：4 寻找两个正序数组的中位数（困难）: <a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a></p><p>[35]<br>【LeetCode 直通车】：392 判断子序列（简单）: <a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/is-subsequence/</a></p><p>[36]<br>【LeetCode 直通车】：34 在排序数组中查找元素的第一个和最后一个位置（中等）: <a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p><p>[37]<br>【LeetCode 直通车】：300 最长递增子序列（中等）: <a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-increasing-subsequence/</a></p><p>[38]<br>【LeetCode 直通车】：322 零钱兑换（中等）: <a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coin-change/</a></p><p>[39]<br>【LeetCode 直通车】：1143 最长公共子序列（中等）: <a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-subsequence/</a></p><p>[40]<br>【LeetCode 直通车】：72 编辑距离（困难）: <a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/edit-distance/</a></p><p>[41]<br>【LeetCode 直通车】：516 最长回文子序列（中等）: <a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-subsequence/</a></p><p>[42]<br>【LeetCode 直通车】：53 最大子序和（简单）: <a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-subarray/</a></p><p>[43]<br>【LeetCode 直通车】：121 买卖股票的最佳时机（简单）: <a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water/</a></p><p>[44]<br>【LeetCode 直通车】：122 买卖股票的最佳时机 II（简单）: <a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/</a></p><p>[45]<br>【LeetCode 直通车】：123 买卖股票的最佳时机 III（困难）: <a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/</a></p><p>[46]<br>【LeetCode 直通车】：188 买卖股票的最佳时机IV（困难）: <a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water/</a></p><p>[47]<br>【LeetCode 直通车】：309 买卖股票的最佳时机含冷冻期（中等）: <a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a></p><p>[48]<br>【LeetCode 直通车】：714 买卖股票的最佳时机含手续费（中等）: <a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p><p>[49]<br>【LeetCode 直通车】：752 打开转盘锁（中等）: <a href="https://leetcode-cn.com/problems/open-the-lock/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/open-the-lock/</a></p><p>[50]<br>【LeetCode 直通车】：111 二叉树的最小深度（简单）: <a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/</a></p><p>[51]<br>【LeetCode 直通车】：155 最小栈（简单）: <a href="https://leetcode-cn.com/problems/min-stack/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/min-stack/submissions/</a></p><p>[52]<br>【LeetCode 直通车】：496 下一个更大元素 I（简单）: <a href="https://leetcode-cn.com/problems/next-greater-element-i/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/next-greater-element-i/</a></p><p>[53]<br>【LeetCode 直通车】：503 下一个更大元素 II（中等）: <a href="https://leetcode-cn.com/problems/next-greater-element-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/next-greater-element-ii/</a></p><p>[54]<br>【LeetCode 直通车】：20 有效的括号（中等）: <a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses/</a></p><p>[55]<br>【LeetCode 直通车】：71 简化路径（中等）: <a href="https://leetcode-cn.com/problems/simplify-path/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/simplify-path/</a></p><p>[56]<br>【LeetCode 直通车】：695 岛屿的最大面积（中等）: <a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/max-area-of-island/</a></p><p>[57]<br>【LeetCode 直通车】：100 相同的树（简单）: <a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/same-tree/</a></p><p>[58]<br>【LeetCode 直通车】：51 N皇后（困难）: <a href="https://leetcode-cn.com/problems/n-queens/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/n-queens/</a></p><p>[59]<br>【LeetCode 直通车】：46 全排列（中等）: <a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutations/</a></p><p>[60]<br>【LeetCode 直通车】：22 括号生成（中等）: <a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-parentheses/</a></p><p>[61]<br>【LeetCode 直通车】：93 复原 IP 地址（中等）: <a href="https://leetcode-cn.com/problems/restore-ip-addresses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/restore-ip-addresses/</a></p><p>[62]<br>【LeetCode 直通车】：78 子集（中等）: <a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subsets/</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>202104赛季晋级赛第一关-答案</title>
      <link href="2021/05/crimaster-trace-battle-for-promotion-202104-1-ans/"/>
      <url>2021/05/crimaster-trace-battle-for-promotion-202104-1-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>中国香港港铁东铁线</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>网络迷踪由于线索取景真实，所以解题思路并不唯一，但答案唯一。本题解析仅为其中一种方法。</p><p>本关的歧义主要在于轨道交通系统名称，港铁是由九广铁路与香港地铁合并而成，随后注册名称叫做港铁。示例中的澳门轻轨是一个意思。</p><div class="text-center"><img src="/assets/images/crimaster/2021/05/20210501-ans-1.png" alt="港铁" class="post-image inline" style="width:30%"><img src="/assets/images/crimaster/2021/05/20210501-ans-2.png" alt="澳门轻轨" class="post-image inline" style="width:30%"></div><p>单看视频可能没有什么特定的头绪。不妨筛选出有用的线索。</p><p>仔细聆听声音，可以在视频末端聆听到一则语音播报:</p><video controls="" class="post-video half"><source src="/assets/videos/crimaster/2021/05/20210501-1.mp4" type="video/mp4"></video><p>利用音频翻译搜寻可以得出，此为广东话:下一站。车行走缓慢均匀且在路轨上行驶，说明即将抵达站台，由此可以大致确定为使用广东话为播报的某地铁内所拍摄。</p><p>语音播报为广东话，而使用广东话为语音播报的城市有:中国广东省，中国香港，中国澳门。</p><p>中国广东省车内语音播报提示顺序为先普通话后广东话(语)，视频中先是粵语，所以排除中国广东省</p><p>中国澳门轻铁以及中国香港港铁均是使用广东话(粵语)为主语的城市，列车语言播报顺序为:先粤语，后普通话，再英语。</p><p>我们需要进行进一步排除，当进行谷歌搜索了解港铁与澳门轻铁车语音播报内容时发现:中国香港的港铁播报方式为:“下一站x”，而中国澳门的轻铁播报方式为:“即将到达x”。视频内播报为:“下一站”，由此我们仅从视频中的一句播报，便可锁定该列车为中国香港港</p><p>铁: HK MTR</p><p>根据视频里的风景可以推断出这是在地上的线路。利用谷歌实景地图翻阅香港各大站可以筛选出地上站台有:</p><img src="/assets/images/crimaster/2021/05/20210501-ans-3.png" alt="" class="post-image"><p>线路站点</p><table><thead><tr><th>线路</th><th>站点</th></tr></thead><tbody><tr><td>东铁线</td><td>全线</td></tr><tr><td>西铁线</td><td>屯门、兆康、天水围、郎屏、元朗、锦上路</td></tr><tr><td>观塘线</td><td>彩虹、九龙湾、牛头角、观塘、蓝田</td></tr><tr><td>荃湾线</td><td>荃湾、葵兴、葵芳、荔景</td></tr><tr><td>迪士尼线</td><td>欣澳、迪士尼</td></tr><tr><td>东涌线</td><td>荔景、欣澳、东涌</td></tr><tr><td>机场快线</td><td>荔景、机场、欣澳</td></tr><tr><td>南港岛线</td><td>海洋公园、黄竹坑、利东、海怡丰岛</td></tr><tr><td>马鞍山线</td><td>全线</td></tr></tbody></table><p>符合条件的站台太多，这样一一排査太费时间，我们需要再缩小范围。</p><p>从视频里我们可以发现这样一景</p><img src="/assets/images/crimaster/2021/05/20210501-ans-4.png" alt="" class="post-image"><p>一排排房子。我们可以借此确定列车方位。香港位于中国，太阳日出东方，日落西方，视频中右侧可看到房屋的阳光照射角度，用太阳方位推断列车自西向东行驶。</p><p>香港是沿海城市，视频里的走向没有经过海，且一般铁路设计不会靠着海行驶，中间会隔着马路。所以可以确定这段路程非沿海所行。结合以上两点，我们可以排除许多车站，只剩下:</p><div class="text-center"><img src="/assets/images/crimaster/2021/05/20210501-ans-5.png" alt="" style="height: 55px" class="post-image inline"><img src="/assets/images/crimaster/2021/05/20210501-ans-6.png" alt="" style="height: 55px" class="post-image inline"><img src="/assets/images/crimaster/2021/05/20210501-ans-7.png" alt="" style="height: 55px" class="post-image inline"></div><p>这里再次涉及到香港车内播报的一个习俗:除两头终点站外，车内语音播报会在快到下一站时才会播报。而观塘线的彩虹站至九龙湾站以及南港岛线的黄竹坑至海洋公园站快到站台都已经分别为北南走向及南北走向。所以排除。因此也可以排除东铁线的罗湖/落马洲站至上水站以及大学至火炭站。</p><p>推理至此，符合条件的仅剩下东铁线，此时答案已经明确，当然如果我们足够耐心，甚至可以进一步推测出该列车下一站的站点。</p><p>至此，为推测列车下一站站点，我们可以锁定到:上水至粉岭站，粉岭至太和站，太和至大埔墟站，大埔墟至大学站这些路线进行排查。</p><p>路程较远我们依旧无法很好的锁定。视频里又可以为我们提供信息。视频先后为我们提供了:</p><p>公交车:</p><img src="/assets/images/crimaster/2021/05/20210501-ans-8.png" alt="" class="post-image half"><p>高速公路:</p><img src="/assets/images/crimaster/2021/05/20210501-ans-9.png" alt="" class="post-image half"><p>高压线缆:</p><img src="/assets/images/crimaster/2021/05/20210501-ans-10.png" alt="" class="post-image half"><p>房屋:</p><img src="/assets/images/crimaster/2021/05/20210501-ans-11.png" alt="" class="post-image half"><p>小马路:</p><img src="/assets/images/crimaster/2021/05/20210501-ans-12.png" alt="" class="post-image half"><p>由此可以推断后来的房屋与铁路成直线。高压线缆，与铁路交汇。高速公路可能开始呈一直线，后来分岔。以及沿途涉及公交路线。这给我们进行实景搜索提供很多信息。</p><p>只要足够耐心，最后经过谷歌地球实景，我们可以在通往大埔墟的线段里发现这一风景。</p><p>本次网络迷踪的挑战可以让我们知道，一句简单的语音播报也能蕴含许多信息，类似于此类信息的还有车牌号，电话号等具有区域性及规律性的讯息，这些都是让我们突破惯性思维，得到真相的关键。通过一句语音播报，一段风景视频，利用互联网各类工具及知识，便可查找出视频拍摄者的具体位置，即便在这过程中些许枯燥，但每一次新的突破口涌入脑中，都会是一次思维风暴，这便是网络迷踪中逻辑及推理的魅力!</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络迷踪-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>202104赛季晋级赛第一关</title>
      <link href="2021/05/crimaster-trace-battle-for-promotion-2021-04-1/"/>
      <url>2021/05/crimaster-trace-battle-for-promotion-2021-04-1/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>这是一段于北京时间2021年4月11日15:28分在 Instagram上传的视频，视频发布者声明这是一段在列车上拍摄的视频，而此次你需要挑战的是，如何在这一段视频，推理出视频发布者乘坐的列车是什么城市的哪条线路?</p><video controls="" class="post-video half"><source src="/assets/videos/crimaster/2021/05/20210501-1.mp4" type="video/mp4"></video><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>请输入视频中所在地点及搭载的轨道交通系统名称和线路</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络迷踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>意外之谜-答案</title>
      <link href="2021/04/crimaster-puzzle-unexpected-mystery-ans/"/>
      <url>2021/04/crimaster-puzzle-unexpected-mystery-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>SHELF</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>观察发现是上下左右的字符，在一张表格里，从任意初始位置开始，按着题目上的箭头每次走一格，如果是黑色的方向那就给这个格子涂黑绿色就涂绿，最后会发现绿色格子象形得到答案。</p><img src="/assets/images/crimaster/2021/04/20210428-ans-1.png" alt="" class="post-image">]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>意外之谜</title>
      <link href="2021/04/crimaster-puzzle-unexpected-mystery/"/>
      <url>2021/04/crimaster-puzzle-unexpected-mystery/</url>
      
        <content type="html"><![CDATA[<p><font style="color:#D9730D">今天是CRIMASTER四月赛季最后一天了，这也是晋级赛前最后一道题，晚间将暂时关闭竞技赛场，等待5.1巅峰对决晋级赛的开启!希望大家都会取得一个好成绩，今天可以陆续更新版本啦，各应用商店更新审核时间不同，请耐心等待!加油!</font></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我叫柳菲，是一名古玩字画收藏家。</p><p>就在刚才，我收到了朋友发的消息:“菲姐菲姐!快点来卧龙观邸一趟，听说有关于《骷髅幻戏图》的消息。</p><p>”我对这幅画很感兴趣，于是立即驱车到达。只是…这守门大爷给我这张纸是为何?看画还要解谜题?</p><img src="/assets/images/crimaster/2021/04/20210428-1.png" alt="" class="post-image"><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>图片代表的意思 英文单词</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的世界-答案</title>
      <link href="2021/04/crimaster-puzzle-welcome-to-my-world-ans/"/>
      <url>2021/04/crimaster-puzzle-welcome-to-my-world-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>金沙县</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>我们像那跨越七海的风一般，在碧蓝的未来描绘我们的梦想，穿越了无数片海域和星河。到人生的每个阶段蓦然回首，还能是否想起那年少时的热枕。我偶尔还能想起，山脉间那跨越七海的风，少年在地图上勾画的那个午后。</p><p>我国领土的四端为:<br>最东端在黑龙江和乌苏里江的主航道中心线的相交处(135°2’30”E);<br>最西端在帕米尔高原附近(73°29’59.79”E);<br>最南端在立地暗沙(3°31’00”N，东经112°17’09” E)，为中国南海南沙群岛区域的一座暗沙，是实际上的中国领土的最南端;<br>最北端在漠河以北黑龙江主航道的中心线上(53°33’N，124°20’E)  </p><p>1、我们按照拼图形式得到:</p><img src="/assets/images/crimaster/2021/04/20210425-ans-1.png" alt="图片" class="post-image half"><p>2、根据符号X的位置带入图片得到数据表格</p><img src="/assets/images/crimaster/2021/04/20210425-ans-2.png" alt="图片" class="post-image half"><p>我国古代纪年法的其中一种为干支纪年法，近世也常用干支纪年表示重要历史事件，如:“戊戌变法”“辛亥革命”等。</p><p>按照提示得到年份的天干地支以及顺序:</p><p>圆圈：</p><p>1804(甲子年)</p><p>X</p><p>1829(己丑年)</p><p>1855(乙卯年)</p><p>1905(乙巳年)</p><p>X</p><p>1937(丁丑年)</p><p>2037(丁巳年)</p><p>方块:</p><p>1841(辛丑年)</p><p>1894(甲午年)</p><p>1939(己卯年)</p><p>1940(庚辰年)</p><p>1965(乙已年)</p><p>2004(甲申年)</p><p>由“天圆地方”的提示将圆圈所对应的天干提取方块对应的地支提取得到：</p><p>圆圈：甲X己乙乙X丁丁</p><p>方块:丑午卯辰已申</p><p>提示X=0，得到数字</p><p>方块 274569</p><p>圆圈 10622044</p><p>1、地点在中国，根据中国经纬度范围划分数字得到：</p><p>27.4569 N</p><p>106.22044 E</p><p>2、打开地图，输入坐标，得到答案金沙县。</p><img src="/assets/images/crimaster/2021/04/20210425-ans-3.png" alt="图片" class="post-image half no-limit-height"><img src="/assets/images/crimaster/2021/04/20210425-ans-4.png" alt="图片" class="post-image">]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的世界</title>
      <link href="2021/04/crimaster-puzzle-welcome-to-my-world/"/>
      <url>2021/04/crimaster-puzzle-welcome-to-my-world/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>“亲爱的侦探，人们常说，对着大山呐喊，大山对面的人就会听到你的声音，可是当你真正呐喊后畅快过后，仿佛更加深了一种失意，再美好的风景都不如回家的路。偶尔听听耳边的风，跨越了祖国的大江南北，渡过了多少江河，将故乡的气息传递到这。这是我生长的地方，欢迎来到我的世界。”</p><img src="/assets/images/crimaster/2021/04/20210425-1.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/04/20210425-2.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/04/20210425-3.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/04/20210425-4.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/04/20210425-5.png" alt="图片" class="post-image half"><p><font color="#e03e3e">提示1:X=0<br>提示2:以古人纪年之法寻由古至今、天圆地方之数</font></p><p>拼合图片对应表格找寻线索，遵循本初子午线的规则对应我国经纬度范围内寻找一处确切的地点，即为答案。聪明的侦探，请解开谜题填入相应的一处地名。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>请输入一处地点名称 <font color="#e03e3e">例如:凤凰县</font></p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荷兰公寓杀人案-答案</title>
      <link href="2021/04/crimaster-reasoning-apartment-homicide-in-the-netherlands-ans/"/>
      <url>2021/04/crimaster-reasoning-apartment-homicide-in-the-netherlands-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>埃里克在该公寓租房更可能的原因是?<br>A.埃里克正在与雷合作<br><font color="#56c596">B.埃里克要观察雷</font><br>C.埃里克不想住分配公寓<br>D.埃里克要调查分尸案  </li></ol><ol start="2"><li>雷是被谁杀死的?<br>A.温特<br>B.丹<br>C.埃里克<br><font color="#56c596">D.博斯</font>  </li></ol><ol start="3"><li>是谁将丹锁在公寓一内?<br>A.雷<br>B.温特<br><font color="#56c596">C.埃里克</font><br>D.博斯</li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>埃里克作为大贩毒团伙多年的下手，他靠关系和博斯去了同一所监狱。博斯的哥哥皮特也在这所监狱中。他们三人很快洽谈起来——从该死的侦探和便利店的老板，谈到埃里克和博斯是如何手忙脚乱地往下水道倾倒毒品时忘了自己身上有枪可以反抗。</p><p>皮特表示自己因为开枪袭警而被判处了无期徒刑，而自己唯一的愿望就是希望弟弟斯能够在出狱之后向雷复仇。</p><p>博斯答应了。</p><p>时间慢慢爬过。雷在这段时间里过着穷困潦倒且堕落的日子，他等待着在博斯出狱后将其手刃。雷在丹的公寓楼里租房。丹的长期租金异常便宜——因为很久之前这里发生过碎尸案，几乎没有长期租客。丹作为当时碎尸案的目击证人，从垃圾袋中见证了那残忍的真相，精神上出了问题(家族精神疾病触发)。</p><p>从那之后，丹就对租户的垃圾袋特别不放心，总是要亲自翻看租户的垃圾，直到确认里面没有尸块为止。为了防止发生过凶案的公寓无法租出，丹拆下了所有的公寓门牌号，借此掩盖案现场的号码牌以使得不明真相的租户能继续租用公寓。</p><p>雷对此事并不知情也不在意。</p><p>2021年的4月，博斯和埃里克陆续出狱。雷打通警监，得到了埃里克出狱后被安排的住址。雷在埃里克的住址门口留了一封装有博斯与埃里克毒品交易的照片复印件和自己的电话联系方式的信。</p><p>这张照片复印件足以将埃里克重新定罪。</p><p>埃里克看见照片后立马拨向雷在信上留下的电话号码。电话里，雷希望埃里克可以接近博斯并且杀掉他，否则就向警方公布照片让其再进一次监狱。埃里克口头答应了雷，但却对此事有别的想法。</p><p>在埃里克看来，有可能拍照并且利用自己来杀掉博斯的人，应该是当时店长阿尔贝的亲人。于是埃里克于2021年4月13日找到隔壁店主罗根打听店长阿尔贝的人际关系，接着就联系到了后来退伍的军人温特。</p><p>温特明显不是联系埃里克的人，他对埃里克的存在完全不知情。埃里克通过说出催命电话这个细节贏得了温特和罗根的信任。</p><p>罗根于是给埃里克播放了当年案件最关键的证据——监控录像。监控上的人虽然模糊不清，但埃里克一眼认出画面中逃跑的人是博斯。录像里还有想要追上博斯的雷，只不过画面也是同样的模糊不清。埃里克虽知道杀人犯博斯的身份和行踪，但是他并未透露给温特，而仅是向温特透露了雷的情况，并暗示雷很可能在追查博斯。</p><p>2021年4月14日，丹通过雷扔在垃圾袋里的电话卡，得到了图片和短信内容。</p><p>丹一直依靠药物维持精神，他想通过出卖雷的住址等信息，来从这个贩毒的联系人那里赚一笔药费。丹联系到了埃里克，无意中透露了雷的身份。双方随后做了一笔交易——用雷的住址及个人信息来交药物和钱。</p><p>交易达成后，雷的住址被暴露在埃里克的面前。因雷拥有照片的复印件，故埃里克决定销毀掉该照片的原件及其它的信息和证据，届时了结一众人的夙愿。</p><p>埃里克用假身份住进与雷对门的公寓二，伺机观察雷的生活作息，了解他的习惯，从其房间内十分凌乱而防盗门的门镜里外却都被擦拭干净而推测其经常通过门镜进行观察。</p><p>温特多次的追问埃里克有关雷的更多事情，且有怀疑他的迹象，埃里克向温特透露了雷的住址所在地。听到这个消息的温特表示自己想与雷见面，以便了解父亲死亡案件的进展。埃里克也将雷的地址告知了博斯，通过几日的观察，埃里克发现雷的生活规律，觉得这是个机会，博斯想要杀人，而自己则可以顺势将雷手里的证据销毀。2021年4月23日早晨10点，雷出门，并在等待电梯时被埋伏已久的埃里克用电击枪击晕。埃里克把雷拖到了自己租的二号房间，所以房间门ロ较干净，且雷的衣服和后脑勺有灰尘，然后搜出雷身上的一号房间钥匙，打开雷的房门开始销毁证据。</p><p>10点09分，温特进入楼内并来到了公寓一前。此时埃里克还在房间内。温特敲了公寓一的门，屋内的埃里克担心暴露，并未回应温特。温特误以为雷不在家中，于是拨打了雷的电话(这个电话号码是丹留给埃里克，随后被埃里克告诉了温特)。电话铃从公寓二内雷的口袋里响了起来。站在公寓一外的温特听见铃声觉得纳闷，以为自己敲错了房门。于是温特转而敲响了公寓二的门，但是公寓二内也没有人回应。</p><p>由于没有门牌号的缘故，温特便打算找物业询问情况。温特从楼道广告得知房东丹平时住在顶楼后，便通过电梯上楼寻找房东丹了解住户雷的情况。</p><p>温特进入电梯并按下了10楼的按钮。</p><p>此时，埃里克处理完证据，钥匙遗留在了桌子上，回到自己的公寓二，并把雷搬回了公寓一。埃里克没有关上公寓一的门，而是留了道门缝以待博斯的到来。</p><p>随后埃里克径直回到了自己的公寓二。</p><p>10点25分，博斯来到雷半掩的门前。此时的雷已经半醒，他在迷糊之中看见了博斯。博斯瞬间用携带的粗尼龙绳从雷身后勒住他的脖子。</p><p>雷反应过来的时候已经晚了。挣扎了许久后，强撑着意识用右手抽出腰间藏有的防身匕首朝背后的博斯身上刺去。博斯虽然受伤，但是他没有松手，在雷失去意识后他依旧没有停止勒绞，直至雷死去。而房东那边听完温特的陈述后决定着备用钥匙与温特一同下楼查看住户雷的情况。此时公寓一内，博斯在确认雷死亡之后，捂着受伤的部位逃出了公寓一。由于首仍插在博斯的伤口上，因此走廊上仅滴落少量血滴。</p><p>因为害怕案发现场被人过早发现而导致自己无法顺利脱身，博斯离开前关上了雷的房门。博斯走向电梯，正好在走廊转角撞见赶下来的丹和温特。衣物带血的博斯使丹的情绪变得激动起来。而温特则认为五楼两户居民中一户为雷，推断此人受伤很可能与雷有关，且通过自己参军的敏锐洞察力判断出博斯就是监控中那个枪杀父亲并逃窜的凶手。</p><p>博斯谎称有人要杀害自己，凶手被他打晕，寻求救命。温特让丹留在原地看守防止手逃离，自己则找借口说要护送伤者到一楼。丹慌乱之中听取了温特的意见，在公寓一门口将门死死抵住。温特帮博斯打开了电梯的大门，博斯因失血过多靠着电梯壁坐在地。温特不打算帮助杀父凶手博斯，他趁博斯不注意，拔出了留在博斯体内的首，让博斯失血过多在电梯内死去。博斯死之后，温特拨打了急救电话并离开建筑物前往街角等待救护车的到来。</p><p>此时公寓二内的埃里克通过门镜看见丹抵着公寓的门。于是埃里克故意开门训斥丹在偷窥租户。丹回头辩解，并向埃里克说明情况。埃里克建议应该先进屋制服凶手再报警。</p><p>于是丹用备用钥匙打开了公寓一的房门。丹和埃里克进入公寓一，看到了雷死不瞑目的尸体，丹并没有注意到此刻身后的埃里克掏出了电击枪。埃里克从丹背后用电击枪将其击晕，拿走了丹的备用钥匙串，随后在公寓一门外用备用钥匙将门反锁，然后带着电击枪和备用钥匙通过楼梯跑到顶楼丹的住房寻找丹用来与自己交易的照片与电话卡。</p><p>在找到证据并将其销毀后，埃里克企图乘坐电梯离开。电梯门开后，博斯的尸体赫然倒在电梯里。埃里克灵机一动，将房东的备用钥匙串消除指纹并藏入了博斯的口袋，然后以最快的速度从楼梯离开建筑物。他并没有注意到沉睡的丹身上始终带着一张足以定罪的照片复印件…</p><p>走廊血迹的分析。</p><p>血迹未端的朝向即为伤者的移动方向。故本案中的伤者是从西向东地在走廊移动的。</p><img src="/assets/images/crimaster/2021/04/20210424-ans-1.png" alt="图片" class="post-image half"><p>雷是怎么死的?电击伤为什么与丹相同?可不可能是雷死后被人为伪造出的勒痕?会不会博斯当时没把人杀死，埃里克后来补刀?</p><p>①雷是生前被埃里克用电击枪击晕，后在苏醒时被博斯用绳索从身后勒住脖子发生机械性窒息后死亡的。因为雷的脖颈处有挠抓痕迹，故其被袭击时是有一定行动能力的，但在首插入后未被拔出多次反抗说明雷当时已经用尽全身力气，行动能力较弱了，博斯此时受伤，定不会给雷有活过来害自己的机会，且在博斯逃出后雷并没有追击，也没有拨打报警电话，说明雷当时起码是处于昏迷状态，而尸检中有线索雷的脖颈处仅一圈勒无二次被勒痕迹。</p><p>②颈后为电击伤，并非雷的致死原因，其与丹的电击伤相同是因为两人受到的袭击都来自于埃里克。</p><p>③鉴别生前索沟或死后索沟，除生前索沟出血外，还可取索沟部皮肤作组织学、组织化学检查，以及作组织胺和5-羟色胺的生物化学测定，生前索沟含量明显增高，死后索沟的含量不增局。</p><p>④榑斯想要的是帮自己的黑帮兄弟复仇，一定会要雷偿命的。此外，如果埃里克想要雷死，在使用电击枪的时候就可以动手了。且埃里克如果杀害雷，动机是有证据在其手上，那么丹也知晓其事情，理应将二人同时杀害，且埃里克逃走时以为证据已被销毀，杀害雷对他无益。该部分详见案件还原。</p><p>尘封案件一与本案有联系吗?</p><p>分析有无联系的绝佳途径就是寻找两起案件的相似之处。我们分析后发现尘封案件一与本案最大的关联可能就在房东丹身上。</p><p>在此之前我们先把目光放在这幢公寓本身，这幢公寓目前由房东丹掌管。根据群众的说辞，公寓各方面都很好，但是租金却异常低廉，这现象显然不太符合现实。</p><p>根据丹的线索可以发现，其父亲因精神分裂症恶化被送往疗养院是在2015年11月，而分尸案发生的日期也是在该月。丹的父亲的入院无疑给丹造成了经济压力。而且我们知道，如果一处小区或住宅发生了影响恶劣的凶案，那么它的信誉度和口碑就会在周边地区降低，久而久之客人便不愿意租住。此处，便是由于凶案的影响，公寓五楼的客房在很长时间内都无人租住，这使得丹承担了经济损失。</p><p>①所以为了消除案发生地501号房对业务的影响，丹索性拆掉了门牌号。如此一来租户便难以分清传言的真伪。</p><p>②同时，凶案的影响使得房东丹精神失常，从而形成了喜欢检查他人垃圾袋的癖好，还给房东丹带来了恶劣的精神分裂症。</p><p>相比于尘案二，尘案一提供的线索并不多。故并案调查的主要方向应当在线索丰富的尘案二上面。</p><p>科普时间：</p><p>一、自1976年起，荷兰政府就把毒品分类为硬毒品和软毒品。对海洛因、可卡因这些严重危害公众身体健康的硬毒品实行严厉打击。而像“大麻”这种所谓的“软毒品”，则允许公开买卖。荷兰此举当然不是在鼓励或支持毒品合法，其主要目的在于将大麻与非法渠道隔离，从而减少人们接触硬毒品的机会。值得注意的是，目前荷兰硬毒品的成比例是欧盟平均水平的3/5;而其因静脉注射感染艾滋的人数比例为10％，低于欧盟平均水平40％。</p><p>二、遗传因素在精神分裂症的发病中起重要作用。研究显示，一级亲属中同患本病的危险率约为4％-14％，约为一般人群的10倍。若双亲均患精神分裂症，其危险率可高达40％。在患者的二级亲属中，患病的危险率约高于一般人口的3倍。国外研究显示(1974)，精神分裂症单卵孪生子的同病率较双卵孪生子高。单卵孪生子的同病率6％-73％;双卵孪生子的同病率2.1％-12.3％。研究显示，精神分裂症具有一定的遗传因素，且血缘关系越近，危险率越高;遗传因素的影响较环境及其他因素大。截止目前，精神分裂症的基因定位研究尚无定论，精神分裂症可能是多基因遗传，由若干基因的叠加作用所致。</p><p>温馨提示：</p><p>生活有诸多不易，但我们干万不能让自己对生活的美好初衷，随着时间的流逝而日衰老直到熄灭。谨记自己内心的温存，去感受生活的美好。笔者愿用雷蒙德·钱德勒《漫长的告别》书中的一句经典人物台词来做本案的结尾“你知道，故事的结尾并不重要，生活唯一确保我们的就是死亡。所以我们最好不要让那结尾，夺走了故事的光芒。”</p><p>另，本文在创作过程中，可能受到国内外多部优秀悬疑推理或文学经典作品的启发，在这里特别向约翰・迪克森・卡尔《三口棺材》、紫金陈《长夜难明》、伊恩・麦克尤恩《阿姆斯特丹》等大师与作品致敬!</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荷兰公寓杀人案</title>
      <link href="2021/04/crimaster-reasoning-apartment-homicide-in-the-netherlands/"/>
      <url>2021/04/crimaster-reasoning-apartment-homicide-in-the-netherlands/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>2021年4月23日 荷兰 阿姆斯特丹警方先后接到两通报警电话——第一通报警电话为急救队员拨打，时间为上午10:55，其称接到一名男性拨打的急救电话后赶到城西公寓，但赶到时救助对象已死亡；第二通报警电话时间为上午11:35，一名男性称自己被袭击，醒来后在一间公寓内，房间从外用钥匙被反锁无法打开，其身旁有一具尸体。警方迅速到场展开调查，两起案件事发地点为同一建筑物内。警方将与此案相关嫌疑人初步锁定在案发时间段出入该栋公寓楼的人员中。案情紧急，警方现将线索公开，希望全球侦探可以协助调查。</p><p>楼层结构详情见下图，图中按照上北下南的地图方位展示。</p><img src="/assets/images/crimaster/2021/04/20210424-1.png" alt="图片" class="post-image half"><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>事件发生于城西一栋十层套楼内，内部设有一部电梯及一处楼梯，建筑出口处设有监控，每层仅有两间公寓，公寓都安有防盗门窗。防盗门上带有门镜，五楼的防盗门没有被人为撬锁的痕迹。公寓租金低廉，租户较少。各层公寓本应挂有门牌号的地方空空如也。</p><p>五楼走廊发现多处滴落状血迹，由数量不一的环形血迹构成，其末端由单一的、呈长椭圆形的血迹构成，该末端朝向东方向且与走廊墙面平行。</p><p>案发当日的大门监控内容如下:</p><p>2021年4月23日</p><ul><li>10点09分，温特进入建筑。</li><li>10点20分，博斯进入建筑。</li><li>10点46分，温特离开建筑。</li><li>10点50分，埃里克离开建筑。</li><li>10点53分，急救人员与温特进入建筑。</li><li>11点05分，警方介入。</li></ul><h1 id="尘封档案"><a href="#尘封档案" class="headerlink" title="尘封档案"></a>尘封档案</h1><ol><li>案件一(2015/11/20)<br>一名单身女租户艾玛在城西公寓五楼501室被肢解后在十五个黑色垃圾袋中。报案人为丹，兼尸体第一发现者。公寓内作案痕迹损坏严重，财物被洗劫一空。死者被发现时已死亡4天，身体器官未有遗失。因线索缺失，凶手至今尚未被抓获，此案仍在侦破中。</li></ol><ol start="2"><li>案件二(2015/10/22)<br>亚历山大广场附近的一处便利店内发生抢劫杀人案件，报案人为罗根，兼尸体第一发现者。现场的柜台现金及部分商品遭到洗劫。死者为便利店主阿尔贝，头部一处中弹。店内监控显示案发当晚凶手趁店主在柜台熟睡时行窃，期间店主突然醒来，随后双方发生冲突。凶手开枪杀人并席卷财物后逃逸。因凶手戴有头套及手套，故相关线索缺失。此案仍在侦破中。</li></ol><ol start="3"><li>并案调查<br>警方怀疑以上两起旧案件与4月23日的案件之间可能存在某种联系，故将部分线索给出，希望有助于案件的尽快侦破。</li></ol><ol start="4"><li>群众证词<br>我已经退租半个多月了，那房子确实不错，环境安静，租金也便宜。但是我不喜欢那个房东，他好变态啊！这人嘴上说着帮我们倒垃圾，实则…我有次跟着想看他做些什么把戏，结果他背地里把别家的垃圾带回去翻找、拍照！他做这种事还不止一次两次！</li></ol><h1 id="博斯-死者1"><a href="#博斯-死者1" class="headerlink" title="博斯(死者1)"></a>博斯(死者1)</h1><ol><li>死者信息<br>博斯，男，37岁。曾因涉嫌吸毒以及非法持有枪支被捕，两个月前出狱，现在某便利店做职员。</li></ol><ol start="2"><li>尸检报告<br>尸体右季肋区见一盲管刺创(刺入口唯一，但体内有多处刺创管，距离为4-7cm不等，切角一锐一钝)；伤及多处内脏，肝脏割裂伤尤为明显；血检无明显异常。推测致死原因为失血过多，已大致确定其死亡时间在10:20—11:00内。</li></ol><ol start="3"><li>案发现场<br>死者被发现侧躺于建筑物电梯内一尸体旁有一把带血的匕首(握把发现雷、博斯和温特的指纹)，电梯内部地板被血液浸染，电梯墙壁存在大量喷溅血迹。急救人员称进到楼内时电梯并不在一楼，按下电梯按键后显示电梯从十楼开始下降。</li></ol><ol start="4"><li>钥匙串<br>尸体口袋里发现一串钥匙，包含五楼一号房间的一把钥匙、二号房间的两把钥匙以及其他的一些公寓钥匙。钥匙串上未提取到有效指纹。</li></ol><ol start="5"><li>通话记录<ul><li>2021年4月22日00:20，呼入  埃里克  37分钟</li><li>2021年4月23日10:18，呼出  埃里克  未接</li></ul></li></ol><ol start="6"><li>犯罪记录<br>经查博斯有违法犯罪记录，违法犯罪记录如下:<ul><li>2013年5月29日至2016年7月8日因涉嫌参与黑社会性质犯罪活动被通缉。</li><li>2016年7月8日因涉嫌吸毒及违法持有枪械被捕进入戒毒所强制戒毒，后转入荷兰芬赫伊曾监狱服役，2021年2月22日刑满释放。</li></ul></li></ol><ol start="7"><li>深入调查<br>得知在2013年5月被捕的一名黑社会成员皮特与博斯系表兄弟关系，前者因涉嫌走私、贩毒、谋杀、袭警等多项罪名被判终生监禁，现在荷兰芬赫伊曾监狱服役。</li></ol><h1 id="雷-死者2"><a href="#雷-死者2" class="headerlink" title="雷(死者2)"></a>雷(死者2)</h1><ol><li>死者信息<br>   雷，男，45岁，前私家侦探，现无固定职业，曾帮助警方侦破过多起案件，警方内部对其评价大都极高。</li></ol><ol start="2"><li>尸检报告<br>颈部仅一道水平环形闭锁状索沟，无二次被勒痕迹；颈后皮肤发灼烧样红肿，周围肌肉僵直，皮肤发黄；面部皮肤和眼结合膜点状出血；口唇、指甲紫绀；存在肝肾淤血；脖颈处有抓痕；对索沟部皮肤作生物化学测定得5-羟色胺含量较一般值高。推测死者的死亡时间在10:10—10:50之间。</li></ol><ol start="3"><li>租房记录<br>记录显示雷于2016年11月2日独自租住了该建筑五楼的公寓一，并已提供居民ID卡及手机号码。</li></ol><ol start="4"><li>死亡现场<br>死者被发现时趴伏于公寓一内，脖子上围绕有一圈尼龙绳(与死者脖子上的勒痕吻合)。房间茶几，上摆着一个半满的烟灰缸、一瓶快喝光的酒，室内存在打斗痕迹。死者的后脑勺及后<br>   背衣物表面发现有少量灰尘粘附。死者右袖口、手掌及身旁的毛绒地毯上发现少量血迹，鉴定结果显示该血迹系博斯所有。</li></ol><ol start="5"><li>工作经历<br>2013年5月雷与警方合作办案时受伤，并因擅自开枪被吊销侦探执照，此后销声匿迹，工作不明。</li></ol><ol start="6"><li>健康证明<br>警方查得雷的WHO-ICF残疾和健康评定表记录——腿部枪伤痊愈不佳产生后遗症，移动及弯腰不便。</li></ol><ol start="7"><li>电脑文件<br>位于卧室中的电脑被人为损坏，针对其中的云端文件备份还在调查中，暂无进展。公寓内共发现两部手机，一部为侦探身上正常使用的手机，另一部手机上未发现电话卡。</li></ol><ol start="8"><li>通话记录<br>2021年4月23日10:15未知号码(经查为温特)呼入3次未接。</li></ol><ol start="9"><li>钥匙<br>公寓一的电脑桌上发现该公寓的钥匙，其表面发现雷以及埃里克的指纹。</li></ol><ol start="10"><li><p>侦探日记<br>在卧室抽屉内发现一本日记便签本。摘录部分内容如下： </p><ul><li><p>日记1：<br>备注：搜集证据，不忘此刻。<br>——02/08/2015</p></li><li><p>日记2：<br>便利店失窃，那通电话我不该打的。那枪好像打在了我的良心上。腿伤，该死。这东西让我想起过去，那时我还有正经工作。真希望我是某本小说或是某部电影里的主角，对待罪犯手到擒来。对，查下去，叫他明白什么是铁拳。<br>——24/10/2015</p></li><li><p>日记3：<br>房东是个热心肠，他喜欢帮忙扔垃圾。可给我省去不少麻烦。身体落下残疾确实令人难受，不过好处是我的垃圾不劳我亲自扔了。<br>——04/11/2016</p></li><li><p>日记4：<br>酒精其实和毒品一个样，都爱把人拉进阴沟里。不过人也古怪，自己甘愿被操纵。可我不能如此下去，我必须得迅速振作。悔恨与歉意在劝我迷途知返——我尽量不让它们占尽上风并告诉它们这份坚持不懈源自何方。<br>——22/04/2021</p></li></ul></li></ol><h1 id="丹-房东"><a href="#丹-房东" class="headerlink" title="丹(房东)"></a>丹(房东)</h1><ol><li>嫌疑人信息<br>丹，男，51岁，175cm，已婚。经调查丹的父亲因精神分裂症恶化，于2015年11月送入本地一家疗养院，母亲去世。妻子带女儿回了外婆家。</li></ol><ol start="2"><li>口供<br><strong>丹</strong>：我醒来就看见他倒在地上我没有杀人，不是我！<br><strong>警官</strong>：丹先生请你冷静一下，你确定死者当时已经死亡了吗？<br><strong>丹</strong>：是的，他死了。<br><strong>警官</strong>：因为你有重大的作案嫌疑，现在你可以陈述自己当天的行踪，我们经过后续调查再进一步判断案情走向。<br><strong>丹</strong>：我醒来，就看见雷躺在那。我不是凶手，我一直都不是手！很……我的头很痛！<br><strong>警官(对医务人员)</strong>：门外提着医疗箱的几位，请进来一下。丹先生的情绪很不稳定!</li></ol><ol start="3"><li>房间情况<br>其居住在该建筑第10楼，房屋内有多处翻找痕迹，未发现有贵重物品丢失。房间内的烟灰缸内有多个烟蒂以及多堆烟灰，烟灰中发现燃尽的PET材料、烧焦的纸张碎屑和一张烧焦的电话卡。</li></ol><ol start="4"><li>手机信息<br>裤袋中发现一部手机——相册中有许多不同垃圾袋内物品的近距离拍照，其中一张相片拍摄了一个电话卡。通话记录显示此手机于2021年4月23日11:35分拨打了报警电话。</li></ol><ol start="5"><li>手机录音<br>在房东的手机里面找到了一段通话录音，于2021年4月14日13:35分录制。电话另一端的声音经过处理，内容如下：<br><strong>另一头</strong>：还有什么别的事情?你之前说的内容已经他妈的够疯狂了！<br><strong>房东</strong>：这是我捡到的电话卡。<br>…(杂音，30秒后声音再次出现)<br><strong>房东</strong>：我知道雷的住址。<br><strong>另一头</strong>：雷，是他真不明白到底发生了什么，连我都要被扯进来。你还知道什么？把雷的住址告诉我！<br><strong>房东</strong>：其他的我不清楚。不过我想要一些奥氮平。<br><strong>另一头</strong>：奥氮平…好吧，我去帮你弄点。你要让我寄到哪里？<br><strong>房东</strong>：你就帮我寄到…等一下，你先弄到药再说。<br><strong>另一头</strong>：你先说个地方吧，等你拿到了药，再聊其他也不迟。</li></ol><ol start="6"><li>复印件<br>丹的裤袋里装有一张从楼顶向下拍摄的小巷子照片，巷子中的两人(分析得出是埃里克和博斯)正把袋装的白色粉末与钱递给对方照片右下方的拍摄时间显示是2016年7月8日下午16：05。</li></ol><ol start="7"><li>健康状况<br>颈后皮肤发现有一处灼烧样红肿，周围肌肉僵直，皮肤发黄。丹目前的精神状态并不好，但具有一定的逻辑思维能力，经过医生确认可以协助警方进行调查。</li></ol><h1 id="埃里克-毒贩"><a href="#埃里克-毒贩" class="headerlink" title="埃里克(毒贩)"></a>埃里克(毒贩)</h1><ol><li>嫌疑人信息<br>埃里克，男，38岁，183cm，离异子女抚养权归女方所有。其与父母家人关系均不和，故现已无联系。</li></ol><ol start="2"><li>口供<br><strong>警方</strong>：因为你有重大的作案嫌疑，现在你需要陈述自己当天的行踪，我们经过后续调查再进一步判断案情走向。<br><strong>埃里克</strong>：我当天一直在房间里睡觉，后来被外面打斗的声音吵醒，我比较担心牵扯到我，一直待在房间里没敢出声。后来好像没了声音，我开了门缝发现外面有血迹，想着还是离开比较安全，就从楼梯跑出去了。<br><strong>警方</strong>：你听到打斗声音是几点？<br><strong>埃里克</strong>：十点半左右吧。<br><strong>警方</strong>：你的陈述已经记录在案，这意味着它们将具有法律效益，你还有什么要补充的吗？<br><strong>埃里克</strong>：没有了。</li></ol><ol start="3"><li>房间情况<br>室内脏乱不堪，防盗门的门镜里外被擦拭干净。进门一侧的地面较为光洁，其余的衣柜、餐桌和地面都积满灰尘，房间角落堆满了食品包装袋屋内多处发现埃里克的指纹。</li></ol><ol start="4"><li>毛发<br>进门一侧地面发现少量的毛发，DNA鉴定结果显示其中一部分的毛发系雷所有。</li></ol><ol start="5"><li>犯罪记录<br>经查埃里克有违法犯罪记录，违法犯罪记录如下：<ul><li>2016年7月8日因涉嫌吸毒及违法持有枪械被捕进入荷兰芬赫伊曾监狱服役，2021年4月9日刑满释放。</li><li>根据关押埃里克的荷兰芬赫伊曾监狱看守表示，其在监狱内喜欢拉帮结派，且此前关押在该监狱的黑社会人员皮特与博斯有密切接触。</li></ul></li></ol><ol start="6"><li>手机信息<br>手机中大部分信息有被批量删除迹象，正在恢复中。</li></ol><ol start="7"><li>租房记录<br>记录显示埃里克提供了虚假的居民ID卡，于2021年4月16日租住了该建筑五楼的公寓二。</li></ol><h1 id="温特-军人"><a href="#温特-军人" class="headerlink" title="温特(军人)"></a>温特(军人)</h1><ol><li>嫌疑人信息<br>温特，男，28岁，190cm，未婚。母亲早逝，由父亲带大。早年参军服役，现为自由职业者。</li></ol><ol start="2"><li>口供<br><strong>警方</strong>：我们怀疑你涉嫌杀人，接下来的问题你要如实回答，这关系到最终的调查结果。请问你昨天上午十点左右在什么地方？<br><strong>温特</strong>：雷先生是不是已经死了?我认为是……<br><strong>警方</strong>：我们只需要你陈述事实，别的东西你无权知道。<br><strong>温特</strong>：好的警官。我昨天十点左右想去找雷先生，但是敲门没人，打电话却可以在隔壁房间内听到铃声。我随即敲了隔壁的门，但是还是没有回应。然后我就上楼去找房东，不过耽误了挺长时间。后面跟房东去五楼查看，在走廊转角处发现了一个满身是血的家伙。房东好像怕血，为了救人，我跟着这个家伙下了楼。结果我在打急救电话的时候，他就断了气。就这些了。<br><strong>警方</strong>：你说你想找雷先生，但最后你却没有去找他。对此你有什么想说的？<br><strong>温特</strong>：呵，不是你们的速度快，把我马上带走了么。<br><strong>警方</strong>：你的陈述已经记录在案，这意味它们将具有法律效益，你还有什么要补充的吗？<br><strong>温特</strong>：没有了。</li></ol><ol start="3"><li>监控录像<br>在其家中发现储存有监控录像的载体，监控中显示一名男子带着头套(外貌与博斯相似)进入便利店，一段时间后该男子匆匆离开。随后一名衣着严密的男子(外貌与雷相似)从监控视野外冲向便利店。之后隔壁店主罗根进入便利店，经过约半小时后警方到来。监控显示的时间为22/10/2015 13:04-13:15。</li></ol><ol start="4"><li>血迹<br>温特的裤子上部、双手袖口及胸前白色衣物上沾有少量博斯的血液。</li></ol><ol start="5"><li>通话记录<ul><li>13/04/2021，10:40，呼入  埃里克  10分钟</li><li>22/04/2021，22:30，呼入  埃里克  12分钟</li><li>23/04/2021，10:15，呼出三次  雷  未接</li><li>23/04/2021，10:42，呼出  急救电话  3分钟</li></ul></li></ol><ol start="6"><li><p>书信<br>在温特家中发现的书信。信纸泛黄，摘录如下:</p><p>亲爱的温特:<br>最近好吗，小温特？我听退伍的朋友说，部队的生活很不错，当然前提是你没有被指派到前线上。你在部队，孤身一人，请一定把自己照顾好。<br>你一定很奇怪为什么是我来给你写信吧，唉，真不知道承受的痛苦还要有多少，才能够赎回我们的罪过。温特你的父亲，昨天被枪杀了。我当时就在自己的店里，我看见凶手拿着枪从现场冲出来…原谅我温特，我没有那种勇气上去追凶，只能报警。警察花了挺久才到店里，他们只是拍了一些照片。我告诉警察我有录像，但是他们完全不在乎。警察走之后，我叫了殡仪馆的人。两天后我会为你父亲举办葬礼。如果你能(被划掉的文字)，我们也会念你的名字……<br>我欠你父亲很多人情。但是现在我只能以最痛苦的方式偿还。但请你不要担心这边的事情。我会处理好切，录像也会保存。你孤身一人在外，请一定要多保重啊!<br>   罗根<br>   22/10/2015</p></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>埃里克在该公寓租房更可能的原因是?<br>A.埃里克正在与雷合作<br>B.埃里克要观察雷<br>C.埃里克不想住分配公寓<br>D.埃里克要调查分尸案</li></ol><ol start="2"><li>雷是被谁杀死的?<br>A.温特<br>B.丹<br>C.埃里克<br>D.博斯</li></ol><ol start="3"><li>是谁将丹锁在公寓一内?<br>A.雷<br>B.温特<br>C.埃里克<br>D.博斯</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神秘交易-答案</title>
      <link href="2021/04/crimaster-puzzle-mysterious-deal-ans/"/>
      <url>2021/04/crimaster-puzzle-mysterious-deal-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>南京市</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>男子乘坐的航班为深圳航班，且为国內航班(本题为贴合现实类题目，航班到达时间需要以实际到达时间为准)该男子13:30到达，从机场取行李以及出站按较快20分钟算加上车程25分钟，对于在12:45之前实际到达广州的深圳航空且行李转盘为20的航班进行查询，査询方式可以如下(广州白云机场官网)</p><p><a href="https://www.gbiac.net/byairport-web/flight/list?depOrArr=2&amp;type=1&amp;terminal=T1&amp;day=-1" target="_blank" rel="noopener">https://www.gbiac.net/byairport-web/flight/list?depOrArr=2&amp;type=1&amp;terminal=T1&amp;day=-1</a></p><img src="/assets/images/crimaster/2021/04/20210423-ans-1.png" alt="" class="post-image half no-limit-height"><p>通过行李转盘为20，初步确定了部分航班，通过具体的航班号进行查询，可下载非常准等APP查询实际到达时间以及登机口</p><img src="/assets/images/crimaster/2021/04/20210423-ans-2.png" alt="" class="post-image half no-limit-height"><p>通过登机口为13，所以最终锁定为南京，且南京当日温度为:最高21度，最低17度。天气为:雷阵雨转阴。</p><p>广州4月22日温度:最高31度，最低21度。天气:多云转晴。下午13:00时气温30度左右。该男子手中带着用塑料袋包裹的雨伞，塑料袋上有些许雾气，皮鞋表面有少量泥点，而广州无雨，推测其来时地区下过雨。</p><p>该男子手中帯着一件长袖西服外套，推测其来时地区温度可能没有广州温度高。</p><p>12:34实际到达，拿取行李并走到上车处加上25分钟的车程，13:30到达地点也符合。最终确定地点为南京市。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神秘交易</title>
      <link href="2021/04/crimaster-puzzle-mysterious-deal/"/>
      <url>2021/04/crimaster-puzzle-mysterious-deal/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我是一名侦探，因接到了一位雇主的委托任务，得知<font color="#e03e3e">2021年4月22日</font>下午在广州市XX大厦有一场交易活动，该活动的交易人员身份不明，仅有一张照片，我需要前往该地点秘密调查出其身份及来处，以获得这场秘密交易的更多信息。</p><p>我早早在大厦旁找了一个适合观察的位置，<font color="#e03e3e">下午13:30时</font>，一辆出租车停靠在了大厦门前，目标男子从车内下来。</p><p>通过望远镜观察，男子手持一张深圳航空的机票和一把被塑料袋包裏的折叠雨伞，机票的其余重要信息被他的手部遮挡住，只在其手指缝隙中可看到登机口处数字为<font color="#e03e3e">13</font>，男子身穿白色短袖T恤、白灰色西服长裤、黑色皮鞋，手中拿着一件长袖西服外套，下车后从车后备箱拿下来一个行李箱走入了大厦。</p><p>该男子身高目测约188cm，年龄三十左右，身材偏瘦。塑料袋上有些许雾气，皮鞋表面有少量泥点，行李箱上贴有一个广州机场的行李贴，隐约可看到行李转盘号为<font color="#e03e3e">20</font>。</p><p>男子进入大厦后我立刻通过出租车车牌号联系到了司机并获取到了一些信息，得知该男子不会粤语，并未与司机在车上有过多交流，从机场到这里车程约<font color="#e03e3e">25分钟</font>左右，路上车良好，到达目的地共计<font color="#e03e3e">45元</font>车费。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>男子是从哪个城市来的？<font color="#e03e3e">例如:北京市</font></p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察推理入门篇—YK手稿-答案</title>
      <link href="2021/04/crimaster-reasoning-yk-observation-intro-ans/"/>
      <url>2021/04/crimaster-reasoning-yk-observation-intro-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>人物A的职业更可能是以下中哪一个?<br><font color="#56c596">A.教师</font><br>B.外科医生<br>C.钢琴家<br>D.歌唱家</li></ol><ol start="2"><li>人物的职业更可能是以下中哪一个?<br>A.竖琴演奏者<br><font color="#56c596">B.小提琴演奏者</font><br>C.大提琴演奏者<br>D.二胡演奏者</li></ol><ol start="3"><li>人物C的职业更可能是以下中哪一个?<br>A.瓦匠<br>B.木匠<br><font color="#56c596">C.电焊工</font><br>D.油漆工</li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>第一题：A，教师</p><p>双手纤细表明并不从事体力劳动，右手食指中指关节突起，小鱼际处沾有笔墨说明经常持笔写字，随身携带本子说明有记笔记的习惯，臀骨相对宽大表明有久坐的习惯。服用薄荷含片，有过轻咳可能是常年教学吸入过多粉尘以及常年讲课导致肺部以及喉咙患有疾病。由此选项中的教师更可能是该男子的职业。<br>外科医生可能手指食指会有一条细线勒出的倾斜痕迹。钢琴家的指腹较常人通常更厚。演唱家大多需长时间站立。</p><p>第二题：B，小提琴演奏者</p><p>手提包中露出曲谱部分，推测该女子可能从事或爱好演奏等与音乐相关的事物。该女子指甲较短，左手食指、中指以及无名指指腹有茧，大中小提琴、二胡等乐器的演奏会有此特征，颈椎处贴有棕色膏药，下巴左侧有茧，选项中的小提琴在练习时会需要脖子向左侧倾斜，长期练习后在与琴身接触的位置往往会有红肿甚至起茧等现象。<br>竖琴需双手弹奏，不符合单手出茧的细节。</p><p>第三题：C，电焊工</p><p>该男子左右手臂较发达，手掌心有厚实茧子，手背及脸部有多处凹陷的疤痕。眼部有较多红血丝，皮肤干裂粗糙颜色黝黑。行为:多次揉搓眼部，多次重咳。<br>电焊工在工作时需要穿戴防护服饰，但在炎热的夏日厚实的衣物会使炎热相当难耐，长期工作的人员在防护不当时容易被烫伤留下疤痕。且电弧光辐射会对眼睛以及裸露的皮肤有严重损伤，引起电光性眼炎等。在熔化焊条和焊件的同时会产生大量的烟尘，极容易吸入肺中，长期吸入则会造成肺组织纤维性病变等。所以相对其他选项更可能是电焊工。</p><p>我迫不及待的想证明自己的猜想，于是把书丢在了人物A的脚下，捡书时刻意碰了碰他。随后我自来熟的向他介绍了我自己，他未在意，倒是示意让我把书递给他看看。我把书给了他，漫不经心似的问道他叫什么，从事什么。男子回答道：“我是个推理小说家，笔名AID”。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察推理入门篇—YK手稿</title>
      <link href="2021/04/crimaster-reasoning-yk-observation-intro/"/>
      <url>2021/04/crimaster-reasoning-yk-observation-intro/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>这是我第一次乘坐飞机，伴随着空乘广播的提醒，飞往美国纽约的飞机总算起飞了。生性好动的我，在座位上还没坐满半个小时，便开始觉得些许乏味。早早知晓要度过无聊的十三个小时的我准备了一本书:由华人神探李昌钰所著的《犯罪现场调查》。我津津有味的阅读着，还不时自言自语的称赞道细微痕迹对案件的决定性作用。大致看了两个多小时的书，眼睛明显有些许疲惫，合起了书，闭目回想书中的精华… </p><p>不知不觉，时间过去了八个小时，睡眼惺忪的我揉了揉太阳穴。虽说已经过了八小时，可对目的地的期待让剩下的时间变得相当漫长，我耸耸肩膀俏皮的模仿起了大侦探福尔摩斯系列故事中的观察人物推理其身份职业的场景，细致的开始观察起周围的人群。</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>这是一架从北京飞往纽约的航班，受疫情影响，飞机上每个人皆佩戴口罩。</p><p>一位空姐迎面走来，端了一杯水给斜前方的男士，在递水时，空姐右手端住一次性水杯，左手刻意的扶了一下右手的肘关节，小心的将水杯递给了那位男士。这位空姐的年纪大概不到40岁，飞机此时正处于平稳状态，她的这个小动作让我感到疑惑，是她刻意为之或习惯?在她收回右手时，左手在手肘处轻柔了两圈，这让我意识到很可能是她在空中工作时间过久的一种职业病——肌腱炎，才使她有这样一个小小的动作。</p><p>我的思绪开始从这位空姐转换到周围的几位乘客，并记录下了他们的特征以及行为。</p><p><font color="#e03e3e">注:三道题目皆不排除选项以外其它可能的职业，该题仅相对选项而言选择更可能的。</font></p><h1 id="人物A"><a href="#人物A" class="headerlink" title="人物A"></a>人物A</h1><ol><li><p>观察情况</p><ul><li><p>穿着:<br>偏休闲的灰蓝色西服，系带的棕色皮鞋。 </p></li><li><p>特征:<br>戴着黑色外框眼镜，黑色短发，身高目测178cm，年龄40岁左右。</p></li><li><p>细节:<br>该男子双手纤细，右手食指和中指关节有突起，右手小鱼际处沾有些许黑色印记，西服口袋里装有一本夹着笔的小本子，臀骨看起来较他人相对宽大些。西服熨烫整齐，脚底存放一个棕色单间包。</p></li><li><p>行为:<br>在乘坐飞机期间有过轻咳，并服用薄荷含片。</p></li></ul></li></ol><h1 id="人物B"><a href="#人物B" class="headerlink" title="人物B"></a>人物B</h1><ol><li><p>观察情况 </p><ul><li><p>穿着:<br>白色过膝连衣裙，白色平底休闲鞋。</p></li><li><p>特征:<br>淡妆，黑色长发，中马尾发型，目测170cm，年龄近三十岁左右。</p></li><li><p>细节:<br>该女子指甲较短，左手食指、中指以及无名指指腹有茧，颈椎处贴有棕 色膏药，下巴左侧有茧。手提包中露出曲谱部分，裙摆处有轻微褶皱。</p></li><li><p>行为:<br>在乘坐飞机期间多次活动手腕以及脖子。</p></li></ul></li></ol><h1 id="人物C"><a href="#人物C" class="headerlink" title="人物C"></a>人物C</h1><ol><li><p>观察情况</p><ul><li><p>穿着:<br>灰色运动服套装，黑色运动鞋。</p></li><li><p>特征:<br>体型偏瘦，寸头，目测179cm，年龄四十左右。</p></li><li><p>细节:<br>该男子左右手臂较发达，手掌心有厚实茧子，手背及脸部有多处凹陷的疤痕。眼部有较多红血丝，皮肤干裂粗     糙颜色黝黑。一直紧握胸前的双肩背包，背包一侧网状口袋中有一老式保温杯。</p></li><li><p>行为:<br>多次揉搓眼部，多次重咳。</p></li></ul></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>人物A的职业更可能是以下中哪一个?<br>A.教师<br>B.外科医生<br>C.钢琴家<br>D.歌唱家  </li></ol><ol start="2"><li>人物的职业更可能是以下中哪一个?<br>A.竖琴演奏者<br>B.小提琴演奏者<br>C.大提琴演奏者<br>D.二胡演奏者  </li></ol><ol start="3"><li>人物C的职业更可能是以下中哪一个?<br>A.瓦匠<br>B.木匠<br>C.电焊工<br>D.油漆工  </li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>起点-答案</title>
      <link href="2021/04/crimaster-puzzle-start-ans/"/>
      <url>2021/04/crimaster-puzzle-start-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>Dream and hope</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>Dream and hope梦想与希望。</p><p>老师写下的提示数字转换英文为rot，氩元素是18号元素，结合起来便是ROT18编码。它是将ROT5和ROT13组合在一起，并命名为ROT18。</p><p>ROT5:只在0到9内对数字进行编码，用当前数字往前数的第5个数字替換当前数字，例如当前为0，编码后变成5</p><p>ROT13:只对26个字母进行编码，用当前字母往前数的第13个字母替换当前字母，例如当前为A，编码后变成N。</p><p>将 Qernz naq u60cr通过ROT18解密后得到</p><p>Dream and h15pe</p><p>答案全部是英文字母，所以将15转换成字母得到就得到了答案: Dream and hope梦想与希望!</p><p>祝愿每一位莘莘学子心底埋藏的梦想与希望都能在这个六月里灿烂绽放!站在新的起点，收获新的挑战，迎接新的未来!</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>起点</title>
      <link href="2021/04/crimaster-puzzle-start/"/>
      <url>2021/04/crimaster-puzzle-start/</url>
      
        <content type="html"><![CDATA[<p><font style="color:#D9730D">时间飞逝，CRIMASTER很快就要迎来一周岁生日了，感恩大家长久的陪伴，而我们也将一起迎来应用上线后所经历的第二个高考，2020年社区中那些高三玩家们的励志宣言和其他玩家的祝福之词，历历在目，现在的你们也都已经进入自己喜欢的大学里了吧?好好学习，努力干饭，选择一个喜欢的社团，结交一些真诚的朋友，邂逅一段美好的恋爱。<br>借此机会，向即将迎来人生转折点的玩家们道一声祝福，距离高考还有50天的时间，不短，但也不长，从现在开始，放下手机，退出游戏，静下心去复习，考入自己理想的大学，这也是对父母、长辈、老师及自己的一个最好的礼物，CIMASTER所有玩家和全体工作人员都会向你们送上最诚挚的祝福，我们会永远在这里等你，永远。<br>记住，乾坤未定，你我皆是黑马，加油!加油!加油!</font></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我叫新子，是一名即将毕业的高中生，距离高考还有最后五十天的时间。</p><p>今天和往常一样，班主任早早的来到了教室看管着正在自习的同学们。年仅二十几岁的她身上有一股不服输的干劲，圆圆的眼镜下是一双温柔灵动的双眸。我们是她带的第一届毕业生，每一次的考试成绩、每一位同学的身心健康，她都在时刻关注并给予我们鼓励与帮助。</p><p>上周刚刚结束了高考前的第一次摸底考试，我们班的成绩并不是很理想，班级里的压抑延伸到了每一个角落。</p><p>她似乎是发现了大家的状态，紧锁着眉头不知如何安慰大家。</p><p>“大家放一放手中的作业，我这儿有一道特别的题目，不会耽误大家太多的学习时间，希望可以借此缓解一下大家紧绷的情绪。</p><p>她转身在黑板上写下了一道谜题和提示:</p><p>题目:Qernz naq u60cr</p><p>提示:18 15 20氩</p><p>“希望大家能怀揣着黑板上破译出来的内容去坚持这最后的五十天，不惧挑战，迎接未来!”</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>12个英文字母</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忘川河-答案</title>
      <link href="2021/04/crimaster-reasoning-lethe-river-ans/"/>
      <url>2021/04/crimaster-reasoning-lethe-river-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>根据现有证据，对于余林的死，李顺需要承担什么责任?<br>A.过失致人死亡罪<br>B.故意杀人罪<br><font color="#56c596">C.无需承担上述责任</font></li></ol><ol start="2"><li>在无买凶杀人的情况下，根据现有线索，谁需要对余林的死负主要责任?<br>A.张峰一定负主要责任<br>B.李顺一定负主要责任<br>C.黄雅一定负主要责任<br><font color="#56c596">D.无法断定，张峰或黄雅都有可能需负主要责任</font></li></ol><ol start="3"><li>根据现有证据，余林的车什么时候被动手脚的可能性大?<br>A.未被动手脚<br><font color="#56c596">B.事故前12小时内</font><br>C.事故前12至24小时<br>D.事故前3至5天<br>E.不可确定  </li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>按照现有证据结合李顺的证词，可以推理出这样的一个案发经过“余林在酒吧喝酒至第二日早晨，准备回家，被同事李顺发现，李顺主动要求送余林回家，在路上，受到余林的干扰导致车辆偏离道路，李顺及时采取刹车等措施，但车辆好像被人做过手脚，最终车辆坠入河中，李顺在自救之后带着余林一起来到岸边，发现余林已经死亡。<br>那么在这个过程中，李顺是否有需要承担的责任呢?首先:在这个过程中，李顺的可能违法的行为有:未经车主允许使用其交通工具，将车驶入河流使车辆受损，间接导致余林的死亡。  </p><ul><li>第一问:李顺要承担什么责任。 </li></ul><p>要分析李顺承担什么责任，首先要判断其是否说谎。主要是两个问题(是否受到死者的袭击，汽车制动能力是否完好)，根据线索可以得出结论，李顺没有撒谎。根据已有证据，可以证明当时的情景与李顺供述的内容无异，李顺将车驶入河流属于意外事件，且已做出相应反应，不属于过失杀人和故意杀人。<font color="#e03e3e">选择C</font>。有的玩家对安全带这个事情有疑问。要注意，过失致人死亡的客观方面第一条就是“行为人具有致人死亡的行为”。而没有证据能证明李顺有这个行为，所以不构成过失杀人罪。但会因此承担部分责任(赔偿)。所以乘车请系好安全带。<br>由此也可知余林死亡的根本原因是汽车无法制动。根据线索可分析出是制动液被人做了手腿(汽车三天前刚经过保养，引擎盖内应该很干净，但是却在上面检测到了大量的乙二醇乙醚和聚乙二醇，这两种物质是某种制动液的主要成分)。作案人一定有能力打开余林汽车的引擎盖。  </p><ul><li>第二问:谁要对余林的死负主要责任。</li></ul><p>这道题需要判断本次案件属于意外还是自杀还是谋杀。根据服务员口供，可证明余林开车来的时候汽车没有任何问题，而早上李顺也看到余林刚刚从酒吧中走出。证明余林本人并未对车辆制动液做手脚。本人也没有任何自杀倾向。排除A。李顺在本案中的出现应属巧合，他不知道汽车被做了手脚，也不知道余林会攻击他，在案发前一晚也没有离开单元楼，没有作案时间。并且在意外发生之后做出了合理反应，无需对余林的死负刑事责任，排除B。根据现有证据来看，黄雅有杀余林的动机，并且已经实施(将余林的解酒药换成头孢)，但余林的死因与这无关，余林并没有吃含有头孢的解酒药，黄雅在案发前一晚只是离开单元楼五分钟，没有时间去到现场排除C。最后是张峰，张峰离开单元楼的时间是20分钟，看似时间不够往返于酒吧，但因为其佩戴口罩，且晚上光线昏暗，完全有可能是其找人伪装成自己进入单元楼，而张峰本人来到了酒吧，对余林的汽车做手脚。那这个假设是否可以成立呢?余林的车前几天在张峰所在汽车公司保养维修，张峰有机会获得汽车钥匙，张峰和黄雅当晚通话有机会了解到张峰所在位置。所以根据现有证据，最有可能对余林的汽车做手脚的人就是张峰。那么是否可以确定张峰就要负主要责任呢?不可以，虽然在题干中排除了买凶杀人的情况，但是黄雅和张峰的关系明显不简单，存在黄雅教唆张峰杀死余林的情况(黄雅为教唆犯，负主要刑事责任)也有张峰自己想要杀死余林的情况(张峰为主犯，负主要刑事责任)。现有证据无法完全表明主谋是黄雅还是张峰，<font color="#e03e3e">选择D</font>。  </p><ul><li>第三问:什么时候汽车被动了手脚。</li></ul><p>其实这个问题，在找到凶手之后就很简单了，首先根据警方检测汽车的制动能力有问题，以及在汽车内部机械表面检测到的制动液成份，就可以断定汽车被人动过手脚。而余林在开车来的路上并没有任何问题，证明在到达酒吧之前，汽车未被动手脚。有人可能会说提前被人加水，到达一定程度才会有意外。这里普及一下(制动液有很强的吸水性，所以在使用过程中，会慢慢的吸收空气中的水汽，慢慢降低制动液的浓度，从而影响制动效果，就是常说的刹车软。在发现这些情况的时候一定要及时更换制动液，避免发生意外。)从而排除了这个假设，这里不存在量变引起质变的可能。所以<font color="#e03e3e">选择B</font>。道路千万条，安全第一条。</p><p>过失杀人与意外致人死亡主观上都没有杀人的故意，过失杀人分为两种情况:</p><ol><li>应当预见该行为会致被害人死亡而没有预见</li><li>应当预见或已经预见该行为会致被害人死亡，而过于自信认为能够避免，最后没有避免造成被害人死亡。<br>意外事件主要是指在当时的情况下，行为人不可能或者根本不会预见的事件而导致被害人死亡</li></ol><p>案件还原：<br>余林和黄雅本是一对恩爱的夫妻，但五年前的一次意外，年仅7岁的儿子在游泳的时候溺水而亡。儿子死了之后，余林便患上了严重的精神疾病，需要靠药物维持正常。但还是经常忍不住地对妻子发火。他也知道这样不对，就慢慢每次想要发火就去酒吧买醉，夫妻感情逐渐崩溃，给了别人以可乘之机，张峰是黄雅大学时期的恋人，虽然毕业后两人联系不多，但张峰离婚之后总是会想起黄雅。在得知黄雅的儿子出了意外之后，他经常借安慰黄雅的借口与之见面。久而久之，黄雅与张峰的关系甚至比余林要更加亲密。或许是出于亏欠，她并没有和张峰发生什么，更没有打算和余林离婚。直到那一天，余林长时间的压抑迎来爆发，一周前，他没有选择去喝酒，而是对妻子大打出手。还摔坏了家里的装有儿子照片的相册，并大声质问黄雅“五年前你怎么不去死?”每一个字都好像是刀子扎在了黄雅的心里，黄雅终于决定杀死余林，她在给余林买的醒酒药中加入了几个含有头孢成份的胶囊，打算让余林的一次喝醉后走向死亡。而黄雅被打的事也被张峰所知道，张峰看着自己曾经心爱的女人被打，也没有无动于衷，巧合之下余林开车到张峰所在的公司做保养，张峰借职务便利偷偷配了一把钥匙，以备后用。在案发前一晚，黄雅打电话给张峰，想让他来陪她聊会天，但张峰觉得这是一个机会，避免夜长梦多，便是婉拒了黄雅，决定今晚就对余林的车下手。他先是找了一个和自己身高发型差不多的朋友让其来自己家帮忙看房子，并且问出朋友当晚的着装，找了一条差不多的裤子换上，去楼下商店买烟，让店员给自己做不在场证明，然后借口自己的衣服不符合规定，和朋友互换了衣服。朋友穿着张峰的衣服进入单元楼，为张峰做了不在场证明。张峰本人已经坐着车去了余林常去的酒吧，找到余林的汽车，用钥匙打开车前盖，将准备好的水灌入制动液箱，因为水的密度大于制动液，大量制动液从箱中流出，汽车的制动系统被破坏。做完这一切的张峰回到家和朋友换回衣服。再说当初游泳馆的教练李恒因为过失致学员死亡被停职查办，不久便患上了抑郁症，在一年前自杀身亡。但在自杀前写下遗言，希望自己的弟弟李顺能够帮自己一个忙，偿还自己对那家人的亏欠。李顺和哥哥关系十分亲密，李顺按照哥哥的请求，辞去了原来的工作，来到了余林的公司。经常在工作和生活上为余林提供帮助，在得知余林经常在附近的酒吧喝酒之后，直接在附近租了房子。案发当天，李顺出门跑步便看到了余林，怕余林出事便要送余林回家。在路上他和余林说着家常，说起了黄雅，勾起了余林的怒火，借着没消散的酒劲，余林袭击了李顺，方向被打乱，车向着河里冲，虽然李顺及时的松开了油门，猛踩刹车，但是因为无法制动，汽车还是掉入了河中。李顺毕竟会游泳，打开了车门，拽着余林上岸，但半清醒的余林已经在水下溺水而亡了。张峰本打算制造一场车祸，最终车毁人亡，死无对证，但车掉到河里，留下了致命的证据。黄雅也因为杀人未遂被警方逮捕。(案情也可以有其他走向，比如黄雅教唆张峰杀人，或者黄雅和张峰共同犯罪等)</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忘川河</title>
      <link href="2021/04/crimaster-reasoning-lethe-river/"/>
      <url>2021/04/crimaster-reasoning-lethe-river/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>2021年4月17日早06:30，贵阳发生一起轿车坠河事件，车上人员一死一伤，死者余林是当地知名企业的财务总监，受伤者是司机也是其同事。警方将车辆打捞上岸之后，通过死者的人际关系，将三人列为犯罪嫌疑人。但因为疑点过多，将部分证据公布到CRIMASTER平台上，邀请各方侦探协同破案。</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><ul><li>案发现场:<br>路面环境整洁，桥边无防护栏;监控显示李顺正常驾驶无违规行为，突然驶向河中，在这个过程中有轻微减速现象。</li></ul><ul><li>失事车辆:<br>外力受损情况检测，汽车外部除右侧前后车门外无其他明显破坏，底盘有细微伤痕，刹车线完好，引擎盖检测内部也无外力损坏痕迹，汽车制动功能受损，无法正常制动。</li></ul><ul><li>物质检测:<br>检测到内部机械表面物质有较大量乙二醇乙醚、聚乙二醇、水和少量灰尘泥沙。</li></ul><ul><li>指纹检测:<br>汽车钥匙上发现余林和李顺的指纹。</li></ul><h1 id="余林-死者"><a href="#余林-死者" class="headerlink" title="余林(死者)"></a>余林(死者)</h1><ol><li>死者信息<br>余林，男，36岁，某公司财务总监，已婚，儿子五年前因意外溺水离世。</li></ol><ol start="2"><li>尸检报告<br>尸长170cm，肺内有大量积水，呼吸道有溺液。全身潮红；嘴唇发绀；血液不凝固；内脏淤血；睑结膜、粘膜、浆膜瘀点性出血。口鼻腔前可见多量淡红色蕈形泡沫，小臂上有不明显压痕，手背上有多处伤痕。血液内酒精浓度严重超标。</li></ol><ol start="3"><li>两瓶药<br>一瓶主要成分是奥氮平，另一瓶是解酒药，但在其中几粒中检测到头孢的成份。在部分胶囊上检测到李顺和黄雅的指纹。</li></ol><ol start="4"><li>邻居<br>称前几天听到余林夫妇半夜激烈的争吵声，好像是说什么孩子的事。</li></ol><ol start="5"><li>酒吧服务员<br>余先生是我们这的高级会员，昨天晚上来到我们这的，余先生停好了车就直接要了个包间和很多酒，中间没有出去过，也没人来找他，后来喝多了还砸了包间的桌子，因为是老会员，所以打算等他清醒了再说赔偿的事，今天早上我扶他出去看着他被一个朋友开车接走了，走的时候好好的。没想到人就这么没了。</li></ol><ol start="6"><li>同事证词<br>余林工作认真，自己的东西都是自己保管，从来没有听说他丢过什么东西。</li></ol><ol start="7"><li>行车记录仪<br>案发日早上无异常停车现象。</li></ol><h1 id="黄雅-妻子"><a href="#黄雅-妻子" class="headerlink" title="黄雅(妻子)"></a>黄雅(妻子)</h1><ol><li>嫌疑人信息<br>黄雅，女，35岁，死者余林的妻子，家庭主妇，已婚，儿子五年前因意外溺水离世。</li></ol><ol start="2"><li>口供<br>我和老余是很多年的夫妻了，感情一直很好，直到儿子五年前出了事，他好像是变了一个人，脾气变得异常暴躁，我知道这是因为儿子没了，他难受，可我又何尝不伤心啊。不过他也知道这样不对，后来每次想和我发脾气都去外边喝酒，我也习惯了。昨天晚上他和我说出去喝酒，我以为是和往常一样，没想到，人就这么没了。</li></ol><ol start="3"><li>一本相册<br>里面的照片属于一个可爱的小男孩大概六七岁，相册有被损毁的痕迹。</li></ol><ol start="4"><li>汽车保养单<br>與门汽车有限公司，4月14日做了车辆全面保养，费用8848元，签字人是张峰。</li></ol><ol start="5"><li>邻居证词<br>黄雅和余林这两口子经常吵架，这几年好了一些，但经常看到一个男人在余林不在的时候来找黄雅，但待的时间都不长，不太清楚两个人是什么关系。后经邻居指认，经常来找黄雅的神秘男子就是张峰。</li></ol><ol start="6"><li>监控<br>4月16日晚21:10黄雅出门倒垃圾，5分钟左右回到单元楼。</li></ol><ol start="7"><li>车程<br>黄雅家离余林常去的酒吧车程10分钟。</li></ol><h1 id="张峰-黄同学"><a href="#张峰-黄同学" class="headerlink" title="张峰(黄同学)"></a>张峰(黄同学)</h1><ol><li>嫌疑人信息<br>张峰，男，36岁，黄雅的同学，离异，无子女，舆门汽车有限公司经理。</li></ol><ol start="2"><li>口供<br>我和黄雅认识，我们是大学同学，不过毕业之后联系的就比较少了，我们也各自都有了家庭。不过后来听说他们家出了点事，家家都有本难念的经啊。我现在就在这家门店当经理，有时候也会亲自帮客户保养车辆。余先生前几天刚在我们这保养完汽车，我可以保证汽车没有任何问题。昨天晚上我发现我的烟没了，就下去买了盒烟，再没出去过。</li></ol><ol start="3"><li>店内监控<br>余林的汽车是在店内保养的，保养期间监控全程覆盖，未发现任何异常。</li></ol><ol start="4"><li>警方调查<br>黄雅的手机在案发前一天晚上给一个陌生号码打了电话，而号码的主人正是张峰。</li></ol><ol start="5"><li>监控<br>4月16日晚22:00离开单元楼，22:20进入单元楼(进出皆佩戴口罩)</li></ol><ol start="6"><li>超市老板<br>张先生昨天22:00左右在我这买了一包烟，肯定是他，我还和他说了几句话呢。</li></ol><ol start="7"><li>车程<br>张峰小区距离死者常去的酒吧车程20分钟。</li></ol><h1 id="李顺-同事"><a href="#李顺-同事" class="headerlink" title="李顺(同事)"></a>李顺(同事)</h1><ol><li>嫌疑人信息<br>李顺，男，28岁，单身，两年前经朋友介绍来到余林所在公司工作，为人踏实稳重。</li></ol><ol start="2"><li>口供<br>昨天我很早就回家睡觉了。今天早上我照常出门跑步，半路上看到余哥被人掺着晃晃悠悠的从酒吧出来，看样子喝了不少，我上去打了招呼，怕他出事就把钥匙拿过来准备送他回去，怕他晕车，还给他吃了醒酒药。路上和他聊起了家常，可不知怎么的，他突然就从后面扑上来打我，还按着我的胳膊，结果方向盘歪了，车往路外边冲，眼看着要掉河里了，我赶紧踩刹车，但刹车好像坏了一样，结果我们连车带人掉河里了。我好不容易打碎车窗从里面出来，然后去救余哥，可上岸后发现余哥已经死了，我对不住他!</li></ol><ol start="3"><li>家中灵堂<br>照片是一位青年男子，桌上放着一张教练员证和一张五年前的旧报纸(报纸内容:无良游泳教练被撤职处分)。桌下摆着一盆像柳树的盆栽。</li></ol><ol start="4"><li>陈旧的信<br>小顺，哥没法办的事你帮哥做了，这辈子当哥欠你的，哥下辈子还你。</li></ol><ol start="5"><li>伤痕<br>右侧脸颊有多处打击伤痕。检测后证张峰(黄同学)    明是余林造成的。</li></ol><ol start="6"><li>证词<br>(1)邻居:李顺这小伙子挺好的，基本每天早晨都出来锻炼身体。<br>(2)朋友:李顺以前是做销售的，眼看就要提拔做经理了，不知怎么就突然辞去了工作。</li></ol><ol start="7"><li>调查<br>李顺的单元楼监控显示其在案发前一晚并未出门。</li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>根据现有证据，对于余林的死，李顺需要承担什么责任?<br>A.过失致人死亡罪<br>B.故意杀人罪<br>C.无需承担上述责任</li></ol><ol start="2"><li>在无买凶杀人的情况下，根据现有线索，谁需要对余林的死负主要责任?<br>A.张峰一定负主要责任<br>B.李顺一定负主要责任<br>C.黄雅一定负主要责任<br>D.无法断定，张峰或黄雅都有可能需负主要责任</li></ol><ol start="3"><li>根据现有证据，余林的车什么时候被动手脚的可能性大?<br>A.未被动手脚<br>B.事故前12小时内<br>C.事故前12至24小时<br>D.事故前3至5天<br>E.不可确定</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尸检进阶篇-答案</title>
      <link href="2021/04/crimaster-reasoning-autopsy-advance-ans/"/>
      <url>2021/04/crimaster-reasoning-autopsy-advance-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>死者是生前入水还是死后入水?<br>A.生前入水<br><font color="#56c596">B.死后入水</font><br>C.无法判断  </li></ol><ol start="2"><li>死者的死因是?<br>A.溺死<br><font color="#56c596">B.扼死</font><br>C.颅内出血致死  </li></ol><ol start="3"><li>死者遭受致命伤害时最有可能处于什么状态?<br><font color="#56c596">A.昏迷</font><br>B.清醒<br>C.无法判断  </li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>生前溺死与死后抛尸入水的鉴别：</p><table><thead><tr><th><span class="block" style="width:80px">项目</span></th><th>溺死</th><th>死后抛尸入水</th></tr></thead><tbody><tr><td>口鼻部</td><td>白色或粉红色蕈样泡沫</td><td>无</td></tr><tr><td>呼吸道</td><td>全部呼吸道和肺泡内有溺液、泡沫和异物</td><td>仅上呼吸道有少量溺液、异物；若水压较大可达下呼吸道，但无泡沫</td></tr><tr><td>肺</td><td>水性肺气肿，肺表面有肋骨压痕、溺死斑，切面有溺液流出</td><td>无</td></tr><tr><td>心</td><td>左心血液较右心稀(淡水溺死)</td><td>左右心血液浓度相同，成分相同</td></tr><tr><td>胃肠</td><td>多有溺液、水草、泥沙等物</td><td>仅胃有少量溺液，一般不进入小肠</td></tr><tr><td>内脏器官</td><td>脑、肝、肾等器官淤血，脾收缩贫血</td><td>不一定有淤血等改变</td></tr><tr><td>手中</td><td>可握有水草或泥沙等物</td><td>无</td></tr><tr><td>硅藻检验</td><td>肺、大循环各器官、骨髓、牙髓内均有检出相当数量的硅藻</td><td>有时仅在肺中检出少量，其余器官不能检出硅藻</td></tr><tr><td>死亡原因</td><td>溺死</td><td>由其他原因</td></tr></tbody></table><p>该尸体胃肠道并无异物，左右心血无改变，仅在口鼻腔有少量液体，无明显挣扎痕迹，可判断为死后入水。</p><p><font color="#e03e3e">第一题为B选项</font></p><p>扼死(manual stragulation)  </p><ul><li>概念：指用单或双手扼压颈部而引起的室息死亡，又称为掐死。有时也指用肘部、前臂或器械压迫颈部致死。</li><li>扼死仅见于他杀。自扼死亡不可能，因为自己用手压迫颈部，当呼吸障碍时意识丧失，可使四肢肌肉松软，进而不能维续压迫颈部。  </li></ul><p>扼死的死亡机制及过程</p><ul><li>类似于机械性窒息死机制，即呼吸道压迫、血液供应障碍、神经刺激、动脉窦刺激等;</li><li>扼死过程的长短取决于扼颈的力量、部位。</li></ul><p>扼死的形态学特点</p><ul><li>颈部:主要是检验颈部皮肤的扼痕——其主要是由于手指未端的指甲卡压皮肤所致——因此具有新月形、短线型的特点。 并且与施力者的左右利手有关系，左利手在被害者的颈部右侧造成四个指印，左侧造成一个指印;而右利手则正好相反。</li><li>颈部深层组织损伤——深部肌肉组织可有与皮肤相对应的组织内出血；如果施加力巨大可以导致舌骨、甲状软骨的骨折。</li></ul><p>扼死的窒息征象</p><ul><li>颜面部——高度发绀肿胀，还可伴有相应的粘膜出血，以及附加伤害痕迹。</li><li>手足体表的损伤——进行抵抗、挣扎、防卫时的损伤。</li><li>内脏的变化——内脏淤血、部分器官组织的表面可见灶性出血。</li></ul><p>扼死的法医学鉴定  </p><ul><li>因扼死常为他杀。所以现场较凌乱，可见搏斗抵抗的痕迹，尸体体表可见暴力伤或抵抗伤，衣着散乱破碎。如果被害人处于意识丧失状态(如睡眠、醉酒、安眠镇静药状态中)可无抵抗。</li><li>如系女性被害，还要检查外阴、大腿内侧皮肤等损伤痕迹，提取阴道拭子以鉴别有无强奸。</li><li>同时注意扼痕周围有可能的条件下，提取指纹、在被害者的指缝可以提取痕迹等进行物证学的分析。</li></ul><p>本案中根据：<br>第一：死者头皮未见损伤，头皮下有片状出血，颅骨未见骨折，蛛网膜下腔出血分析系受钝性暴力作用所致，徒手打击、磕碰可以形成。<br>第二：死者颈部扼痕明显，体表余未见机械件损伤；颜面部淤血肿胀，伴有大量出血点，角膜中度浑浊，脸结膜有出血点；口鼻腔有少量液体，咽后壁、喉头可见点状出血；脑无致命性损伤，心肺表面点片状出血。<br>综合以上检验情况分析，死者机械性室息征象明显，认为是被人徒手扼住颈部致机械性室息死亡。</p><p><font color="#e03e3e">第二题为 B 选项</font></p><p>根据尸检情况，若死者在清醒状态下被扼颈，正常情况下由于挣扎反抗在扼痕周围应当有擦伤或抵抗伤，而尸检颈部仅扼痕处表皮剥脱，周围无抵抗伤，由此说明死者在昏迷状态下被扼颈可能性大。蛛网膜下腔出血，而颅骨未见骨折，死者头部磕碰硬物可以形成碰撞地面也可以形成，以此分析死者可能头部受击昏迷后被扼颈致窒息死亡。</p><p><font color="#e03e3e">第三题为A选项</font></p><p>部分现象解析：  </p><p>尸体的浮沉和腐败  </p><ul><li>吸入溺液，沉入水底</li><li>腐败气体产生，浮于水面</li></ul><p>生前未进食者因胃肠内积聚大量气体较容易先浮起<br>女性脂肪占体重的比例较男性大，故比重减轻，在相同情况下排开水的体积增大，浮力也增加，所以比较容易上浮。 </p><ul><li>男子重心偏向前方，浮尸多呈俯卧</li><li>女子重心偏向后方，浮尸多呈仰卧</li></ul>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尸检进阶篇</title>
      <link href="2021/04/crimaster-reasoning-autopsy-advance/"/>
      <url>2021/04/crimaster-reasoning-autopsy-advance/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>2021年4月16日早上05:00上海市淀山湖面有一具年轻女性尸体被发现，报案人为该片区环卫工人，警方立即赶到打捞尸体并封锁现场。死者经调查为一名23岁女性，于附近独自居住，法医解剖检验中心现已给出初步报告，具体鉴定结果需等待进一步调查。</p><img src="/assets/images/crimaster/2021/04/20210416-1.png" alt="图片" class="post-image half"><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>尸体浮于湖面之上，被发现时衣着完整，目前正在对衣物等线索进行提取并检测，初步报告已公开。</p><p>岸边脚印等痕迹繁杂，无法对该区域脚印等线索进行提取排查，湖周围几条路线安装有监控系统，已联系相关部门进行调取并排查。</p><img src="/assets/images/crimaster/2021/04/20210416-2.png" alt="图片" class="post-image no-limit-height half"><h1 id="受害者"><a href="#受害者" class="headerlink" title="受害者"></a>受害者</h1><ol><li>死者信息<br>方元圆，女，23岁，未婚，某地产公司销售，无犯罪记录，被害原因尚不明确。</li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>死者是生前入水还是死后入水?<br>A.生前入水<br>B.氰化物中毒<br>C.无法判断</li></ol><ol start="2"><li>死者的死因是?<br>A.溺死<br>B.扼死<br>C.颅内出血致死</li></ol><ol start="3"><li>死者遭受致命伤害时最有可能处于什么状态?<br>A.昏迷<br>B.清醒<br>C.无法判断</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尸检篇-答案</title>
      <link href="2021/04/crimaster-reasoning-autopsy-ans/"/>
      <url>2021/04/crimaster-reasoning-autopsy-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>死者的死亡原因？<br>A.一氧化碳中毒<br><font color="#56c596">B.氰化物中毒</font><br>C.有机磷酸中毒  </li></ol><ol start="2"><li>死者的大致死亡时间？<br>A.1~2小时<br>B.3~5小时<br><font color="#56c596">C.6~10小时</font><br>D.13~16小时  </li></ol><ol start="3"><li>死者长时间处于什么姿势？<br>A.悬垂位<br><font color="#56c596">B.仰卧位</font><br>C.俯卧位  </li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>【CO中毒】  </p><p>毒理作用：一氧化碳经呼吸道进入人体，与血红蛋白结合，形成碳氧血红蛋白，造成组织细胞缺氧。<br>临床表现：闪电型，中毒者突然倒地，昏迷，痉挛，呼吸麻痹，迅速死亡。<br>急性型临床表现：除感头沉重和额颞部发紧，继而出现剧烈头痛，眩晕，烦躁，呕吐，出汗，四肢无力与共济失调。<br>慢性型临床表现：可出现心动过速，心绞痛，神经衰弱，红细胞增多症，多汗，肝大等。<br>尸检所见：一氧化碳中毒死亡者，尸斑，肌肉，血液和器官均称特征性的樱桃红，以肌肉最为明显，全身各器官呈窒息改变。最佳检材为心腔血液，其次为胸大肌。</p><p>【氰化物中毒】 </p><p>毒理作用：氰化物进入机体后分解出具有毒性的氰离子。<br>临床表现：大剂量中毒常发生闪电式昏迷和死亡。摄入后几秒钟即可发出尖叫，发绀，全身痉挛，立即停止呼吸。<br>尸检所见：由于血液中有氰化正铁血红素形成，故尸斑，肌肉及血液均称鲜红色，死亡迅速者，全身各器官有明显的室息征象。口服中毒者，消化道各段均可见出血，水肿，胃及十二指肠粘膜出血，糜烂，坏死，胃及体腔内有苦杏仁味。吸入氰化物中毒死亡者，大脑，海马，纹状体，黑质充血水肿，神经细胞变性坏死，胶质细胞增生，心肝肾实质细胞变性。尸检应争取在腐败前进行。检材以胃内容物，心腔血液，肝肾肺及脑为佳。</p><p>【有机磷酸中毒】  </p><p>毒理作用：有机磷主要通过抑制胆碱酯酶而产生毒理作用。<br>临床症状：轻度中毒时，以M样作用为主，中度中毒时，既有M样作用，又有N作用，重度中毒时，除出现M样和N样作用外，还出现严重的中枢神经系统功能障碍。<br>尸检所见：尸斑显著，呈暗紫红色，口唇及指甲青紫，瞳孔缩小，口周可见白色泡沫，尸僵早而强。</p><p>通过结合死者的尸体信息及综上所述，可得知死者的死因为氰化物中毒。</p><p><font color="#e03e3e">为B选顶。</font></p><p>上海四月份为春季:</p><p>【根据尸斑推定死亡时间】</p><table><thead><tr><th><span class="block" style="width:80px">死亡时间</span></th><th>尸体现象</th></tr></thead><tbody><tr><td>0.5–1h</td><td>尸斑呈局限性，境界清晰，在低体位出现，小斑点，淡紫色</td></tr><tr><td>2–3h</td><td>逐渐向周围扩大，边界有点模糊，在尸体低下部都出现</td></tr><tr><td>4–5h</td><td>手指轻压尸斑退色。翻动尸体，现有尸斑消失，尸体低下部出现新的尸斑，即尸斑转移</td></tr><tr><td>6–10h</td><td>手指强压尸斑中等退色。翻动尸体，原有尸斑不再完全消失，尸体低下部出现新的尸斑，切开尸斑皮肤血液流出，即两侧性尸斑</td></tr><tr><td>11–15h</td><td>手指强压尸斑稍微退色。翻动尸体，原有尸斑不消失，新的尸斑也不易形成，切开尸斑皮肤，从血管断面缓慢流出血滴，并渗出浅黄色或红色液体</td></tr><tr><td>24h后</td><td>尸斑完全固定，手压不退色，切开尸斑皮肤无血液流出，皮下组织呈紫红色</td></tr></tbody></table><p>【根据尸僵判断死亡时间】  </p><p>尸僵一般于死后1~3小时开始出现，也有的于死后10分钟，迟至7小时或 更长的时间才出现。<br>尸僵发生的顺序，多为“下行型”，即自头到脚的方向发展。最先发生的是 咬肌和眼轮匝肌(约在死后1~3小时出现)→颜面、颈部肌(3~4小时))→胸、背肌(4~5小时))→上肢肌(5~6小时))→下肢肌(7~8小时))→全身肌肉(9小时以上)，12小时后，尸僵强盛，24小时左右最为僵硬。尸体各处僵直的强度不一，以下颌关节最强。死后68小时内，用外力去消除，尸僵还可重现；死后89小时后，用外力消除，尸僵则不会重现了。</p><p>【根据角膜混浊推断死亡时间】</p><table><thead><tr><th>死亡时间</th><th>角膜现象</th></tr></thead><tbody><tr><td>1-2h</td><td>湿润，瞳孔透明</td></tr><tr><td>3-4h</td><td>湿润，瞳孔开始发白</td></tr><tr><td>5-8h</td><td>开始干燥，瞳孔透明度逐渐丧失</td></tr><tr><td>9-11h</td><td>轻微混浊</td></tr><tr><td>12-23h</td><td>混浊增强，瞳孔尚能透视</td></tr><tr><td>24-30h</td><td>中度混浊到深度混浊</td></tr><tr><td>30h后</td><td>完全混浊，瞳孔不能看见</td></tr></tbody></table><p>根据尸检报告中三种情况大致可判断尸体死亡时间更<font color="#e03e3e">符合C选项</font>。<br>尸斑的分布位置，与尸体的姿势直接相关。<br>仰卧状尸体，尸斑出现在枕部、背部、腰部、臀部两侧及四肢后侧，有时也见干尸体侧面，甚至上面的倾斜区如锁骨上部;<br>俯卧的尸体，尸斑分布在颜面、胸部、腹部和四肢的前面，此时两侧眼结膜也往往呈淤血状;<br>处于立位的尸体，如悬吊的尸体，尸斑出现在下肢、下腹部和上肢的远端。<br>结合尸体查验，可得知死者长时间处于仰卧位。<font color="#e03e3e">为B选项</font>。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尸检篇</title>
      <link href="2021/04/crimaster-reasoning-autopsy/"/>
      <url>2021/04/crimaster-reasoning-autopsy/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>2021年4月14日上午05:00，警方接到报案，报案人称在上海市宝山区一处废弃工厂旁拾荒时发现一具尸体。警方迅速抵达并封锁了现场，线索由于案件线索较少，暂无法判断死 者信息，该尸体已被处理并交由检验中心，详细报告需等至明日，目前暂无法判断死者死因以及死亡时间，现公开全部信息，并希望 CRIMASTER侦探协助调查…</p><img src="/assets/images/crimaster/2021/04/20210414-1.png" alt="图片" class="post-image half"><p class="text-center">(案发地点)</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>  死者被发现于一处废弃工厂楼内西南角，面部遭到严重划伤，无法辨认死者信息，经过大力搜查，并未在工厂内发现可证实死者身份的证件以及物品。死者身上并无明显打斗痕迹，也无拖拽痕迹，案发现场经判断为第一现场。尸体旁有车辆驶入以及驶出痕迹，已对附近监控进行调取排查，目前已出具尸体初步检测报告，请根据报告内容协助警方侦破!</p><img src="/assets/images/crimaster/2021/04/20210414-2.png" alt="图片" class="post-image no-limit-height half"><h1 id="线索"><a href="#线索" class="headerlink" title="线索"></a>线索</h1><p>  更多线索警方正在调查并核实。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>死者的死亡原因？<br>A.一氧化碳中毒<br>B.氰化物中毒<br>C.有机磷酸中毒</li></ol><ol start="2"><li>死者的大致死亡时间？<br>A.1~2小时<br>B.3~5小时<br>C.6~10小时<br>D.13~16小时</li></ol><ol start="3"><li>死者长时间处于什么姿势？<br>A.悬垂位<br>B.仰卧位<br>C.俯卧位</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四张卡片-答案</title>
      <link href="2021/04/crimaster-puzzle-four-cards-ans/"/>
      <url>2021/04/crimaster-puzzle-four-cards-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>请前往泷湾码头</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>首先，我们观察到第一张卡片上的数字为七组，每组两位数，由彩色和黑色两种组成，因此，我们可以将其重组为两组，一组彩色，一组黑色:</p><img src="/assets/images/crimaster/2021/04/20210411-ans-1.png" alt="图片" class="post-image half"><p>我们先观察彩色:</p><img src="/assets/images/crimaster/2021/04/20210411-ans-2.png" alt="图片" class="post-image half"><p>一共由七种颜色组成，正好对应七个彩色数字于是，我们将同色的结构组合，得到:</p><img src="/assets/images/crimaster/2021/04/20210411-ans-3.png" alt="图片" class="post-image half"><p>七个数字的颜色分别为:红橙黄绿蓝靛紫，为彩虹颜色，因此，顺序即为卡片二的彩虹的颜色顺序</p><img src="/assets/images/crimaster/2021/04/20210411-ans-4.png" alt="图片" class="post-image half"><p>得到数字:4421253</p><p>然后观察黑色:</p><img src="/assets/images/crimaster/2021/04/20210411-ans-5.png" alt="图片" class="post-image half"><p>我们可以发现黑色的数字有些形状不完整，我们的第一直觉应该是将数字填充完整，但题目中并没有多余的线条供我们填充，所以这个想法排除我们可以尝试另一种解法:平移<br>可以观察到，图中的数字被红线分割成上下两部分，因此，我们尝试将红线下部分的结构整体平移(上部分也是可以的，不过平移方向相反)向右平移得到:</p><img src="/assets/images/crimaster/2021/04/20210411-ans-6.png" alt="图片" class="post-image half"><p>依旧有结构不完整的数字，排除<br>向左平移得到:</p><img src="/assets/images/crimaster/2021/04/20210411-ans-7.png" alt="图片" class="post-image half"><p>因此，我们可以得到数组:</p><p>47/41/25/12/23/56/34</p><p>第二张卡片中的字符为注音符号，左边为声母，上部为韵母。</p><img src="/assets/images/crimaster/2021/04/20210411-ans-8.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/04/20210411-ans-9.png" alt="图片" class="post-image half"><p>注音都是声母在前韵母在后，因此将七个二位数数组按先横后竖代入表格依次得到:</p><p>47:ㄑㄧㄥ → qing(请)</p><p>41:ㄑㄧㄢ → qian(前)</p><p>25:ㄨㄤ → wang(往)</p><p>12:ㄌㄨㄥ → long (泷)</p><p>23:ㄨㄢ → wan(湾)</p><p>56:ㄇㄚ → ma(码)</p><p>34:ㄊㄡ → tou(头)</p><p>因此最终答案为:请前往泷湾码头</p><p>我的室友知道后兴冲冲的打车前往了十几公里外的泷湾码头，不过，他不知道的是……这几张卡片其实是我故意寄给他的恶作剧。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四张卡片</title>
      <link href="2021/04/crimaster-puzzle-four-cards/"/>
      <url>2021/04/crimaster-puzzle-four-cards/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我叫小桐，十八岁，怀江中学一名普普通通的高中生。侦探小说爱好者，平时喜欢自己琢磨一些推理题。</p><p>“小桐小桐!帮帮我帮帮我!”这位大喊大叫的是我室友。</p><p>“啥事?</p><p>“诶嘿嘿嘿”他露出一抹邪魅的笑容对我说道:“我女神给我寄了几张卡片，我看不懂，你帮我破解破解”</p><p>卡片内容</p><img src="/assets/images/crimaster/2021/04/20210411-1.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/04/20210411-2.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/04/20210411-3.png" alt="图片" class="post-image half"><img src="/assets/images/crimaster/2021/04/20210411-4.png" alt="图片" class="post-image half"><p>提示:按彩虹之序重组，按红色之线平移</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>七个汉字例:（如：请前往咕咕岛屿）</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谜之解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶犬-答案</title>
      <link href="2021/04/crimaster-reasoning-fierce-dog-ans/"/>
      <url>2021/04/crimaster-reasoning-fierce-dog-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>直接造成艾尔莎死亡的什么物质?<br><font color="#56c596">A.可可粉</font><br>B.咖啡因<br>C.过氧化氢<br>D.代可可脂  </li></ol><ol start="2"><li>艾尔莎总共食用了几次足以致死的有害物质?<br>A.一次<br><font color="#56c596">B.二次</font><br>C.三次<br>D.四次  </li></ol><ol start="3"><li>谁是杀害艾尔莎的凶手?<br>A.鲍勃<br>B.凯瑟琳<br>C.拜伦<br><font color="#56c596">D.马修</font>  </li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>经过法医的进一步尸检，确定艾尔莎死于摄入过量甲基黄嘌呤造成的心脏麻痹，在警察调查线索的过程中，警方在查尔斯住宅的厨房里，发现了沾有马修指纹的打泡器，同时马修袖口的巧克力也成为了警方的观察重点，找到关键线索后，警方立即对其进行突击审问，最终马修承认了自己的罪行。</p><p>问题一:</p><p>此题为简单的科普类问题，首先因为代可可脂和过氧化氢没法对犬类动物造成实质性的损伤，所以直接排除C和D选项，其次因为凯瑟琳并没有杀害艾尔莎的动机，并且一杯速溶美式咖啡的咖啡因含量并不足以导致犬类动物心力衰竭，故第一题选A:可可粉。<br>(黑巧和可可粉中含有大量的可可碱，而可可碱的主要成分就是甲基黄嘌呤，犬类动物摄入后会出现过度兴奋，抽搐，呕吐，便血，心率加快等多种不良反应，如果不及时处理，将会危及生命)</p><p><strong>凶手剧情还原</strong></p><p>马修的家庭因为一场车祸而支离破碎，几个月前的他最终决定放弃薪酬可观的管家职务，继承母亲的衣钵。<br>父亲生前留下的怀表是马修唯一的精神寄托，可为了开设蛋糕店，他只好暂时当掉了自己心爱的怀表给查尔斯，为了赎回怀表马修开始拼命赚钱，终于可以赎回怀表的时候，查尔斯却因为觊觎怀表变卖的巨大收益将怀表变卖，这让马修崩溃到了极点。<br>案发当天马修前往庄园，想要拜托查尔斯赎回自己的怀表，可查尔斯完全没有意愿帮助马修，为此两人大吵一架，夺门而出的马修又气又恨，他想报仇，但并不敢杀人，所以他决定将对方最心爱的东西夺走，用以牙还牙方式，将艾尔莎送往地狱。<br>他轻车熟路的潜入了厨房，做了一份艾尔莎喜欢吃的甜点并在其中加入了大量的巧克力和可可粉，袖子在制作甜点时粘上了巧克力，成为了关键性的证据。<br>常年的相处让艾尔莎对马修完全没有戒心，便将大量巧克力吃了进去，因为狗的消化系统没法消化可可碱中的甲基黄嘌呤，所以在不久后，艾尔莎便死在了自己的狗屋当中。</p><p><strong>其他嫌疑人剧情及排除原因</strong></p><p>1、拜伦因为染上赌瘾而欠下巨债，黑帮找上门来拜伦只好借助自己客户查尔斯的帮助才避免了危机，可令他没想到的是查尔斯反倒开始变本加厉，不断增加债务，勒索他交出宠物医院的地契来偿还欠债，但拜伦的妻子并不同意，声称只要交出地契，就会跟拜伦离婚。<br>就在拜伦走头无路的时候，他收到了黑帮老大戴维的消息，怀着试一试的态度，他按时到达咖啡馆，戴维告诉拜伦，自己的宝贝女儿在玩耍时，受到了艾尔莎的袭击，这给她年幼的孩子带来了很大的肉体及精神伤害，所以他委托拜伦来害死艾尔莎来为自己的女儿报仇。<br>急于还清债务的拜伦自然不想拒绝，于是案发当天，拜伦按约定来到庄园做例行检查，管家送来甜点之后，拜伦趁四下无人将随身携带的黑巧喂给艾尔莎，然后匆忙离开。<br>14:00管家带艾尔莎散步时，出现过度兴奋和抽筋，便是甲基黄嘌呤中毒造成的。<br>但在之后，本应等待艾尔莎死亡的拜伦，却回想起自己开设宠物医院的初衷和自己所热爱的动物，自己杀死艾尔莎，跟冷血无情的暴徒根本没有区别。<br>拜伦不允许自己这么做，就算走投无路，自己也不能做这种伤天害理的事，因为他清楚自己喂食的剂量足以致死，狗狗死亡只是时间的问题，拖的越晚越危险，于是连忙带着药箱返回了庄园因为太过匆忙甚至连外套都没有穿。<br>趁情况还能控制时，他赶紧将过氧化氢强行灌给艾尔莎(这便是马修进入庄园，看到拜伦慌张的原因)使其将胃内的巧克力残留全部吐了出来之后又喂了一袋益生菌，确认艾尔莎恢复健康之后，拜伦便安心的离开了，在回家的路上还偶遇了路过的鲍勃。<br>(过氧化氢是治疗狗狗误食危险物质而进行强制催吐的药品，对狗狗的胃有一定伤害，所以要及时补充益生菌进行治疗)<br>排除原因:黑巧的可可碱含量颇高，仅次于可可豆本身，犬类动物食用黑巧后，刚开始会有短暂的兴奋状态，一段时间后就会失去行动能力，不到两个小时就会殒命。<br>因为马修15:35到达的时候，艾尔莎还没有死亡，但艾尔莎14:00就已发病，说明有人曾经对其实施过治疗，因为第二次返回庄园拜伦没有穿外套的关系，身上没有携带巧克力，排除二次作案的可能，<br>且在离开庄园后，拜伦就联系妻子离婚，如果计划成功，他拿到钱，完全可以留住妻子，但他却同意签署离婚协议，证明计划失败，排除嫌疑。</p><p>2、去年年底凯瑟琳的母亲突发尿毒症被送进医院，需要很多钱进行手术和透析，凯瑟琳只好寻求地主查尔斯的帮助，这才让母亲捡回一命，但尿毒症的顽固性，让她一直肩负着压力。<br>打工赚取的工资，只能保证母亲健康，她并没有多余的钱可以偿还查尔斯的债务，于是她想到了另一种赚钱的方法。<br>她用自己性感的照片招揽生意，私下开设了一个会员制的群聊，只有付钱才能进入，但偏偏好巧不巧，查尔斯混入了其中，并在一次私下见面当中，被偷拍了数张没戴面具的照片，查尔斯借此来威胁凯瑟琳cos不同职业的女性角色，来满足自己的欲望。<br>年初查尔斯因为痛风，而失去行动能力，这让他变本加厉胁迫凯瑟琳，让其来自己的家中表演在养伤期间，凯瑟琳认识了一位家境优越的男朋友，两人的进展非常顺利，即将结婚，这将解决凯瑟琳照顾母亲的压力，可查尔斯咄咄逼人，用将照片和群聊公布给男朋友的理由继续威胁凯瑟琳，被狗咬伤的凯瑟琳不愿再去庄园，但迫于私密照片的威胁，凯瑟琳只好同意，但这次她不想再顺从查尔斯。<br>案发当天，凯瑟琳准备了女警官的cos来满足查尔斯，在屋里大概进行了两个小时，马修在门口听到的音乐就是凯瑟琳跳舞时播放的。<br>马修的敲门声让凯瑟琳借机离开了书房，然后她便偷偷潜入了查尔斯的卧室，花了很久时间才在书房里找到对方拍摄的羞耻照片，从书房出来的时候，她不小心被清洁工发现，她怕事情败露于是便匆忙的离开了庄园。<br>排除原因:凯瑟琳当天前往宅邸的目的，是拿回自己的暴露照片，从清洁工的口供可以了解到，凯瑟琳的目的已经达成，并没有杀害艾尔莎的动机，同时因为凯瑟琳跟艾尔莎并不熟悉，靠近艾尔莎并使其喝下美式咖啡非常困难，同时因为女性的力量不够，根本没有办法与一只75公分的黑背对抗，故排除嫌疑。<br>同时，因为艾尔莎的习性，她不会接受陌生人随意丢弃的巧克力或任何食物，故排除凯瑟琳以及其他可能人物，意外将巧克力掉在狗屋附近的可能。</p><p>3、鲍勃为了经营自己的糖果厂而向老朋友查尔斯借钱，随着糖果厂上市，鲍勃风头正盛，将赚来的钱全部投了进去，这让他一时间没法偿还查尔斯的债务，而查尔斯也在同一时间抓住了他使用劣质原材料的把柄，并借此开始不断提高利息，鲍勃清楚自己使用劣质原材料的事情一旦败露，糖果厂将不复存在，自己也将受到法律的制裁，于是案发当天，鲍勃便去找查尔斯谈判，希望对方能放过自己。<br>可他根本不知道犬类动物无法进食巧克力，就拿了一份白巧克力礼盒当作艾尔莎的礼物送了过去，这让查尔斯勃然大怒，促使二人谈判提前取消。<br>鲍勃生性冲动，被轰走的他越想越气，便用拐杖将艾尔莎的水盆打翻了，这时因为吃下巧克力而极度兴奋的艾尔莎，无视狗链勒住脖子的疼痛，强行将鲍勃扑倒在地，抓伤了鲍勃的手，西装在这个时候粘上了草坪上的呕吐物，留下了巧克力和过氧化氢的污渍。<br>情急之下，鲍勃抄起自己手里的拐杖，狠狠的打在了艾尔莎的头上，艾尔莎虚弱之际，鲍勃赶忙推开了它，然后逃之夭夭。<br>事后鲍勃害怕自己会染上狂犬病，便预约了晚上八点的门诊，后来警察传唤鲍勃，鲍勃以为自己杀死了艾尔莎，如果被查尔斯知道，自己工厂原材料造假的事情将会被曝光，于是他决定隐瞒真相，害怕拐杖上检测到艾尔莎的血迹，于是便掩耳盗铃般的用胶带缠住了沾满血迹和留有新鲜伤痕的握把。<br>(免疫球蛋白可以快速阻隔狂犬病毒进入人体中枢神经，待狂犬疫苗生效后，方可杀死狂犬病毒，是第一时间抵御狂犬病毒的不二选择)<br>排除原因:因为鲍勃并不知道巧克力会杀死犬类动物，同时白巧克力成份大多都是牛奶和代可可脂，真正的可可碱成份微乎其微，并且鲍勃制作的巧克力根本没有添加真正的可可脂，没法对犬类动物造成伤害，所以排除嫌疑。</p><p>问题二：</p><p>因为鲍勃和凯瑟琳与艾尔莎并不熟悉且没有动机的缘故，二人并没有为其服用任何有害物质，上述解析可以了解到，拜伦仅喂食艾尔莎一次，凶手马修喂食艾尔莎一次，故第二题选B。(因为过氧化氢属于狗狗误食后，紧急救治的工具，超高剂量的过氧化氢才会有致死可能性，并且拜伦并没有用过氧化氢杀害艾尔莎的动机，故第二题只能选B)</p><p>综上所述故本案的凶手为马修，第三题选D。</p><p>时间线:拜伦进入一凯瑟琳进入(期间一直给查尔斯进行表演)一拜伦喂食巧克力后离开一管家带领艾尔莎散步，艾尔莎出现不良反应一管家带着艾尔莎返回一拜伦返回紧急治疗一马修进入一凯瑟琳前往书房寻找照片一拜伦离开一鲍勃遇到拜伦后进入一马修前往厨房制作巧克力甜点一马修喂食巧克力后离开一凯瑟琳找到照片后离开一鲍勃遇袭后离开。</p><p>关于狂犬病的科普:</p><p>狂犬病，又称恐水症，是通过哺乳类动物传播的中枢神经病毒，如果在24小时内没有及时接种疫苗，狂犬病毒将随着脊髓进入大脑的中枢系统，因为人体的中枢细胞没有无法再生的关系，一旦狂犬病毒进入中枢神经将没有治愈的可能，其中延髓型麻痹是狂犬病的主要症状之一，患上延髓型麻痹的患者会出现吞咽困难等一系列神经疾病，最终走向死亡。</p><p>(世界上起初没有宠物，各自为营，人类用自己过人的天赋站在了金字塔的顶端，动物们想跟人类和平相处，才慢慢的收起了自己的尖牙和利爪，每一个生物起初都是善良的存在，狗也一样，从没有恶犬，只有作恶的主人，为了合群，它们只能顺从。宠物是我们的朋友，请各位文明养犬，善待宠物，让它们感受到温暖。)</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶犬</title>
      <link href="2021/04/crimaster-reasoning-fierce-dog/"/>
      <url>2021/04/crimaster-reasoning-fierce-dog/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>  2021年04月09日下午17:30，英国爱丁堡警方接到报警电话，当铺老板查尔斯称自己的爱犬艾尔莎死在了院子的狗屋里，疑似是蓄意伤查尔斯(狗主) 害，警方立即介入调查，根据当天庄园的访客记录显示，警方确认4位可能伤害狗狗的嫌疑人，由于案件行为过于恶劣且对狗主人查尔斯造成了严重的心理伤害，为此警方借助媒体公布了案件情况，希望CRIMASTER的侦探们帮助警方快速侦破此案!</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>  查尔斯房子的前面，有一块面积不大的院子，供艾尔莎平时嬉戏，狗屋就位于大门的不远处，因为是私人宅邸，所以并未安装任何监视设备，无法看到接近狗屋附近的人。艾尔莎被发现死于自己的狗屋当中，现场有打斗的痕迹，狗屋内外发现多处呕吐物，狗屋外装水的容器被打翻在地，狗盘里除了没有吃完的松饼和糖浆外，还有一些巧克力的残渣。</p><p>  在查尔斯宅邸的街对面，有一处便利店的摄像头，照到了当天进出宅邸的嫌疑人。</p><p>  13:28拜伦进入<br>  13:40凯瑟琳进入<br>  13:50拜伦离开<br>  14:03管家携艾尔莎散步<br>  14:25管家返回<br>  15:20拜伦返回庄园<br>  15:35马修进入庄园<br>  15:50拜伦离开庄园<br>  16:00鲍勃进入庄园<br>  16:20马修离开庄园<br>  16:30凯瑟琳离开庄园<br>  16:45鲍勃离开庄园</p><h1 id="查尔斯（狗主）"><a href="#查尔斯（狗主）" class="headerlink" title="查尔斯（狗主）"></a>查尔斯（狗主）</h1><ol><li><p>嫌疑人信息<br>男，48岁，艾尔莎的主人，在城区经营着一家效益不错的当铺，父亲死后继承了占地150平米的两层住宅，为人性格顽劣，嚣张跋扈。</p></li><li><p>口供<br>今天就跟往常一样，我等待着那些欠钱不还的人来找我，因为痛风的缘故，我没法自由走动，所以一直在安排管家帮我照顾女儿。<br>下午五点的时候，我让管家带我去院子看看女儿，女儿趴在狗屋里，露出一个脑袋，一动不动的，我起初以为它睡着了，可凑近一看，我发现女儿的头上竟然被人开了一个口子，流了好多血，送到医院的时候，我的女儿已经没有呼吸了。<br>现在回想起来一定是今天过来的那几个混蛋干的，你们一定要抓住凶手，我要让他偿命!</p></li><li><p>消息记录<br><strong>3月28日9:00</strong><br><strong>鲍勃</strong>:好兄弟，看在咱们的交情上，能不能再宽限我几天?<br><strong>查尔斯</strong>:死胖子，别以为咱们的关系还跟以前一样，该还的钱你必须得还!鲍勃:再宽限我一段时间吧，我公司才刚上市。<br><strong>查尔斯</strong>:没得商量，九号之前你要是不把寄存的欠账还清，我就把你原材料造假的事情曝光。</p><p><strong>4月9日 12:30</strong><br><strong>查尔斯</strong>:小姑娘，这跟咱们说好的不一样吧?<br><strong>凯瑟琳</strong>:大叔，我是真没办法，我这工资都没发呢。<br><strong>查尔斯</strong>:等会来我庄园一趟，把你的那些装备带过来给我玩玩，兴许我高兴了，就给你延期几天。<br><strong>凯瑟琳</strong>:想的美，我可不敢再去你家了。<br><strong>查尔斯</strong>:上次是意外，我保证这次不会发生。<br><strong>凯瑟琳</strong>:除非你把我的欠款抹掉，不然休想!<br><strong>查尔斯</strong>:我现在是在给你机会，没你讨价还价的份，别忘了你那些没有带面具的照片!</p></li><li><p>交易记录<br>一份二手交易市场的销售记录，一块老式怀表以八万英镑的价格出售。</p></li><li><p>邻居的描述<br>查尔斯在我们这边开了一家当铺，因为附近没有其他竞争者的关系，他很富有，所以很多人有难都会去找他借钱，虽然他人品很差，但借钱倒是非常大方，只要填写借据他就会借钱。</p></li><li><p>特殊群组<br>查尔斯的交友软件里发现一个需要付费进入的特殊群组，群主是凯瑟琳。</p></li><li><p>清洁工的描述<br>查尔斯先生因为行动不便的关系，每周都会委托我过来清理他的房子，今天我在打扫卫生的时候，看见一个蓝头发的女孩慌张的从主人的卧室走出来，似乎是干了什么坏事，鬼鬼祟祟的。</p></li><li><p>礼物<br>在查尔斯书房的桌子上，放着一个包装精致的礼盒，里面放了几种不同款式的白巧克力，其中有两块被吃掉了，包装纸还放在盒子上。</p></li></ol><h1 id="艾尔莎（狗）"><a href="#艾尔莎（狗）" class="headerlink" title="艾尔莎（狗）"></a>艾尔莎（狗）</h1><ol><li><p>被害的狗狗<br>4岁，纯种的雌性黑背，身长75公分，是查尔斯唯一的亲人，对此查尔斯非常溺爱，不管闯什么祸，他都会毫不犹豫的原谅艾尔莎。</p></li><li><p>尸检报告<br>额头遭受袭击，造成轻微骨裂和挫伤，项圈把脖子勒出了血印，前爪的指甲上留有一些不属于自己的血液和皮屑，而真正的死因则是心率加快造成的心力衰竭，死亡时间暂不确定，具体的情况需要等待进一步检查。</p></li><li><p>邻居的描述<br>那条狗就跟他嚣张跋扈的主人一样，别看它不会吼叫，其实凶恶的狠，陌生人朝他扔点吃的，它都会发飙，更别提套近乎了，只有遇到熟人才会安分一点。附近的孩子们都不愿往查尔斯房子那边走，要是没有狗链拴着，它甚至会把人扑倒在地，要是没反应过来，一定会被咬的血肉模糊。</p></li><li><p>管家的描述<br>下午我按时把松饼放在了艾尔莎的甜品盘子里，那时候医生还在对它做身体检查，之后14:00左右因为主人正在接待客人的缘故，抽不开身，我只好自己带着艾尔莎出门遛遛。<br>它今天异常兴奋，我使劲拽着狗绳才没让它跑掉，在后院走了一阵，它的小腿突然开始抽筋，全身发抖，我给它抻了抻，之后我看它身体还是不太舒服，就连忙带它回狗屋了。<br>下午17:10我忙完手头的活，就推着轮椅把主人带到室外，主人打算跟艾尔莎玩会儿，可是推出去的时候却发现艾尔莎死在了狗屋里。</p></li><li><p>嗜好<br>艾尔莎非常喜欢吃甜的东西，虽然医生再三警告甜品对狗狗无益，但溺爱的查尔斯还是会每天给它准备甜点。</p></li><li><p>疾病<br>艾尔莎在年幼时患上了声带疾病，为了保命，查尔斯只好安排医生手术，将艾尔莎的整条声带去除。</p></li></ol><h1 id="拜伦（医生）"><a href="#拜伦（医生）" class="headerlink" title="拜伦（医生）"></a>拜伦（医生）</h1><ol><li><p>嫌疑人信息<br>拜伦，男，31岁，兽医专业毕业，跟妻子合资开了一家宠物医院，正义感强烈，同时也是查尔斯特别雇佣的私人宠物医生，专门为艾尔莎进行定期体检和营养搭配。</p></li><li><p>药箱<br>拜伦随身携带的药箱里有一袋棉签，听诊器，一卷纱布，两瓶双氧水，几盒汽巴100，半瓶过氧化氢和一盒开封的宠物用益生菌。</p></li><li><p>风衣<br>在拜伦的风衣口袋里发现几颗水果糖和吃掉一半的黑巧，据悉是因为拜伦患有严重的低血糖，会常备糖果以防万一。</p></li><li><p>赌博<br>拜伦在半年前沾染上赌博了恶习，之后一发不可收拾，这让他欠下了不少外债。</p></li><li><p>消息记录<br><strong>3月28日13:00</strong><br><strong>妻子</strong>:你这烂赌鬼，居然想把我们的心血抵给查尔斯那个混蛋，我是不会答应的!<br><strong>拜伦</strong>:一步错步步错，除了把医院的房契交给他，我已经想不出什么能够抵消掉那些利滚利的债务了。<br><strong>妻子</strong>:你要是敢把房子抵掉，我们就离婚。<br><strong>拜伦</strong>:亲爱的，你要相信我啊，咱们一定会东山再起的!<br><strong>妻子</strong>:没得商量。</p><p><strong>3月30日11:00</strong><br><strong>戴维</strong>:拜伦医生，我能帮你还清欠债，不需要任何利息。<br><strong>戴维</strong>:你只需要帮我办一件事就行。<br><strong>拜伦</strong>:什么事?只要不是杀人我都肯干。<br><strong>戴维</strong>:放心，明天下午在医院旁边的咖啡厅见面，我们细谈。<br><strong>拜伦</strong>:好。</p><p><strong>4月9日 16:30</strong><br><strong>妻子</strong>:想好了吗?<br><strong>拜伦</strong>:对不起，亲爱的，我尽力了。<br><strong>妻子</strong>:嗯，离婚吧。<br><strong>拜伦</strong>:好。</p></li><li><p>口述<br>下午13:30我按计划来到庄园给艾尔莎检查身体，大概到了吃甜点的时间，一个蓝头发的女人走进庄园，好像很讨厌我的样子，刻意的绕了一大圈才走进查尔斯的房子。<br>确定没有身体异常之后，我就返回了医院，可后来我想到那些糖浆和松饼可能会影响艾尔莎的消化系统，甚至会导致腹泻，我不太放心，于是索性拿了一盒益生菌返回了庄园，给艾尔莎喂了一袋。<br>确定它没有问题，我才离开庄园，回家的路上碰见了附近糖果厂的老板，寒暄了几句，我就走了。</p></li><li><p>合照<br>一张家庭合照，合照里是一群猫猫狗狗围着拜伦夫妇的画面。</p></li></ol><h1 id="马修（面点师）"><a href="#马修（面点师）" class="headerlink" title="马修（面点师）"></a>马修（面点师）</h1><ol><li><p>嫌疑人信息<br>马修，男，26岁，查尔斯的前管家，为人亲近，做事果断，两个月前离职。</p></li><li><p>口供<br>大概三点半，我提前结束营业，带着欠款来找查尔斯先生，进门看见正在一旁照顾艾尔莎的医生，他一脸焦急的样子，大冷天也不穿外套，我怕他冻着，就提醒了他一句，结果他完全不搭理我。<br>之后我听佣人的话，到二楼书房找他，在门前我听到了一些嘈杂的音乐声，我敲了敲门，一个穿着米色风衣的蓝发女孩便走了出来，她对我笑了笑，就离开了。<br>接着我进屋拿出欠款，交还给他，可他却告诉我欠款的金额又提高了，这让我很不爽，随即便跟他大吵了一架，出门不小心撞到了一个胖子，当时正在气头上，就没跟他道歉。</p></li><li><p>袖子<br>在马修白色衬衫的袖子上粘着一些巧克力，马修称大概是做蛋糕时不小心蹭到的。</p></li><li><p>意外<br>九月初，父母在庆祝红宝石婚姻纪念日时发生严重车祸，双双殒命。</p></li><li><p>继承<br>马修的母亲曾是当地有名的面点师，在母亲去世后，马修继承了母亲的衣钵:花钱开了一家蛋糕店。</p></li><li><p>客户的评价<br>马修这孩子真够坚强的，家里出了这档事，还有心情开蛋糕店，不过他的手艺真没得说，虽然跟她妈妈比起来还有一定差距，但口味已经很不错了，我最喜欢吃的就是他做的布朗尼蛋糕。</p></li><li><p>消息记录<br><strong>4月7日9:00</strong><br><strong>马修</strong>:实在抱歉，查尔斯先生，我这边周转出了点问题，债务可能还要再拖欠几天。<br><strong>查尔斯</strong>:没事，看在咱们的交情上，那笔钱我就不找你要了。<br><strong>马修</strong>:感激不尽!那今晚方便我去您家里取回我的东西吗?<br><strong>查尔斯</strong>:你不用来了，我帮你卖了个好价钱。<br><strong>马修</strong>:什么?你快给我赎回来!</p></li></ol><h1 id="凯瑟琳（服务生）"><a href="#凯瑟琳（服务生）" class="headerlink" title="凯瑟琳（服务生）"></a>凯瑟琳（服务生）</h1><ol><li><p>嫌疑人信息<br>凯瑟琳，女，21岁，单亲家庭，大学辍学来到社会打工，工作和收入都很不稳定，现在正在一家24小时营业的中餐厅当服务生。</p></li><li><p>口供<br>因为昨天上夜班的关系，我睡到下午才醒，起床就接到了那个老家伙的骚扰电话，我的工资根本还不起他日益累加的债务，但欠了就是欠了，我没办法，只好去找他。<br>下午13:40我去找他商量，软磨硬泡的很久，那老家伙才同意再宽限我几天，15:30左右我正准备离开，就听见屋外有人敲门，打开门看见一个面熟的人，现在回想起来那人应该是之前房子的管家，我当时没多想，就离开了，临走前，那只咬人的臭狗还死盯着我，我真是恨透它了!</p></li><li><p>家庭状况<br>凯瑟琳的母亲在年初被诊断为尿毒症，需要进行频繁的透析和药物治疗，价格高昂。</p></li><li><p>便利店小票<br>小票显示，凯瑟琳在下午13:20购买了一袋草莓面包和一杯美式咖啡。</p></li><li><p>接种记录<br>凯瑟琳在今年三月份因为创口三级暴露的原因，接受了狂犬疫苗的注射。</p></li><li><p>手提包<br>凯瑟琳的手提包里除了一些化妆品和证件外，还有一把警棍，一副手铐，一根皮鞭，一条紧身短裤和一叠不雅照片。</p></li><li><p>婚约<br>凯瑟琳最近正在跟一位家境优越的男士约会，感情进展顺利，甚至到了谈婚论嫁的阶段。</p></li></ol><h1 id="鲍勃（老板）"><a href="#鲍勃（老板）" class="headerlink" title="鲍勃（老板）"></a>鲍勃（老板）</h1><ol><li><p>嫌疑人信息<br>鲍勃，男，44岁，一个脾气急躁的富态中年人，腿脚不太方便，文化程度低，在爱丁堡附近经营着一家大型的糖果制造厂，与查尔斯是旧识。</p></li><li><p>上市<br>鲍勃糖果厂制作的糖果品种多样，物美价廉，在当地很受欢迎，优秀的绩效加上口碑，使鲍勃的公司终于在年初确认上市，糖果即将流通世界各地。</p></li><li><p>拐杖<br>鲍勃拐杖的握把上贴满了胶布，据他说是为了避免手滑，而特地减少摩擦用的。</p></li><li><p>口供<br>我为了维持糖果厂的运营，找查尔斯借了很多钱，现在糖果厂的经营刚刚稳定，我抽不出财产来还债，只能一拖再拖。<br>于是今天下午四点左右我去庄园找他，期间偶遇了刚刚离开庄园的拜伦医生，他今天心情好像很好，笑呵呵的，明明天气还有点冷，他却穿着一件单薄的衬衫。<br>到达书房门口的时候，我听到查尔斯好像正在跟之前离职的管家吵架，就没进去打搅，等了大概十分钟，管家摔门而出，径直撞到了我，我心想对方跟我的情况差不多，就没追究。<br>接着我便走了进去，把特意给狗准备的礼物放在了办公桌上，诚恳的希望他再宽限我几天，可他完全不领情，没说两句就把我轰走了。</p></li><li><p>预约<br>鲍勃在网上预约了今晚八点在中央医院的门诊，并询问了免疫球蛋白的功效。</p></li><li><p>西装<br>鲍勃的黑色西装背后，沾有一些巧克力和过氧化氢的污渍。</p></li><li><p>受伤<br>鲍勃的左手有几道新鲜的伤痕，鲍勃说是被自己家的布偶猫抓伤的。</p></li><li><p>消息记录<br><strong>4月1日14:00</strong><br><strong>杰克</strong>:老板，最新一批的仿真可可脂已经到货，你确定要用于之后巧克力的制作吗?<br><strong>鲍勃</strong>:当然，以咱们现在的出售价格，想用真正的可可脂和可可粉制作巧克力根本没有盈利空间。<br><strong>杰克</strong>:可是这玩意的味道，确实还是跟真品有本质区别的。<br><strong>鲍勃</strong>:没事，你再往里掺点代可可脂，那些蠢顾客根本尝不出来。</p></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>直接造成艾尔莎死亡的什么物质?<br>A.可可粉<br>B.咖啡因<br>C.过氧化氢<br>D.代可可脂</li></ol><ol start="2"><li>艾尔莎总共食用了几次足以致死的有害物质?<br>A.一次<br>B.二次<br>C.三次<br>D.四次</li></ol><ol start="3"><li>谁是杀害艾尔莎的凶手?<br>A.鲍勃<br>B.凯瑟琳<br>C.拜伦<br>D.马修</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公平正义-答案</title>
      <link href="2021/04/crimaster-reasoning-justice-ans/"/>
      <url>2021/04/crimaster-reasoning-justice-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>施山和施寺谁更有可能获得胜利？<br>A.施山<br><font color="#56c596">B.施寺</font><br>C.获胜概率相同</li></ol><ol start="2"><li>获胜的概率为？<br><font color="#56c596">A.100%</font><br>B.86%<br>C.67%<br>D.50%  </li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>为了描述方便，用R,Y,B,G分别表示红、黄、蓝、绿色;a,b,c,d分别表示“死因”、“工具”、“物证”、“死神”。M表示施山，N表示施寺。</p><ol><li><p>理解游戏流程</p><ol><li><p>准备过程:</p><img src="/assets/images/crimaster/2021/04/20210409-ans-1.png" alt="图片" class="post-image">通过以上流程，最终我们可以发现:“桌面”上一共有4个盒子;颜色R,Y,B,G各一种;内容a,b,c,d各一种;数字不确定。</li><li><p>提示内容:<br>用(颜色+内容+数字)的形式给四个盒子编号可以得到“书架”上的盒子为Ra1,Ra2,Rb1,Yc4,Ya6,Yd7,Bc5,Bd3,Bb9,Gb7,Gc2,Gd9.甲乙丙在检查盒子和卡牌的时候可以知道书架上的盒子。<br>由于甲只知颜色，乙只知内容，丙只知数字，可以根据甲乙丙的对话进行如下推断:</p><ol><li><p>丙不知道→丙可以知道数字，而他无法判断是什么牌→盒子中数字有重复:Ra1,Ra2,Rb1,Yd7,Bb9,Gb7,Gc2,Gd9符合 </p></li><li><p>甲知道丙不知道一甲只知颜色，丙只知数字甲可以确定丙无法判断是哪个盒子包含哪张牌一甲所选的盒子颜色中的数字，每一个都有重复:Ra1,Ra2,Rb1,Gb7,Gc2,Gd9符合</p></li><li><p>乙也不知道一在明白了以上信息后，凭借内容还是无法判断一剩下的牌内容还有重合:Ra1,Ra2,Rb1,Gb7符合</p></li><li><p>甲依旧不知道→在明白了以上信息后，凭借颜色还是无法判断→颜色有重合:Ra1,Ra2,Rb1符合</p></li></ol><p>5.丙知道了→虽然一开始无法判断，但是在明白了以上信息后，凭借数字可以得到信息→数字不重合:Ra2</p><p>最终得到:R (红色盒子)内的牌上的内容一定是 a (死因)。<br>注意:以上推断需要结合对话的语境，一步一步推理得到，而不是只相对于最开始的牌型。丙的最后“知道”不代表可以推断出最后所有的牌。根据流程强调的随机性也可知，不存在推理出最后所有牌型的情况。</p></li><li><p>游戏流程及胜负判定:</p><img src="/assets/images/crimaster/2021/04/20210409-ans-2.png" alt="图片" class="post-image"></li></ol></li><li><p>可能性计算:</p><ol><li><p>理解题目中的隐藏条件:</p><ol><li>根据1中内容得到，电脑“桌面”上的盒子表示为: R(a),① (?),② (?),③(?)<br>其中，①②③分别表示:除了R以外左数第1、2、3个盒子;()里为牌正面的内容。</li><li>M赢得胜利会从A穿过大厅到B，失败不会，根据场馆平面图可推出:N可以知道M的游戏结果。</li><li>本题关键不在于概率，而在于策略。“游戏开始前可以交流”，因此M和N可以相互交流策略， M可以告诉N自己会打开第几个盒子。“MN可以在不影响自己胜率的情况下互相帮助”也对此有所提示。</li></ol></li><li><p>证明N的胜率大于M的胜率，且为100%:</p><ol><li><p>M需要选到“a”+“b”，在确定R盒为a的后，M第一个选红色盒子R。接下来M要从剩下三个盒子中选两个，两个盒子中不一定有b。因此M胜利的可能性小于100%。</p></li><li><p>N需要选到“a”+“c”，N胜率为100%。必胜法可以如下:<br>事先两人商量方案:M选R得到a。接着，M选除 R外左数第1个盒子。<br>如果得到b，M选除R外左数第2个盒子;<br>如果得到c，M选除R外左数第2个盒子;<br>如果得到d，M选除R外左数第3个盒子。<br>N观察M是否胜利，然后选R得到a。N选除R外左数第2个盒子。<br>如果得到c，直接获胜;<br>如果得到b且M胜，N指认除R外左数第1个盒子;<br>如果得到b且M败，N指认除R外左数第3个盒子;<br>如果得到d且M胜，N指认除R外左数第3个盒子;<br>如果得到d且M败，N指认除R外左数第1个盒子。<br>具体情况如下:</p><img src="/assets/images/crimaster/2021/04/20210409-ans-3.png" alt="图片" class="post-image"></li></ol></li><li><p>证明M帮助N不影响自己的胜率:<br>可以由前面推理甲乙丙对话得到的甲抽取的是红色盒子内容为死因，其他盒子的内容，颜色，数字可以视为独立事件，被M选择的可能性是一样的，里面出现某一内容的可能性也一样。M接下来两次会在剩下的三个盒子中选择两个。无论M怎么选择，它们的概率一样。而策略的运用在这里不会影响概率，因此帮助N不会降低M获胜的可能。</p></li></ol></li><li><p>因此施寺是胜率更高的人，胜率为100%。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公平正义</title>
      <link href="2021/04/crimaster-reasoning-justice/"/>
      <url>2021/04/crimaster-reasoning-justice/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>施迩是一名侦探，他在调查罪犯石易的时候不幸身亡。施山和施寺是他的继承人，他们立志要找到施迩死亡的原因。<br>此外，施山想要找到作案工具，施寺希望找到作案证据。一天，罪犯石易把他们约到一个场馆玩生死游戏!</p><img src="/assets/images/crimaster/2021/04/20210409-1.png" alt="图片" class="post-image half"><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>场馆平面图如下，A房间里放着一排盒子，大厅看不见房间内发生的事情。</p><img src="/assets/images/crimaster/2021/04/20210409-2.png" alt="图片" class="post-image half"><p><font color="#e03e3e">在游戏开始前，所有的门关闭，施山和施寺待在大厅，允许交流。游戏开始后，两人则不能以任何方式联络，游戏胜负判定如下:</font><br>首先，施寺留在大厅，施山单独来到A房间，分别查看3个盒子里牌的内容。如果施山取出的卡片中有“工具”和“死因”，则可以通过 B房间的后门离开，施山游戏胜利。反之，施山游戏失败，被原地杀死并抹除痕迹。<br>施山完成游戏后，A房间的牌盒恢复原状。施寺单独来到A房间，分别查看2个盒子里牌的内容。如果卡片是“物证”和“死因”，施寺获得胜利。如果有“死因”但无“物证”，施寺则有一次指认“物证”所在盒子的机会。指认正确施寺仍获得胜利。否则，施寺游戏失败，被原地杀死并抹除痕迹。</p><h1 id="游戏布置"><a href="#游戏布置" class="headerlink" title="游戏布置"></a>游戏布置</h1><ol><li>布置说明<br>石易为了保证游戏的保密性，选择了甲乙丙三人来布置游戏，步骤如下!</li><li>第一步<br>计算机在虚拟“仓库”内生成一万个红、黄、蓝、绿四种颜色的虚拟盒子。每个盒子里有一张卡牌，正面为“死因”、“工具”、“物证”、“死神”中的一个，背面为[1,9]中的一个整数。石易从“仓库”选择一些盒子放入虚拟“书架”。有甲乙丙三人对这些盒子进行检查，确保其中涵盖了4种颜色和4个内容。此时三人可以看到最初石易所选牌型。接着计算机打乱盒子的顺序，三人无法查看后续牌型。</li><li>第二步<br>甲从“书架”上随机选择一个盒子，不打开盒子只记录颜色。之后，计算机把牌的正面发送给乙，同时销毁“仓库”和“书架”上其他同样颜色的盒子。</li><li>第三步<br>乙只能看牌的正面，并记录上面的内容。之后，计算机把牌的背面发送给丙，同时销毁“仓库”和“书架”上其他有同样内容的牌的盒子。</li><li>第四步<br>丙只能看牌的背面，并记录上面的数字。之后，计算机把牌放入盒子中，盒子放到A房间里，然后从“仓库”向“书架”补充盒子，补充牌的数量和丙记录的数量不同。</li><li>第五步<br>从第二步开始重复，直到“仓库”里的盒子全部销毁。</li></ol><h1 id="情况调查"><a href="#情况调查" class="headerlink" title="情况调查"></a>情况调查</h1><ol><li>两人关系<br>虽然施山和施寺因为争夺继承权的原因，关系并不好，但是在不降低自己胜利的概率情况下，施山和施寺还是游戏布置    会尽全量帮助对方。</li><li>独立事件<br>由于仓库内盒子的数量足够大，向书架补充盒子的过程充满随机性，最终桌面上呈现的盒子的颜色、数字、内容均视为独立事件，彼此不影响。</li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>施山和施寺谁更有可能获得胜利？<br>A.施山<br>B.施寺<br>C.获胜概率相同</li></ol><ol start="2"><li>获胜的概率为？<br>A.100%<br>B.86%<br>C.67%<br>D.50%</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YK手稿之手办失窃案(EAC科普篇)-答案</title>
      <link href="2021/04/crimaster-reasoning-yk-eac-promote-ans/"/>
      <url>2021/04/crimaster-reasoning-yk-eac-promote-ans/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol><li>谁最有可能没撒谎？<br>A.同学甲<br>B.同学乙<br><font color="#56c596">C.同学丙</font><br>D.都撒谎了</li></ol><ol start="2"><li>谁最可疑最有可能犯案？<br><font color="#56c596">A.同学甲</font><br>B.同学乙<br>C.同学丙  </li></ol><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>通过EAC眼睛解读线索发现同学甲十分可疑，要求他打开书包给我看看。结果发现了消失的手办。同学甲最后对自己的行窃事实供认不讳。</p><p>本期案件的突破点，在于EAC眼睛解读线索进行测谎。普遍规则如图:</p><img src="/assets/images/crimaster/2021/04/20210407-ans-1.png" alt="图片" class="post-image"><p>同学乙的眼睛解读线索:左上，右上，左上，右上，左上，部分未撒谎。事先询问同学乙做什么，来找出同学乙EAC规律，当时她在回忆空间眼珠左上转动;询问之后会不会继续当纪委，脑子在创立之后的画面，眼睛往右上转。由此可推断:同学乙的EAC规律为左上记忆空间，右上创立空间。询问案发前后干了什么，眼珠都是左上转动，可见是在回忆，并未撒谎。然而问她为什么可以当纪委时，脑子在创立空间，在刻意隐瞒。在仔细询问过后，知道了部分的内幕，他当学习委员的原因是家长与老师私下有过协商。</p><p>同学丙的眼睛解读线索:右上，左下，右上，右上，右上，左上，右上，实话。询问同学丙早上吃啥时，同学丙回忆空间，眼睛右上转动;询问未来一直吃面包会怎样时，同学丙内心感受，眼睛左下转动;描述的玩具的来源时，同学丙在回忆空间，眼睛右上转动;同学丙描述与自己玩具未来的行为，创建空间时，眼睛左上转动。询问是否见到可疑人物时，眼睛依旧右上转动。同学丙的 EAC规律为:右上记忆空间，左上创建空间。可见没有撒谎。</p><p>同学甲的眼睛解读线索:右上，左上，左下，左上，左上，左上，左上，左上。撒谎。询问同学甲如何来上学的，同学甲在回忆空间时眼珠右上转动;询问未来是否一直会这样上学，创建空间时，眼睛左上转动;询问触觉时，眼睛朝左下转动，可见同学甲的EAC规律为:左上创建空间，右上回忆空间，左下触觉。然而询问案发前后经过及书包时，眼睛往左上转动，说明很可能是在撒谎。</p>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理-解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YK手稿之手办失窃案(EAC科普篇)</title>
      <link href="2021/04/crimaster-reasoning-yk-eac-promote/"/>
      <url>2021/04/crimaster-reasoning-yk-eac-promote/</url>
      
        <content type="html"><![CDATA[<h1 id="案件介绍"><a href="#案件介绍" class="headerlink" title="案件介绍"></a>案件介绍</h1><p>这是一系列真实的案例，由盗窃到连环杀人，案情由简单到复杂。破案过程精彩，案件学习之处众多便记录下来，称之为YK手稿。<br>故事还要追溯到小学时期，这也是我第一次尝试真实推理。<br>这天我隔壁班的好朋友小曦找到我，说自己的手办在班里弄丢了，想寻求我帮忙协助找回!</p><h1 id="现场侦测"><a href="#现场侦测" class="headerlink" title="现场侦测"></a>现场侦测</h1><p>目前已经能大致锁定三位同学有行窃的作案时间，但是自己无法进行辨别，寻求我的帮助<br>我稍作思考片刻，想起前几日在Crimaster犯罪大师上面学习到的 EAC眼睛解读线索。此时此景，运用在合适不过。<br>于是我便找来这几位同学进行了一一询问。</p><p><font color="#e03e3e">注意!本案不会涉及伪装或非自然影响的特殊情况!</font></p><h1 id="测谎对话"><a href="#测谎对话" class="headerlink" title="测谎对话"></a>测谎对话</h1><h2 id="同学甲"><a href="#同学甲" class="headerlink" title="同学甲"></a>同学甲</h2><p>我：诶兄弟，你今天是怎么来上学的?<br>同学甲眼珠朝右上转了转，然后说道：我跟往常一样啊，都是坐公交上学的。<br>我：你之后都会一直坐公交吗?<br>同学甲眼珠朝左上转了转，然后说道：应该会的，我爸公司跟学校不顺路，可能偶尔会送我吧。<br>我：对了，你受伤的手还疼吗?<br>同学甲眼珠朝左下转了转，然后说到：还有点吧，无伤大雅。<br>我：你知道吗，就在今天下午3:00，小曦的手办疑似失窃了，你知不知晓这件事?<br>同学甲眼珠朝左上转了转，然后说道：不会吧？不见了？早上我看他还拿出来显摆来着。诶你这么问你是在怀疑我吗?我可没偷啊!<br>我：你俩关系怎么样？<br>同学甲眼珠朝左上转了转，然后说道：他人挺好的!对我挺不错的，就是爱显摆。那个手办我才不稀罕我干嘛要偷?<br>我：你确定?你俩关系真的挺好?<br>同学甲眼珠朝左上转了转，然后说道：挺好的，关系挺好的，没有任何冲突!<br>我：跟你说实话吧我现在怀疑你是行窃之事的嫌疑人，请你说一下你三点前后干了什么?<br>同学甲眼珠朝左上转了转，然后说道：没干啥，我今天是值日生，大课间完我就打扫打扫卫生，没有去偷啊!<br>我：你书包那么鼓是怎么回事?<br>同学甲眼睛朝左上转了转，说道没…没啥，我悄悄跟你讲，是我偷偷带的薯片，你别说出去嗷!<br>我：你确保没有说谎?<br>同学甲：我可没有说谎!</p><h2 id="同学乙"><a href="#同学乙" class="headerlink" title="同学乙"></a>同学乙</h2><p>我：你在你们班是什么职位，都要做些什么啊?<br>同学乙眼睛朝左上转了转，然后说道：我是学习委员，一般就是要提前帮老师搬运资料，擦黑板之类的，没啥要干的了。<br>我：你觉得你之后都会一直当学委吗?<br>同学乙眼珠朝右上转了转，然后说道：可能是吧，我比较心细，老师很信任我。<br>我：小曦的手办在今天下午3:00失窃了，那个时间是你第一个进入教室的，你为本案的嫌疑人。下午3:00前后，你都在干什么?<br>同学乙眼珠朝左上转了转，然后说道：我三点前一直在准备，帮老师提前开投影，哪里也没去。之后就去了趟老师办公室拿作业回来，老师三点半就来了，我一直在整理同学们的作业，也没留意其他的，他的手办咋会丢了呢?<br>我：你一个男的，做事据我所知也没那么细心，为什么这么自信可以一直当学委?<br>同学乙眼睛朝右上转了转说道：我..我也不知道……反正，老师跟我说就是我能当。<br>我：你记得之后班里还有其他人吗?<br>同学乙眼睛朝左上转了转说到：啊?有吧我没有在意我一直在忙。</p><h2 id="同学丙"><a href="#同学丙" class="headerlink" title="同学丙"></a>同学丙</h2><p>我：对了，你早上吃的啥?<br>同学丙眼睛朝右上转了转，然后说道：来学校路上买了俩面包吃。<br>我：你好像很喜欢吃面包诶，昨天你也吃的面包。那如果让你天天吃你会不会还喜欢?<br>同学丙眼睛超左下转了转然后说道：可别，那可腻死我。<br>我：诶你跟小曦现在是什么关系?<br>同学丙眼睛朝右上转了转，然后说道：他故意弄坏我的玩具还不想赔偿，连句道歉都没有!仇人关系。<br>我：今天你下午3:00前后在哪?<br>同学丙眼睛朝右上转了转，然后说道：我三点就去他找他，说赔偿的事，然后一进去就发现他急着找什么东西。还问我是不是偷了他的手办，原来他的东西丢了，真痛快，让他尝尝自己的宝贝没了的滋味。<br>我：你好像很喜欢你的玩具?<br>同学丙眼睛朝右上转了转说道：当然!这是我爸送我的礼物，我一直很珍惜!然后眼睛朝左上转了转说道：他一直陪着我，我跟它以后本来会一直都在一起，一起吃饭啊，睡觉<br>我：停停!你打算要的是什么赔偿?<br>同学丙立刻说道：赔钱啊!我偷他东西干嘛我又不稀罕，<br>我：那你发现其他可疑人物吗?<br>同学丙眼睛朝右上转了转，然后说道：没有，我跟他座位隔着的，我可不会显得看他那去。<br>我：你在撒谎，<br>同学丙：我说的可都是事实!</p><p>我记录下了他们的表情反应，都没什么奇怪的地方。可是直觉告诉我就是他们其中一个人行窃了!等等，表情，习惯，思维..我知道是谁了!</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>谁最有可能没撒谎？<br> A.同学甲<br> B.同学乙<br> C.同学丙<br> D.都撒谎了</li></ol><ol start="2"><li>谁最可疑最有可能犯案？<br>A.同学甲<br>B.同学乙<br>C.同学丙</li></ol>]]></content>
      
      
      <categories>
          
          <category> 犯罪大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刑侦推理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
